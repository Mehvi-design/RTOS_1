
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005930  08005930  00006930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d8  080059d8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059dc  080059dc  000069dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080059e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016cc  20000060  08005a40  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  08005a40  0000772c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afb7  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003935  00000000  00000000  00022047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00025980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f4  00000000  00000000  000270a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf99  00000000  00000000  0002829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a25c  00000000  00000000  00054235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d723  00000000  00000000  0006e491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017bbb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  0017bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0018206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005918 	.word	0x08005918

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005918 	.word	0x08005918

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a07      	ldr	r2, [pc, #28]	@ (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a06      	ldr	r2, [pc, #24]	@ (800054c <vApplicationGetIdleTaskMemory+0x30>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000007c 	.word	0x2000007c
 800054c:	2000011c 	.word	0x2000011c

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b08e      	sub	sp, #56	@ 0x38
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fbc6 	bl	8000ce6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f837 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f8f3 	bl	8000748 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000562:	f000 f897 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000566:	f000 f8c1 	bl	80006ec <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <main+0x6c>)
 800056c:	f107 041c 	add.w	r4, r7, #28
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 fe75 	bl	8004274 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <main+0x70>)
 800058e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task02_init, osPriorityNormal, 0, 128);
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <main+0x74>)
 8000592:	463c      	mov	r4, r7
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005a2:	463b      	mov	r3, r7
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fe64 	bl	8004274 <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <main+0x78>)
 80005b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b2:	f003 fe58 	bl	8004266 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	bf00      	nop
 80005b8:	e7fd      	b.n	80005b6 <main+0x66>
 80005ba:	bf00      	nop
 80005bc:	0800593c 	.word	0x0800593c
 80005c0:	20000888 	.word	0x20000888
 80005c4:	08005964 	.word	0x08005964
 80005c8:	2000088c 	.word	0x2000088c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 f8ba 	bl	8005754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f000 ffcd 	bl	8001590 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 f97a 	bl	80008f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f000 ffa8 	bl	8001554 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <SystemClock_Config+0xc4>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060a:	4a21      	ldr	r2, [pc, #132]	@ (8000690 <SystemClock_Config+0xc4>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f817 	bl	800167c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 f94e 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc1c 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800067e:	f000 f939 	bl	80008f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000682:	f002 f967 	bl	8002954 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000686:	bf00      	nop
 8000688:	3758      	adds	r7, #88	@ 0x58
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_LPUART1_UART_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006d2:	f002 fde3 	bl	800329c <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 f90a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000031c 	.word	0x2000031c
 80006e8:	40008000 	.word	0x40008000

080006ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2206      	movs	r2, #6
 80006fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2202      	movs	r2, #2
 8000702:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2202      	movs	r2, #2
 8000708:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2201      	movs	r2, #1
 800070e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2201      	movs	r2, #1
 8000720:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2201      	movs	r2, #1
 800072c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	f000 fddc 	bl	80012ec <HAL_PCD_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8db 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200003a4 	.word	0x200003a4

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b48      	ldr	r3, [pc, #288]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a47      	ldr	r2, [pc, #284]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <MX_GPIO_Init+0x138>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b42      	ldr	r3, [pc, #264]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a41      	ldr	r2, [pc, #260]	@ (8000880 <MX_GPIO_Init+0x138>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b3f      	ldr	r3, [pc, #252]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b3c      	ldr	r3, [pc, #240]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a3b      	ldr	r2, [pc, #236]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b39      	ldr	r3, [pc, #228]	@ (8000880 <MX_GPIO_Init+0x138>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b36      	ldr	r3, [pc, #216]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a35      	ldr	r2, [pc, #212]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_GPIO_Init+0x138>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80007d6:	f000 ff41 	bl	800165c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80007e0:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x13c>)
 80007e2:	f000 fd51 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2140      	movs	r1, #64	@ 0x40
 80007ea:	4827      	ldr	r0, [pc, #156]	@ (8000888 <MX_GPIO_Init+0x140>)
 80007ec:	f000 fd4c 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4821      	ldr	r0, [pc, #132]	@ (800088c <MX_GPIO_Init+0x144>)
 8000808:	f000 fbac 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800080c:	2308      	movs	r3, #8
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f000 fb9f 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000826:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	4811      	ldr	r0, [pc, #68]	@ (8000884 <MX_GPIO_Init+0x13c>)
 8000840:	f000 fb90 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000844:	2320      	movs	r3, #32
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_GPIO_Init+0x140>)
 8000858:	f000 fb84 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_GPIO_Init+0x140>)
 8000874:	f000 fb76 	bl	8000f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	@ 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	48000400 	.word	0x48000400
 8000888:	48001800 	.word	0x48001800
 800088c:	48000800 	.word	0x48000800

08000890 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000898:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <StartDefaultTask+0x1c>)
 800089e:	f000 fd0b 	bl	80012b8 <HAL_GPIO_TogglePin>
    osDelay(100);
 80008a2:	2064      	movs	r0, #100	@ 0x64
 80008a4:	f003 fd32 	bl	800430c <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008a8:	bf00      	nop
 80008aa:	e7f5      	b.n	8000898 <StartDefaultTask+0x8>
 80008ac:	48000400 	.word	0x48000400

080008b0 <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008b8:	2180      	movs	r1, #128	@ 0x80
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <Task02_init+0x1c>)
 80008bc:	f000 fcfc 	bl	80012b8 <HAL_GPIO_TogglePin>

    osDelay(100);
 80008c0:	2064      	movs	r0, #100	@ 0x64
 80008c2:	f003 fd23 	bl	800430c <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008c6:	bf00      	nop
 80008c8:	e7f6      	b.n	80008b8 <Task02_init+0x8>
 80008ca:	bf00      	nop
 80008cc:	48000400 	.word	0x48000400

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	@ (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008e2:	f000 fa19 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_MspInit+0x4c>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	@ 0x60
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_MspInit+0x4c>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x4c>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fae7 	bl	8000f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0ac      	sub	sp, #176	@ 0xb0
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	228c      	movs	r2, #140	@ 0x8c
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f004 feef 	bl	8005754 <memset>
  if(huart->Instance==LPUART1)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <HAL_UART_MspInit+0xb4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d13d      	bne.n	80009fc <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000980:	2320      	movs	r3, #32
 8000982:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fce5 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000998:	f7ff ffac 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800099c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 800099e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009a0:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80009a8:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 80009aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a13      	ldr	r2, [pc, #76]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 80009ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_UART_MspInit+0xb8>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80009cc:	f000 fe46 	bl	800165c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009d0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80009d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009ea:	2308      	movs	r3, #8
 80009ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <HAL_UART_MspInit+0xbc>)
 80009f8:	f000 fab4 	bl	8000f64 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80009fc:	bf00      	nop
 80009fe:	37b0      	adds	r7, #176	@ 0xb0
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40008000 	.word	0x40008000
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48001800 	.word	0x48001800

08000a10 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ae      	sub	sp, #184	@ 0xb8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	228c      	movs	r2, #140	@ 0x8c
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fe8f 	bl	8005754 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a3e:	d17c      	bne.n	8000b3a <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000a46:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000a4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000a56:	2318      	movs	r3, #24
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000a66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc73 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000a7c:	f7ff ff3a 	bl	80008f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a2f      	ldr	r2, [pc, #188]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a98:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab2:	230a      	movs	r3, #10
 8000ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f000 fa4f 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f000 fa3e 	bl	8000f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ae8:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aec:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000aee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d114      	bne.n	8000b36 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000b24:	f000 fd8a 	bl	800163c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <HAL_PCD_MspInit+0x134>)
 8000b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b34:	e001      	b.n	8000b3a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000b36:	f000 fd81 	bl	800163c <HAL_PWREx_EnableVddUSB>
}
 8000b3a:	bf00      	nop
 8000b3c:	37b8      	adds	r7, #184	@ 0xb8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	@ 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	4b2e      	ldr	r3, [pc, #184]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b62:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <HAL_InitTick+0xc8>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6e:	f107 020c 	add.w	r2, r7, #12
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fb5d 	bl	8002238 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b7e:	f001 fb45 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8000b82:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <HAL_InitTick+0xcc>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	0c9b      	lsrs	r3, r3, #18
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_InitTick+0xd4>)
 8000b96:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000bba:	f002 f8a9 	bl	8002d10 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_InitTick+0xd0>)
 8000bce:	f002 f901 	bl	8002dd4 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000be0:	2019      	movs	r0, #25
 8000be2:	f000 f9b1 	bl	8000f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d808      	bhi.n	8000bfe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2019      	movs	r0, #25
 8000bf2:	f000 f98d 	bl	8000f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xd8>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e002      	b.n	8000c04 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3730      	adds	r7, #48	@ 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20000890 	.word	0x20000890
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c60:	4802      	ldr	r0, [pc, #8]	@ (8000c6c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c62:	f002 f927 	bl	8002eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000890 	.word	0x20000890

08000c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ccc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c98:	f7ff ffea 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	@ (8000cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce0 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f004 fdad 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc6:	f7ff fc43 	bl	8000550 <main>

08000cca <LoopForever>:

LoopForever:
    b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ccc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cd8:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8000cdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ce0:	2000172c 	.word	0x2000172c

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>

08000ce6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f902 	bl	8000efa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f7ff ff26 	bl	8000b48 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e001      	b.n	8000d0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d08:	f7ff fdfa 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200008dc 	.word	0x200008dc

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200008dc 	.word	0x200008dc

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff4c 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff ffb1 	bl	8000e94 <NVIC_EncodePriority>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff80 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f40:	bf00      	nop
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff54 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e166      	b.n	8001242 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4013      	ands	r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8158 	beq.w	800123c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d005      	beq.n	8000fa4 <HAL_GPIO_Init+0x40>
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d130      	bne.n	8001006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	f003 0201 	and.w	r2, r3, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b03      	cmp	r3, #3
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d123      	bne.n	8001096 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0203 	and.w	r2, r3, #3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80b2 	beq.w	800123c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	4b61      	ldr	r3, [pc, #388]	@ (8001260 <HAL_GPIO_Init+0x2fc>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	4a60      	ldr	r2, [pc, #384]	@ (8001260 <HAL_GPIO_Init+0x2fc>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001260 <HAL_GPIO_Init+0x2fc>)
 80010e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001264 <HAL_GPIO_Init+0x300>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800111a:	d02b      	beq.n	8001174 <HAL_GPIO_Init+0x210>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <HAL_GPIO_Init+0x304>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d025      	beq.n	8001170 <HAL_GPIO_Init+0x20c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a51      	ldr	r2, [pc, #324]	@ (800126c <HAL_GPIO_Init+0x308>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d01f      	beq.n	800116c <HAL_GPIO_Init+0x208>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a50      	ldr	r2, [pc, #320]	@ (8001270 <HAL_GPIO_Init+0x30c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d019      	beq.n	8001168 <HAL_GPIO_Init+0x204>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4f      	ldr	r2, [pc, #316]	@ (8001274 <HAL_GPIO_Init+0x310>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x200>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4e      	ldr	r2, [pc, #312]	@ (8001278 <HAL_GPIO_Init+0x314>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1fc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4d      	ldr	r2, [pc, #308]	@ (800127c <HAL_GPIO_Init+0x318>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4c      	ldr	r2, [pc, #304]	@ (8001280 <HAL_GPIO_Init+0x31c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1f4>
 8001154:	2307      	movs	r3, #7
 8001156:	e00e      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001158:	2308      	movs	r3, #8
 800115a:	e00c      	b.n	8001176 <HAL_GPIO_Init+0x212>
 800115c:	2306      	movs	r3, #6
 800115e:	e00a      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001160:	2305      	movs	r3, #5
 8001162:	e008      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001164:	2304      	movs	r3, #4
 8001166:	e006      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001168:	2303      	movs	r3, #3
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x212>
 800116c:	2302      	movs	r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x212>
 8001174:	2300      	movs	r3, #0
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001186:	4937      	ldr	r1, [pc, #220]	@ (8001264 <HAL_GPIO_Init+0x300>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001194:	4b3b      	ldr	r3, [pc, #236]	@ (8001284 <HAL_GPIO_Init+0x320>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b8:	4a32      	ldr	r2, [pc, #200]	@ (8001284 <HAL_GPIO_Init+0x320>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <HAL_GPIO_Init+0x320>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <HAL_GPIO_Init+0x320>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_GPIO_Init+0x320>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800120c:	4a1d      	ldr	r2, [pc, #116]	@ (8001284 <HAL_GPIO_Init+0x320>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_GPIO_Init+0x320>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <HAL_GPIO_Init+0x320>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f ae91 	bne.w	8000f74 <HAL_GPIO_Init+0x10>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000
 8001268:	48000400 	.word	0x48000400
 800126c:	48000800 	.word	0x48000800
 8001270:	48000c00 	.word	0x48000c00
 8001274:	48001000 	.word	0x48001000
 8001278:	48001400 	.word	0x48001400
 800127c:	48001800 	.word	0x48001800
 8001280:	48001c00 	.word	0x48001c00
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43d9      	mvns	r1, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e101      	b.n	8001502 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fb7c 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f002 fd04 	bl	8003d38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7c1a      	ldrb	r2, [r3, #16]
 8001338:	f88d 2000 	strb.w	r2, [sp]
 800133c:	3304      	adds	r3, #4
 800133e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001340:	f002 fccd 	bl	8003cde <USB_CoreInit>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2202      	movs	r2, #2
 800134e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0d5      	b.n	8001502 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fcfc 	bl	8003d5a <USB_SetCurrentMode>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0c6      	b.n	8001502 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e04a      	b.n	8001410 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3315      	adds	r3, #21
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800138e:	7bfa      	ldrb	r2, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3314      	adds	r3, #20
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	b298      	uxth	r0, r3
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	332e      	adds	r3, #46	@ 0x2e
 80013b6:	4602      	mov	r2, r0
 80013b8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3318      	adds	r3, #24
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	331c      	adds	r3, #28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3320      	adds	r3, #32
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	3324      	adds	r3, #36	@ 0x24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3301      	adds	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3af      	bcc.n	800137a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e044      	b.n	80014aa <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	440b      	add	r3, r1
 800149c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	791b      	ldrb	r3, [r3, #4]
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3b5      	bcc.n	8001420 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7c1a      	ldrb	r2, [r3, #16]
 80014bc:	f88d 2000 	strb.w	r2, [sp]
 80014c0:	3304      	adds	r3, #4
 80014c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c4:	f002 fc96 	bl	8003df4 <USB_DevInit>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e013      	b.n	8001502 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d102      	bne.n	80014f6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f80a 	bl	800150a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fe3b 	bl	8004176 <USB_DevDisconnect>

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	f043 0303 	orr.w	r3, r3, #3
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000

08001574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <HAL_PWREx_GetVoltageRange+0x18>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000

08001590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800159e:	d130      	bne.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015ac:	d038      	beq.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ae:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2232      	movs	r2, #50	@ 0x32
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0c9b      	lsrs	r3, r3, #18
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d4:	e002      	b.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e8:	d102      	bne.n	80015f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f2      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015fc:	d110      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e00f      	b.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800160a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160e:	d007      	beq.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001618:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800161e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40007000 	.word	0x40007000
 8001634:	20000000 	.word	0x20000000
 8001638:	431bde83 	.word	0x431bde83

0800163c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164a:	6053      	str	r3, [r2, #4]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40007000 	.word	0x40007000

0800165c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166a:	6053      	str	r3, [r2, #4]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40007000 	.word	0x40007000

0800167c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	f000 bc08 	b.w	8001ea0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001690:	4b96      	ldr	r3, [pc, #600]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169a:	4b94      	ldr	r3, [pc, #592]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80e4 	beq.w	800187a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4c>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	f040 808b 	bne.w	80017d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	f040 8087 	bne.w	80017d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c8:	4b88      	ldr	r3, [pc, #544]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x64>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e3df      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1a      	ldr	r2, [r3, #32]
 80016e4:	4b81      	ldr	r3, [pc, #516]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_RCC_OscConfig+0x7e>
 80016f0:	4b7e      	ldr	r3, [pc, #504]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016f8:	e005      	b.n	8001706 <HAL_RCC_OscConfig+0x8a>
 80016fa:	4b7c      	ldr	r3, [pc, #496]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001706:	4293      	cmp	r3, r2
 8001708:	d223      	bcs.n	8001752 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fdc4 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e3c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171e:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a72      	ldr	r2, [pc, #456]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b70      	ldr	r3, [pc, #448]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	496d      	ldr	r1, [pc, #436]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173c:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	4968      	ldr	r1, [pc, #416]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e025      	b.n	800179e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001752:	4b66      	ldr	r3, [pc, #408]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a65      	ldr	r2, [pc, #404]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b63      	ldr	r3, [pc, #396]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4960      	ldr	r1, [pc, #384]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001770:	4b5e      	ldr	r3, [pc, #376]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	495b      	ldr	r1, [pc, #364]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fd84 	bl	800229c <RCC_SetFlashLatencyFromMSIRange>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e380      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800179e:	f000 fc87 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b51      	ldr	r3, [pc, #324]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	4950      	ldr	r1, [pc, #320]	@ (80018f0 <HAL_RCC_OscConfig+0x274>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <HAL_RCC_OscConfig+0x278>)
 80017bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017be:	4b4e      	ldr	r3, [pc, #312]	@ (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f9c0 	bl	8000b48 <HAL_InitTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d052      	beq.n	8001878 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	e364      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d032      	beq.n	8001844 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017de:	4b43      	ldr	r3, [pc, #268]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a42      	ldr	r2, [pc, #264]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ea:	f7ff faa9 	bl	8000d40 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f2:	f7ff faa5 	bl	8000d40 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e34d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001804:	4b39      	ldr	r3, [pc, #228]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001810:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a35      	ldr	r2, [pc, #212]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4930      	ldr	r1, [pc, #192]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182e:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	492b      	ldr	r1, [pc, #172]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e01a      	b.n	800187a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a28      	ldr	r2, [pc, #160]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001850:	f7ff fa76 	bl	8000d40 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001858:	f7ff fa72 	bl	8000d40 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e31a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x1dc>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d073      	beq.n	800196e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b08      	cmp	r3, #8
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x21c>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d10e      	bne.n	80018b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d063      	beq.n	800196c <HAL_RCC_OscConfig+0x2f0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d15f      	bne.n	800196c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e2f7      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x24c>
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e025      	b.n	8001914 <HAL_RCC_OscConfig+0x298>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d0:	d114      	bne.n	80018fc <HAL_RCC_OscConfig+0x280>
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a02      	ldr	r2, [pc, #8]	@ (80018ec <HAL_RCC_OscConfig+0x270>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e013      	b.n	8001914 <HAL_RCC_OscConfig+0x298>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	08005988 	.word	0x08005988
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004
 80018fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a9f      	ldr	r2, [pc, #636]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b9d      	ldr	r3, [pc, #628]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fa10 	bl	8000d40 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fa0c 	bl	8000d40 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	@ 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e2b4      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001936:	4b92      	ldr	r3, [pc, #584]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x2a8>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f9fc 	bl	8000d40 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f9f8 	bl	8000d40 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e2a0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195e:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x2d0>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d060      	beq.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x310>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d119      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x328>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e27d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b76      	ldr	r3, [pc, #472]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	4973      	ldr	r1, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	e040      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d023      	beq.n	8001a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f9b7 	bl	8000d40 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f9b3 	bl	8000d40 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e25b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e8:	4b65      	ldr	r3, [pc, #404]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b62      	ldr	r3, [pc, #392]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	061b      	lsls	r3, r3, #24
 8001a02:	495f      	ldr	r1, [pc, #380]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e018      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f993 	bl	8000d40 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f98f 	bl	8000d40 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e237      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a30:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a50:	4b4b      	ldr	r3, [pc, #300]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a56:	4a4a      	ldr	r2, [pc, #296]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff f96e 	bl	8000d40 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff f96a 	bl	8000d40 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e212      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7a:	4b41      	ldr	r3, [pc, #260]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3ec>
 8001a88:	e01b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a90:	4a3b      	ldr	r2, [pc, #236]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f023 0301 	bic.w	r3, r3, #1
 8001a96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f951 	bl	8000d40 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f94d 	bl	8000d40 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1f5      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ef      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a6 	beq.w	8001c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a26      	ldr	r2, [pc, #152]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <HAL_RCC_OscConfig+0x508>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d118      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b08:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <HAL_RCC_OscConfig+0x508>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b84 <HAL_RCC_OscConfig+0x508>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f914 	bl	8000d40 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7ff f910 	bl	8000d40 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1b8      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <HAL_RCC_OscConfig+0x508>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d8>
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b52:	e029      	b.n	8001ba8 <HAL_RCC_OscConfig+0x52c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d115      	bne.n	8001b88 <HAL_RCC_OscConfig+0x50c>
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b62:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b72:	4a03      	ldr	r2, [pc, #12]	@ (8001b80 <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b7c:	e014      	b.n	8001ba8 <HAL_RCC_OscConfig+0x52c>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40007000 	.word	0x40007000
 8001b88:	4b9d      	ldr	r3, [pc, #628]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	4a9c      	ldr	r2, [pc, #624]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b98:	4b99      	ldr	r3, [pc, #612]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a98      	ldr	r2, [pc, #608]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d016      	beq.n	8001bde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f8c6 	bl	8000d40 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f8c2 	bl	8000d40 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e168      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bce:	4b8c      	ldr	r3, [pc, #560]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0ed      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x53c>
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f8af 	bl	8000d40 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be4:	e00a      	b.n	8001bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be6:	f7ff f8ab 	bl	8000d40 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e151      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bfc:	4b80      	ldr	r3, [pc, #512]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ed      	bne.n	8001be6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7ffb      	ldrb	r3, [r7, #31]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b7b      	ldr	r3, [pc, #492]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	4a7a      	ldr	r2, [pc, #488]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d03c      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c30:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c36:	4a72      	ldr	r2, [pc, #456]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff f87e 	bl	8000d40 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c48:	f7ff f87a 	bl	8000d40 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e122      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ef      	beq.n	8001c48 <HAL_RCC_OscConfig+0x5cc>
 8001c68:	e01b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c70:	4a63      	ldr	r2, [pc, #396]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f861 	bl	8000d40 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c82:	f7ff f85d 	bl	8000d40 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e105      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1ef      	bne.n	8001c82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 80f9 	beq.w	8001e9e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f040 80cf 	bne.w	8001e54 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cb6:	4b52      	ldr	r3, [pc, #328]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0203 	and.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d12c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d123      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d11b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d113      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	085b      	lsrs	r3, r3, #1
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d071      	beq.n	8001e08 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d068      	beq.n	8001dfc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d2a:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d36:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0ac      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d46:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d52:	f7fe fff5 	bl	8000d40 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe fff1 	bl	8000d40 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e099      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <HAL_RCC_OscConfig+0x788>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d92:	0212      	lsls	r2, r2, #8
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d9a:	0852      	lsrs	r2, r2, #1
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	0552      	lsls	r2, r2, #21
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001da6:	0852      	lsrs	r2, r2, #1
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0652      	lsls	r2, r2, #25
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001db2:	06d2      	lsls	r2, r2, #27
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4912      	ldr	r1, [pc, #72]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd4:	f7fe ffb4 	bl	8000d40 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ffb0 	bl	8000d40 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e058      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <HAL_RCC_OscConfig+0x784>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfa:	e050      	b.n	8001e9e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e04f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d144      	bne.n	8001e9e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a20      	ldr	r2, [pc, #128]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e2c:	f7fe ff88 	bl	8000d40 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe ff84 	bl	8000d40 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e02c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x7b8>
 8001e52:	e024      	b.n	8001e9e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d01f      	beq.n	8001e9a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7fe ff6b 	bl	8000d40 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe ff67 	bl	8000d40 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e00f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4905      	ldr	r1, [pc, #20]	@ (8001ea8 <HAL_RCC_OscConfig+0x82c>)
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_OscConfig+0x830>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	e001      	b.n	8001e9e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	feeefffc 	.word	0xfeeefffc

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0e7      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b75      	ldr	r3, [pc, #468]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b72      	ldr	r3, [pc, #456]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4970      	ldr	r1, [pc, #448]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0cf      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d908      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4960      	ldr	r1, [pc, #384]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04c      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	4b5a      	ldr	r3, [pc, #360]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d121      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0a6      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4e:	4b54      	ldr	r3, [pc, #336]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f66:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e08e      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f76:	4b4a      	ldr	r3, [pc, #296]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e086      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b46      	ldr	r3, [pc, #280]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4943      	ldr	r1, [pc, #268]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f98:	f7fe fed2 	bl	8000d40 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fece 	bl	8000d40 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e06e      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	492b      	ldr	r1, [pc, #172]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff6:	4b29      	ldr	r3, [pc, #164]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d210      	bcs.n	8002026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002004:	4b25      	ldr	r3, [pc, #148]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4923      	ldr	r1, [pc, #140]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d001      	beq.n	8002026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e036      	b.n	8002094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002032:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4918      	ldr	r1, [pc, #96]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4910      	ldr	r1, [pc, #64]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002064:	f000 f824 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	490b      	ldr	r1, [pc, #44]	@ (80020a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
 8002080:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1fc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fd5d 	bl	8000b48 <HAL_InitTick>
 800208e:	4603      	mov	r3, r0
 8002090:	72fb      	strb	r3, [r7, #11]

  return status;
 8002092:	7afb      	ldrb	r3, [r7, #11]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	08005988 	.word	0x08005988
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020be:	4b3e      	ldr	r3, [pc, #248]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c8:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x34>
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d121      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d11e      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e4:	4b34      	ldr	r3, [pc, #208]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020f0:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e005      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800210c:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d102      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002128:	4b25      	ldr	r3, [pc, #148]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	e004      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d101      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d134      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800213e:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0xa6>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0xac>
 8002154:	e005      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	617b      	str	r3, [r7, #20]
      break;
 8002160:	e002      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	3301      	adds	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	0e5b      	lsrs	r3, r3, #25
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	3301      	adds	r3, #1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a8:	69bb      	ldr	r3, [r7, #24]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	@ 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080059a0 	.word	0x080059a0
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4904      	ldr	r1, [pc, #16]	@ (8002208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08005998 	.word	0x08005998

0800220c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002210:	f7ff ffda 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0adb      	lsrs	r3, r3, #11
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4904      	ldr	r1, [pc, #16]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08005998 	.word	0x08005998

08002238 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	220f      	movs	r2, #15
 8002246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_RCC_GetClockConfig+0x5c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <HAL_RCC_GetClockConfig+0x5c>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_RCC_GetClockConfig+0x60>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0207 	and.w	r2, r3, #7
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40022000 	.word	0x40022000

0800229c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b4:	f7ff f95e 	bl	8001574 <HAL_PWREx_GetVoltageRange>
 80022b8:	6178      	str	r0, [r7, #20]
 80022ba:	e014      	b.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	4a24      	ldr	r2, [pc, #144]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff f94e 	bl	8001574 <HAL_PWREx_GetVoltageRange>
 80022d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022ec:	d10b      	bne.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	@ 0x80
 80022f2:	d919      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80022f8:	d902      	bls.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022fa:	2302      	movs	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e013      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e010      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	@ 0x80
 800230a:	d902      	bls.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800230c:	2303      	movs	r3, #3
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e00a      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b80      	cmp	r3, #128	@ 0x80
 8002316:	d102      	bne.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e004      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b70      	cmp	r3, #112	@ 0x70
 8002322:	d101      	bne.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 0207 	bic.w	r2, r3, #7
 8002330:	4909      	ldr	r1, [pc, #36]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002338:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	429a      	cmp	r2, r3
 8002344:	d001      	beq.n	800234a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	40022000 	.word	0x40022000

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002364:	2300      	movs	r3, #0
 8002366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002368:	2300      	movs	r3, #0
 800236a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002374:	2b00      	cmp	r3, #0
 8002376:	d041      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002380:	d02a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002382:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002386:	d824      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800238c:	d008      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800238e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002392:	d81e      	bhi.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800239c:	d010      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800239e:	e018      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a0:	4b86      	ldr	r3, [pc, #536]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4a85      	ldr	r2, [pc, #532]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ac:	e015      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fadd 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023be:	e00c      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3320      	adds	r3, #32
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fbc6 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d0:	e003      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	74fb      	strb	r3, [r7, #19]
      break;
 80023d6:	e000      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10b      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023e0:	4b76      	ldr	r3, [pc, #472]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ee:	4973      	ldr	r1, [pc, #460]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023f6:	e001      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d041      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800240c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002410:	d02a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002416:	d824      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800241c:	d008      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800241e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002422:	d81e      	bhi.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800242c:	d010      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800242e:	e018      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002430:	4b62      	ldr	r3, [pc, #392]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a61      	ldr	r2, [pc, #388]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243c:	e015      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa95 	bl	8002974 <RCCEx_PLLSAI1_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244e:	e00c      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3320      	adds	r3, #32
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fb7e 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	74fb      	strb	r3, [r7, #19]
      break;
 8002466:	e000      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002470:	4b52      	ldr	r3, [pc, #328]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247e:	494f      	ldr	r1, [pc, #316]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a0 	beq.w	80025da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b4:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	4a40      	ldr	r2, [pc, #256]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	@ 0x58
 80024c0:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024dc:	f7fe fc30 	bl	8000d40 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7fe fc2c 	bl	8000d40 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	74fb      	strb	r3, [r7, #19]
        break;
 80024f6:	e005      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f8:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d15c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800250a:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	d019      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002528:	4b24      	ldr	r3, [pc, #144]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002534:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a20      	ldr	r2, [pc, #128]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fbeb 	bl	8000d40 <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	e00b      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fbe7 	bl	8000d40 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d902      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	74fb      	strb	r3, [r7, #19]
            break;
 8002584:	e006      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ec      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025b2:	e009      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c8:	7c7b      	ldrb	r3, [r7, #17]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4ba6      	ldr	r3, [pc, #664]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	4aa5      	ldr	r2, [pc, #660]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f023 0203 	bic.w	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	499c      	ldr	r1, [pc, #624]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002608:	4b97      	ldr	r3, [pc, #604]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 020c 	bic.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	4994      	ldr	r1, [pc, #592]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262a:	4b8f      	ldr	r3, [pc, #572]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	498b      	ldr	r1, [pc, #556]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264c:	4b86      	ldr	r3, [pc, #536]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4983      	ldr	r1, [pc, #524]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266e:	4b7e      	ldr	r3, [pc, #504]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267c:	497a      	ldr	r1, [pc, #488]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002690:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	4972      	ldr	r1, [pc, #456]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c0:	4969      	ldr	r1, [pc, #420]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d4:	4b64      	ldr	r3, [pc, #400]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026e2:	4961      	ldr	r1, [pc, #388]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002704:	4958      	ldr	r1, [pc, #352]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002718:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002726:	4950      	ldr	r1, [pc, #320]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800273a:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002748:	4947      	ldr	r1, [pc, #284]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800275c:	4b42      	ldr	r3, [pc, #264]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	493f      	ldr	r1, [pc, #252]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277e:	4b3a      	ldr	r3, [pc, #232]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	4936      	ldr	r1, [pc, #216]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800279c:	d106      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279e:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a31      	ldr	r2, [pc, #196]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a8:	60d3      	str	r3, [r2, #12]
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f8d9 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d028      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027dc:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	491f      	ldr	r1, [pc, #124]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027fa:	d106      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a19      	ldr	r2, [pc, #100]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002806:	60d3      	str	r3, [r2, #12]
 8002808:	e011      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002812:	d10c      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8aa 	bl	8002974 <RCCEx_PLLSAI1_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002858:	d108      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285a:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4a02      	ldr	r2, [pc, #8]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002864:	60d3      	str	r3, [r2, #12]
 8002866:	e013      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002868:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f879 	bl	8002974 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02f      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800289c:	4b2c      	ldr	r3, [pc, #176]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028aa:	4929      	ldr	r1, [pc, #164]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f856 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	74bb      	strb	r3, [r7, #18]
 80028d6:	e011      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3320      	adds	r3, #32
 80028e6:	2102      	movs	r1, #2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f935 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002918:	490d      	ldr	r1, [pc, #52]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800292c:	4b08      	ldr	r3, [pc, #32]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800293c:	4904      	ldr	r1, [pc, #16]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002944:	7cbb      	ldrb	r3, [r7, #18]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000

08002974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002982:	4b74      	ldr	r3, [pc, #464]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800298e:	4b71      	ldr	r3, [pc, #452]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
       ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
       ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d047      	beq.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d018      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x86>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d825      	bhi.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x62>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d009      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x74>
 80029d4:	e020      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e01a      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e013      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fa:	4b56      	ldr	r3, [pc, #344]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a06:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a16:	e006      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e004      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2e:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	430b      	orrs	r3, r1
 8002a44:	4943      	ldr	r1, [pc, #268]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d17c      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a50:	4b40      	ldr	r3, [pc, #256]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3f      	ldr	r2, [pc, #252]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f970 	bl	8000d40 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a64:	f7fe f96c 	bl	8000d40 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
        break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a78:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ef      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d15f      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d110      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a90:	4b30      	ldr	r3, [pc, #192]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002a98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	06d2      	lsls	r2, r2, #27
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	492a      	ldr	r1, [pc, #168]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	610b      	str	r3, [r1, #16]
 8002ab0:	e027      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d112      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab8:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6912      	ldr	r2, [r2, #16]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0552      	lsls	r2, r2, #21
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	491f      	ldr	r1, [pc, #124]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
 8002adc:	e011      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ae6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	0211      	lsls	r1, r2, #8
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6952      	ldr	r2, [r2, #20]
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0652      	lsls	r2, r2, #25
 8002afa:	430a      	orrs	r2, r1
 8002afc:	4915      	ldr	r1, [pc, #84]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b02:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f917 	bl	8000d40 <HAL_GetTick>
 8002b12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b16:	f7fe f913 	bl	8000d40 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d902      	bls.n	8002b2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	73fb      	strb	r3, [r7, #15]
          break;
 8002b28:	e005      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ef      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4903      	ldr	r1, [pc, #12]	@ (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b66:	4b69      	ldr	r3, [pc, #420]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d018      	beq.n	8002ba4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b72:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d10d      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
       ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b8a:	4b60      	ldr	r3, [pc, #384]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
       ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d047      	beq.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e044      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d018      	beq.n	8002bde <RCCEx_PLLSAI2_Config+0x86>
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d825      	bhi.n	8002bfc <RCCEx_PLLSAI2_Config+0xa4>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x62>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d009      	beq.n	8002bcc <RCCEx_PLLSAI2_Config+0x74>
 8002bb8:	e020      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bba:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11d      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bca:	e01a      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e013      	b.n	8002c06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bde:	4b4b      	ldr	r3, [pc, #300]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bea:	4b48      	ldr	r3, [pc, #288]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bfa:	e006      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e004      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c12:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	430b      	orrs	r3, r1
 8002c28:	4938      	ldr	r1, [pc, #224]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d166      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c34:	4b35      	ldr	r3, [pc, #212]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe f87e 	bl	8000d40 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c48:	f7fe f87a 	bl	8000d40 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
        break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ef      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d149      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d110      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	06d2      	lsls	r2, r2, #27
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	491f      	ldr	r1, [pc, #124]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	614b      	str	r3, [r1, #20]
 8002c94:	e011      	b.n	8002cba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c96:	4b1d      	ldr	r3, [pc, #116]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6892      	ldr	r2, [r2, #8]
 8002ca6:	0211      	lsls	r1, r2, #8
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6912      	ldr	r2, [r2, #16]
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0652      	lsls	r2, r2, #25
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	4915      	ldr	r1, [pc, #84]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cba:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f83b 	bl	8000d40 <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ccc:	e009      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cce:	f7fe f837 	bl	8000d40 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce0:	e005      	b.n	8002cee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ef      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e049      	b.n	8002db6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f841 	bl	8002dbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f9e0 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d001      	beq.n	8002dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04f      	b.n	8002e8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d018      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIM_Base_Start_IT+0x76>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <HAL_TIM_Base_Start_IT+0xd8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d115      	bne.n	8002e76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d015      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0xb4>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e62:	d011      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	e008      	b.n	8002e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e000      	b.n	8002e8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40013400 	.word	0x40013400
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	00010007 	.word	0x00010007

08002eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d020      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0202 	mvn.w	r2, #2
 8002ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8e9 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8db 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8ec 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0204 	mvn.w	r2, #4
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8c3 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8b5 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8c6 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0208 	mvn.w	r2, #8
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2204      	movs	r2, #4
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f89d 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f88f 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8a0 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0210 	mvn.w	r2, #16
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f877 	bl	80030d6 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f869 	bl	80030c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f87a 	bl	80030ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0201 	mvn.w	r2, #1
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fc58 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00c      	beq.n	800304e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f913 	bl	8003274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00c      	beq.n	8003072 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800306a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f90b 	bl	8003288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f834 	bl	80030fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00c      	beq.n	80030ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0220 	mvn.w	r2, #32
 80030b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8d3 	bl	8003260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a46      	ldr	r2, [pc, #280]	@ (8003240 <TIM_Base_SetConfig+0x12c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003132:	d00f      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a43      	ldr	r2, [pc, #268]	@ (8003244 <TIM_Base_SetConfig+0x130>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00b      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a42      	ldr	r2, [pc, #264]	@ (8003248 <TIM_Base_SetConfig+0x134>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a41      	ldr	r2, [pc, #260]	@ (800324c <TIM_Base_SetConfig+0x138>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	@ (8003250 <TIM_Base_SetConfig+0x13c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <TIM_Base_SetConfig+0x12c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003174:	d01b      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a32      	ldr	r2, [pc, #200]	@ (8003244 <TIM_Base_SetConfig+0x130>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d017      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a31      	ldr	r2, [pc, #196]	@ (8003248 <TIM_Base_SetConfig+0x134>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a30      	ldr	r2, [pc, #192]	@ (800324c <TIM_Base_SetConfig+0x138>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00f      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2f      	ldr	r2, [pc, #188]	@ (8003250 <TIM_Base_SetConfig+0x13c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2e      	ldr	r2, [pc, #184]	@ (8003254 <TIM_Base_SetConfig+0x140>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <TIM_Base_SetConfig+0x144>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2c      	ldr	r2, [pc, #176]	@ (800325c <TIM_Base_SetConfig+0x148>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <TIM_Base_SetConfig+0x12c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00f      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_Base_SetConfig+0x13c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00b      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <TIM_Base_SetConfig+0x140>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <TIM_Base_SetConfig+0x144>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_Base_SetConfig+0xf8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	@ (800325c <TIM_Base_SetConfig+0x148>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d103      	bne.n	8003214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d105      	bne.n	8003232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]
  }
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40012c00 	.word	0x40012c00
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40013400 	.word	0x40013400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e040      	b.n	8003330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fb46 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	@ 0x24
 80032c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fae0 	bl	80038a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f825 	bl	8003338 <UART_SetConfig>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e01b      	b.n	8003330 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb5f 	bl	80039ec <UART_CheckIdleState>
 800332e:	4603      	mov	r3, r0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b08a      	sub	sp, #40	@ 0x28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4313      	orrs	r3, r2
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4ba4      	ldr	r3, [pc, #656]	@ (80035f8 <UART_SetConfig+0x2c0>)
 8003368:	4013      	ands	r3, r2
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003370:	430b      	orrs	r3, r1
 8003372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a99      	ldr	r2, [pc, #612]	@ (80035fc <UART_SetConfig+0x2c4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a0:	4313      	orrs	r3, r2
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a90      	ldr	r2, [pc, #576]	@ (8003600 <UART_SetConfig+0x2c8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d126      	bne.n	8003410 <UART_SetConfig+0xd8>
 80033c2:	4b90      	ldr	r3, [pc, #576]	@ (8003604 <UART_SetConfig+0x2cc>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d81b      	bhi.n	8003408 <UART_SetConfig+0xd0>
 80033d0:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <UART_SetConfig+0xa0>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	080033f1 	.word	0x080033f1
 80033e4:	08003401 	.word	0x08003401
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ee:	e116      	b.n	800361e <UART_SetConfig+0x2e6>
 80033f0:	2302      	movs	r3, #2
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033f6:	e112      	b.n	800361e <UART_SetConfig+0x2e6>
 80033f8:	2304      	movs	r3, #4
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fe:	e10e      	b.n	800361e <UART_SetConfig+0x2e6>
 8003400:	2308      	movs	r3, #8
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003406:	e10a      	b.n	800361e <UART_SetConfig+0x2e6>
 8003408:	2310      	movs	r3, #16
 800340a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340e:	e106      	b.n	800361e <UART_SetConfig+0x2e6>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7c      	ldr	r2, [pc, #496]	@ (8003608 <UART_SetConfig+0x2d0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d138      	bne.n	800348c <UART_SetConfig+0x154>
 800341a:	4b7a      	ldr	r3, [pc, #488]	@ (8003604 <UART_SetConfig+0x2cc>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d82d      	bhi.n	8003484 <UART_SetConfig+0x14c>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <UART_SetConfig+0xf8>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003465 	.word	0x08003465
 8003434:	08003485 	.word	0x08003485
 8003438:	08003485 	.word	0x08003485
 800343c:	08003485 	.word	0x08003485
 8003440:	08003475 	.word	0x08003475
 8003444:	08003485 	.word	0x08003485
 8003448:	08003485 	.word	0x08003485
 800344c:	08003485 	.word	0x08003485
 8003450:	0800346d 	.word	0x0800346d
 8003454:	08003485 	.word	0x08003485
 8003458:	08003485 	.word	0x08003485
 800345c:	08003485 	.word	0x08003485
 8003460:	0800347d 	.word	0x0800347d
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800346a:	e0d8      	b.n	800361e <UART_SetConfig+0x2e6>
 800346c:	2302      	movs	r3, #2
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003472:	e0d4      	b.n	800361e <UART_SetConfig+0x2e6>
 8003474:	2304      	movs	r3, #4
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800347a:	e0d0      	b.n	800361e <UART_SetConfig+0x2e6>
 800347c:	2308      	movs	r3, #8
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003482:	e0cc      	b.n	800361e <UART_SetConfig+0x2e6>
 8003484:	2310      	movs	r3, #16
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800348a:	e0c8      	b.n	800361e <UART_SetConfig+0x2e6>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5e      	ldr	r2, [pc, #376]	@ (800360c <UART_SetConfig+0x2d4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d125      	bne.n	80034e2 <UART_SetConfig+0x1aa>
 8003496:	4b5b      	ldr	r3, [pc, #364]	@ (8003604 <UART_SetConfig+0x2cc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034a0:	2b30      	cmp	r3, #48	@ 0x30
 80034a2:	d016      	beq.n	80034d2 <UART_SetConfig+0x19a>
 80034a4:	2b30      	cmp	r3, #48	@ 0x30
 80034a6:	d818      	bhi.n	80034da <UART_SetConfig+0x1a2>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d00a      	beq.n	80034c2 <UART_SetConfig+0x18a>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d814      	bhi.n	80034da <UART_SetConfig+0x1a2>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <UART_SetConfig+0x182>
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d008      	beq.n	80034ca <UART_SetConfig+0x192>
 80034b8:	e00f      	b.n	80034da <UART_SetConfig+0x1a2>
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c0:	e0ad      	b.n	800361e <UART_SetConfig+0x2e6>
 80034c2:	2302      	movs	r3, #2
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c8:	e0a9      	b.n	800361e <UART_SetConfig+0x2e6>
 80034ca:	2304      	movs	r3, #4
 80034cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d0:	e0a5      	b.n	800361e <UART_SetConfig+0x2e6>
 80034d2:	2308      	movs	r3, #8
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d8:	e0a1      	b.n	800361e <UART_SetConfig+0x2e6>
 80034da:	2310      	movs	r3, #16
 80034dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e0:	e09d      	b.n	800361e <UART_SetConfig+0x2e6>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003610 <UART_SetConfig+0x2d8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d125      	bne.n	8003538 <UART_SetConfig+0x200>
 80034ec:	4b45      	ldr	r3, [pc, #276]	@ (8003604 <UART_SetConfig+0x2cc>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034f8:	d016      	beq.n	8003528 <UART_SetConfig+0x1f0>
 80034fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80034fc:	d818      	bhi.n	8003530 <UART_SetConfig+0x1f8>
 80034fe:	2b80      	cmp	r3, #128	@ 0x80
 8003500:	d00a      	beq.n	8003518 <UART_SetConfig+0x1e0>
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d814      	bhi.n	8003530 <UART_SetConfig+0x1f8>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0x1d8>
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d008      	beq.n	8003520 <UART_SetConfig+0x1e8>
 800350e:	e00f      	b.n	8003530 <UART_SetConfig+0x1f8>
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e082      	b.n	800361e <UART_SetConfig+0x2e6>
 8003518:	2302      	movs	r3, #2
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351e:	e07e      	b.n	800361e <UART_SetConfig+0x2e6>
 8003520:	2304      	movs	r3, #4
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003526:	e07a      	b.n	800361e <UART_SetConfig+0x2e6>
 8003528:	2308      	movs	r3, #8
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352e:	e076      	b.n	800361e <UART_SetConfig+0x2e6>
 8003530:	2310      	movs	r3, #16
 8003532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003536:	e072      	b.n	800361e <UART_SetConfig+0x2e6>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a35      	ldr	r2, [pc, #212]	@ (8003614 <UART_SetConfig+0x2dc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d12a      	bne.n	8003598 <UART_SetConfig+0x260>
 8003542:	4b30      	ldr	r3, [pc, #192]	@ (8003604 <UART_SetConfig+0x2cc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003548:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003550:	d01a      	beq.n	8003588 <UART_SetConfig+0x250>
 8003552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003556:	d81b      	bhi.n	8003590 <UART_SetConfig+0x258>
 8003558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800355c:	d00c      	beq.n	8003578 <UART_SetConfig+0x240>
 800355e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003562:	d815      	bhi.n	8003590 <UART_SetConfig+0x258>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <UART_SetConfig+0x238>
 8003568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356c:	d008      	beq.n	8003580 <UART_SetConfig+0x248>
 800356e:	e00f      	b.n	8003590 <UART_SetConfig+0x258>
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003576:	e052      	b.n	800361e <UART_SetConfig+0x2e6>
 8003578:	2302      	movs	r3, #2
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357e:	e04e      	b.n	800361e <UART_SetConfig+0x2e6>
 8003580:	2304      	movs	r3, #4
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003586:	e04a      	b.n	800361e <UART_SetConfig+0x2e6>
 8003588:	2308      	movs	r3, #8
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e046      	b.n	800361e <UART_SetConfig+0x2e6>
 8003590:	2310      	movs	r3, #16
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e042      	b.n	800361e <UART_SetConfig+0x2e6>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <UART_SetConfig+0x2c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d13a      	bne.n	8003618 <UART_SetConfig+0x2e0>
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <UART_SetConfig+0x2cc>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035b0:	d01a      	beq.n	80035e8 <UART_SetConfig+0x2b0>
 80035b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035b6:	d81b      	bhi.n	80035f0 <UART_SetConfig+0x2b8>
 80035b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035bc:	d00c      	beq.n	80035d8 <UART_SetConfig+0x2a0>
 80035be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c2:	d815      	bhi.n	80035f0 <UART_SetConfig+0x2b8>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <UART_SetConfig+0x298>
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035cc:	d008      	beq.n	80035e0 <UART_SetConfig+0x2a8>
 80035ce:	e00f      	b.n	80035f0 <UART_SetConfig+0x2b8>
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035d6:	e022      	b.n	800361e <UART_SetConfig+0x2e6>
 80035d8:	2302      	movs	r3, #2
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035de:	e01e      	b.n	800361e <UART_SetConfig+0x2e6>
 80035e0:	2304      	movs	r3, #4
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035e6:	e01a      	b.n	800361e <UART_SetConfig+0x2e6>
 80035e8:	2308      	movs	r3, #8
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ee:	e016      	b.n	800361e <UART_SetConfig+0x2e6>
 80035f0:	2310      	movs	r3, #16
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e012      	b.n	800361e <UART_SetConfig+0x2e6>
 80035f8:	efff69f3 	.word	0xefff69f3
 80035fc:	40008000 	.word	0x40008000
 8003600:	40013800 	.word	0x40013800
 8003604:	40021000 	.word	0x40021000
 8003608:	40004400 	.word	0x40004400
 800360c:	40004800 	.word	0x40004800
 8003610:	40004c00 	.word	0x40004c00
 8003614:	40005000 	.word	0x40005000
 8003618:	2310      	movs	r3, #16
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a9f      	ldr	r2, [pc, #636]	@ (80038a0 <UART_SetConfig+0x568>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d17a      	bne.n	800371e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003628:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800362c:	2b08      	cmp	r3, #8
 800362e:	d824      	bhi.n	800367a <UART_SetConfig+0x342>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <UART_SetConfig+0x300>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800365d 	.word	0x0800365d
 800363c:	0800367b 	.word	0x0800367b
 8003640:	08003665 	.word	0x08003665
 8003644:	0800367b 	.word	0x0800367b
 8003648:	0800366b 	.word	0x0800366b
 800364c:	0800367b 	.word	0x0800367b
 8003650:	0800367b 	.word	0x0800367b
 8003654:	0800367b 	.word	0x0800367b
 8003658:	08003673 	.word	0x08003673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7fe fdc0 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003660:	61f8      	str	r0, [r7, #28]
        break;
 8003662:	e010      	b.n	8003686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b8f      	ldr	r3, [pc, #572]	@ (80038a4 <UART_SetConfig+0x56c>)
 8003666:	61fb      	str	r3, [r7, #28]
        break;
 8003668:	e00d      	b.n	8003686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7fe fd21 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800366e:	61f8      	str	r0, [r7, #28]
        break;
 8003670:	e009      	b.n	8003686 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003676:	61fb      	str	r3, [r7, #28]
        break;
 8003678:	e005      	b.n	8003686 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80fb 	beq.w	8003884 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	429a      	cmp	r2, r3
 800369c:	d305      	bcc.n	80036aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d903      	bls.n	80036b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036b0:	e0e8      	b.n	8003884 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2200      	movs	r2, #0
 80036b6:	461c      	mov	r4, r3
 80036b8:	4615      	mov	r5, r2
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	022b      	lsls	r3, r5, #8
 80036c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036c8:	0222      	lsls	r2, r4, #8
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	6849      	ldr	r1, [r1, #4]
 80036ce:	0849      	lsrs	r1, r1, #1
 80036d0:	2000      	movs	r0, #0
 80036d2:	4688      	mov	r8, r1
 80036d4:	4681      	mov	r9, r0
 80036d6:	eb12 0a08 	adds.w	sl, r2, r8
 80036da:	eb43 0b09 	adc.w	fp, r3, r9
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ec:	4650      	mov	r0, sl
 80036ee:	4659      	mov	r1, fp
 80036f0:	f7fc fd7e 	bl	80001f0 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003702:	d308      	bcc.n	8003716 <UART_SetConfig+0x3de>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370a:	d204      	bcs.n	8003716 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e0b6      	b.n	8003884 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800371c:	e0b2      	b.n	8003884 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003726:	d15e      	bne.n	80037e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800372c:	2b08      	cmp	r3, #8
 800372e:	d828      	bhi.n	8003782 <UART_SetConfig+0x44a>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0x400>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fd40 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8003760:	61f8      	str	r0, [r7, #28]
        break;
 8003762:	e014      	b.n	800378e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7fe fd52 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003768:	61f8      	str	r0, [r7, #28]
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b4d      	ldr	r3, [pc, #308]	@ (80038a4 <UART_SetConfig+0x56c>)
 800376e:	61fb      	str	r3, [r7, #28]
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe fc9d 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8003776:	61f8      	str	r0, [r7, #28]
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800378c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d077      	beq.n	8003884 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005a      	lsls	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d916      	bls.n	80037de <UART_SetConfig+0x4a6>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d212      	bcs.n	80037de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	8afb      	ldrh	r3, [r7, #22]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	8afa      	ldrh	r2, [r7, #22]
 80037da:	60da      	str	r2, [r3, #12]
 80037dc:	e052      	b.n	8003884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037e4:	e04e      	b.n	8003884 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d827      	bhi.n	800383e <UART_SetConfig+0x506>
 80037ee:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <UART_SetConfig+0x4bc>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003819 	.word	0x08003819
 80037f8:	08003821 	.word	0x08003821
 80037fc:	08003829 	.word	0x08003829
 8003800:	0800383f 	.word	0x0800383f
 8003804:	0800382f 	.word	0x0800382f
 8003808:	0800383f 	.word	0x0800383f
 800380c:	0800383f 	.word	0x0800383f
 8003810:	0800383f 	.word	0x0800383f
 8003814:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003818:	f7fe fce2 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 800381c:	61f8      	str	r0, [r7, #28]
        break;
 800381e:	e014      	b.n	800384a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe fcf4 	bl	800220c <HAL_RCC_GetPCLK2Freq>
 8003824:	61f8      	str	r0, [r7, #28]
        break;
 8003826:	e010      	b.n	800384a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b1e      	ldr	r3, [pc, #120]	@ (80038a4 <UART_SetConfig+0x56c>)
 800382a:	61fb      	str	r3, [r7, #28]
        break;
 800382c:	e00d      	b.n	800384a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fc3f 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8003832:	61f8      	str	r0, [r7, #28]
        break;
 8003834:	e009      	b.n	800384a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e005      	b.n	800384a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003848:	bf00      	nop
    }

    if (pclk != 0U)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d019      	beq.n	8003884 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	085a      	lsrs	r2, r3, #1
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d909      	bls.n	800387e <UART_SetConfig+0x546>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d205      	bcs.n	800387e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e002      	b.n	8003884 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003890:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	40008000 	.word	0x40008000
 80038a4:	00f42400 	.word	0x00f42400

080038a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01a      	beq.n	80039be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039a6:	d10a      	bne.n	80039be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b098      	sub	sp, #96	@ 0x60
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039fc:	f7fd f9a0 	bl	8000d40 <HAL_GetTick>
 8003a00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d12e      	bne.n	8003a6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f88c 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d021      	beq.n	8003a6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e062      	b.n	8003b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d149      	bne.n	8003b10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f856 	bl	8003b3c <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03c      	beq.n	8003b10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ae8:	61fa      	str	r2, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e5      	bne.n	8003ac8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e011      	b.n	8003b34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3758      	adds	r7, #88	@ 0x58
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	e04f      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d04b      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fd f8f3 	bl	8000d40 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e04e      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d037      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d034      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d031      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d110      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f838 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e029      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc8:	d111      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f81e 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d0a0      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b095      	sub	sp, #84	@ 0x54
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e5      	bne.n	8003c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d118      	bne.n	8003cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e6      	bne.n	8003c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cd2:	bf00      	nop
 8003cd4:	3754      	adds	r7, #84	@ 0x54
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cde:	b084      	sub	sp, #16
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	f107 001c 	add.w	r0, r7, #28
 8003cec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fa69 	bl	80041d4 <USB_CoreReset>
 8003d02:	4603      	mov	r3, r0
 8003d04:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003d06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d1a:	e005      	b.n	8003d28 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d34:	b004      	add	sp, #16
 8003d36:	4770      	bx	lr

08003d38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 0201 	bic.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d115      	bne.n	8003da8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d88:	200a      	movs	r0, #10
 8003d8a:	f7fc ffe5 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	330a      	adds	r3, #10
 8003d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fa0f 	bl	80041b8 <USB_GetMode>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d01e      	beq.n	8003dde <USB_SetCurrentMode+0x84>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003da4:	d9f0      	bls.n	8003d88 <USB_SetCurrentMode+0x2e>
 8003da6:	e01a      	b.n	8003dde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dba:	200a      	movs	r0, #10
 8003dbc:	f7fc ffcc 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	330a      	adds	r3, #10
 8003dc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9f6 	bl	80041b8 <USB_GetMode>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <USB_SetCurrentMode+0x84>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003dd6:	d9f0      	bls.n	8003dba <USB_SetCurrentMode+0x60>
 8003dd8:	e001      	b.n	8003dde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e005      	b.n	8003dea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2bc8      	cmp	r3, #200	@ 0xc8
 8003de2:	d101      	bne.n	8003de8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e009      	b.n	8003e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3340      	adds	r3, #64	@ 0x40
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3301      	adds	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b0e      	cmp	r3, #14
 8003e2c:	d9f2      	bls.n	8003e14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11c      	bne.n	8003e70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e005      	b.n	8003e7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e82:	461a      	mov	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e88:	2103      	movs	r1, #3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f95a 	bl	8004144 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e90:	2110      	movs	r1, #16
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8f6 	bl	8004084 <USB_FlushTxFifo>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f920 	bl	80040e8 <USB_FlushRxFifo>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	e043      	b.n	8003f64 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ef2:	d118      	bne.n	8003f26 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f06:	461a      	mov	r2, r3
 8003f08:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e013      	b.n	8003f38 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e008      	b.n	8003f38 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f32:	461a      	mov	r2, r3
 8003f34:	2300      	movs	r3, #0
 8003f36:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f44:	461a      	mov	r2, r3
 8003f46:	2300      	movs	r3, #0
 8003f48:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f56:	461a      	mov	r2, r3
 8003f58:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f68:	461a      	mov	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d3b5      	bcc.n	8003edc <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	e043      	b.n	8003ffe <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8c:	d118      	bne.n	8003fc0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e013      	b.n	8003fd2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e008      	b.n	8003fd2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ff6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004002:	461a      	mov	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4293      	cmp	r3, r2
 8004008:	d3b5      	bcc.n	8003f76 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800401c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800402a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f043 0210 	orr.w	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <USB_DevInit+0x28c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004044:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f043 0208 	orr.w	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004058:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800405c:	2b01      	cmp	r3, #1
 800405e:	d107      	bne.n	8004070 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	803c3800 	.word	0x803c3800

08004084 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3301      	adds	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800409e:	d901      	bls.n	80040a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e01b      	b.n	80040dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	daf2      	bge.n	8004092 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	019b      	lsls	r3, r3, #6
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040c8:	d901      	bls.n	80040ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e006      	b.n	80040dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d0f0      	beq.n	80040bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004100:	d901      	bls.n	8004106 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e018      	b.n	8004138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	daf2      	bge.n	80040f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2210      	movs	r2, #16
 8004116:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004124:	d901      	bls.n	800412a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e006      	b.n	8004138 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d0f0      	beq.n	8004118 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004190:	f023 0303 	bic.w	r3, r3, #3
 8004194:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0301 	and.w	r3, r3, #1
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041ec:	d901      	bls.n	80041f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e01b      	b.n	800422a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	daf2      	bge.n	80041e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3301      	adds	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004216:	d901      	bls.n	800421c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e006      	b.n	800422a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d0f0      	beq.n	800420a <USB_CoreReset+0x36>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	4603      	mov	r3, r0
 800423e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004248:	2b84      	cmp	r3, #132	@ 0x84
 800424a:	d005      	beq.n	8004258 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800424c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	3303      	adds	r3, #3
 8004256:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800426a:	f000 fafd 	bl	8004868 <vTaskStartScheduler>
  
  return osOK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}

08004274 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af04      	add	r7, sp, #16
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <osThreadCreate+0x54>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01c      	beq.n	80042c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685c      	ldr	r4, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691e      	ldr	r6, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffc8 	bl	8004236 <makeFreeRtosPriority>
 80042a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b0:	9202      	str	r2, [sp, #8]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9100      	str	r1, [sp, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4632      	mov	r2, r6
 80042ba:	4629      	mov	r1, r5
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 f8ed 	bl	800449c <xTaskCreateStatic>
 80042c2:	4603      	mov	r3, r0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e01c      	b.n	8004302 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685c      	ldr	r4, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ffaa 	bl	8004236 <makeFreeRtosPriority>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	9200      	str	r2, [sp, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4632      	mov	r2, r6
 80042f0:	4629      	mov	r1, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	f000 f932 	bl	800455c <xTaskCreate>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d001      	beq.n	8004302 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800430c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <osDelay+0x16>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	e000      	b.n	8004324 <osDelay+0x18>
 8004322:	2301      	movs	r3, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fa69 	bl	80047fc <vTaskDelay>
  
  return osOK;
 800432a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f103 0208 	add.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 0208 	add.w	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f103 0208 	add.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d103      	bne.n	80043f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e00c      	b.n	8004410 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3308      	adds	r3, #8
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e002      	b.n	8004404 <vListInsert+0x2e>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d2f6      	bcs.n	80043fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
}
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6892      	ldr	r2, [r2, #8]
 800445e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6852      	ldr	r2, [r2, #4]
 8004468:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d103      	bne.n	800447c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	1e5a      	subs	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	@ 0x38
 80044a0:	af04      	add	r7, sp, #16
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	61fb      	str	r3, [r7, #28]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044e6:	23a0      	movs	r3, #160	@ 0xa0
 80044e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80044ee:	d00b      	beq.n	8004508 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	61bb      	str	r3, [r7, #24]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004508:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01e      	beq.n	800454e <xTaskCreateStatic+0xb2>
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	2202      	movs	r2, #2
 8004524:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004528:	2300      	movs	r3, #0
 800452a:	9303      	str	r3, [sp, #12]
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	9302      	str	r3, [sp, #8]
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f851 	bl	80045e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004548:	f000 f8ee 	bl	8004728 <prvAddNewTaskToReadyList>
 800454c:	e001      	b.n	8004552 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004552:	697b      	ldr	r3, [r7, #20]
	}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	@ 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	@ 0x30
 8004560:	af04      	add	r7, sp, #16
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 ff01 	bl	8005378 <pvPortMalloc>
 8004576:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800457e:	20a0      	movs	r0, #160	@ 0xa0
 8004580:	f000 fefa 	bl	8005378 <pvPortMalloc>
 8004584:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
 8004592:	e005      	b.n	80045a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f000 ffbd 	bl	8005514 <vPortFree>
 800459a:	e001      	b.n	80045a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f80f 	bl	80045e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ca:	69f8      	ldr	r0, [r7, #28]
 80045cc:	f000 f8ac 	bl	8004728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045d0:	2301      	movs	r3, #1
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e002      	b.n	80045dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045dc:	69bb      	ldr	r3, [r7, #24]
	}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004600:	3b01      	subs	r3, #1
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	617b      	str	r3, [r7, #20]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01f      	beq.n	8004678 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e012      	b.n	8004664 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	7819      	ldrb	r1, [r3, #0]
 8004646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	3334      	adds	r3, #52	@ 0x34
 800464e:	460a      	mov	r2, r1
 8004650:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3301      	adds	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	d9e9      	bls.n	800463e <prvInitialiseNewTask+0x56>
 800466a:	e000      	b.n	800466e <prvInitialiseNewTask+0x86>
			{
				break;
 800466c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004676:	e003      	b.n	8004680 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	2b06      	cmp	r3, #6
 8004684:	d901      	bls.n	800468a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004686:	2306      	movs	r3, #6
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800468e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	3304      	adds	r3, #4
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fe67 	bl	8004374 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	3318      	adds	r3, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fe62 	bl	8004374 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b8:	f1c3 0207 	rsb	r2, r3, #7
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	334c      	adds	r3, #76	@ 0x4c
 80046da:	224c      	movs	r2, #76	@ 0x4c
 80046dc:	2100      	movs	r1, #0
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f838 	bl	8005754 <memset>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	4a0d      	ldr	r2, [pc, #52]	@ (800471c <prvInitialiseNewTask+0x134>)
 80046e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004720 <prvInitialiseNewTask+0x138>)
 80046ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004724 <prvInitialiseNewTask+0x13c>)
 80046f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	69b8      	ldr	r0, [r7, #24]
 80046fc:	f000 fc2a 	bl	8004f54 <pxPortInitialiseStack>
 8004700:	4602      	mov	r2, r0
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800470c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004712:	bf00      	nop
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200015ec 	.word	0x200015ec
 8004720:	20001654 	.word	0x20001654
 8004724:	200016bc 	.word	0x200016bc

08004728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004730:	f000 fd42 	bl	80051b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004734:	4b2a      	ldr	r3, [pc, #168]	@ (80047e0 <prvAddNewTaskToReadyList+0xb8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3301      	adds	r3, #1
 800473a:	4a29      	ldr	r2, [pc, #164]	@ (80047e0 <prvAddNewTaskToReadyList+0xb8>)
 800473c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800473e:	4b29      	ldr	r3, [pc, #164]	@ (80047e4 <prvAddNewTaskToReadyList+0xbc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004746:	4a27      	ldr	r2, [pc, #156]	@ (80047e4 <prvAddNewTaskToReadyList+0xbc>)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800474c:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <prvAddNewTaskToReadyList+0xb8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d110      	bne.n	8004776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004754:	f000 fad4 	bl	8004d00 <prvInitialiseTaskLists>
 8004758:	e00d      	b.n	8004776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800475a:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <prvAddNewTaskToReadyList+0xc0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <prvAddNewTaskToReadyList+0xbc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	429a      	cmp	r2, r3
 800476e:	d802      	bhi.n	8004776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004770:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <prvAddNewTaskToReadyList+0xbc>)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004776:	4b1d      	ldr	r3, [pc, #116]	@ (80047ec <prvAddNewTaskToReadyList+0xc4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	4a1b      	ldr	r2, [pc, #108]	@ (80047ec <prvAddNewTaskToReadyList+0xc4>)
 800477e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	2201      	movs	r2, #1
 8004786:	409a      	lsls	r2, r3
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <prvAddNewTaskToReadyList+0xc8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4313      	orrs	r3, r2
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <prvAddNewTaskToReadyList+0xc8>)
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <prvAddNewTaskToReadyList+0xcc>)
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7ff fdf0 	bl	800438e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047ae:	f000 fd35 	bl	800521c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <prvAddNewTaskToReadyList+0xc0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ba:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <prvAddNewTaskToReadyList+0xbc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d207      	bcs.n	80047d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <prvAddNewTaskToReadyList+0xd0>)
 80047ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	200009e0 	.word	0x200009e0
 80047e4:	200008e0 	.word	0x200008e0
 80047e8:	200009ec 	.word	0x200009ec
 80047ec:	200009fc 	.word	0x200009fc
 80047f0:	200009e8 	.word	0x200009e8
 80047f4:	200008e4 	.word	0x200008e4
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d018      	beq.n	8004840 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800480e:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <vTaskDelay+0x64>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <vTaskDelay+0x32>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	60bb      	str	r3, [r7, #8]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800482e:	f000 f885 	bl	800493c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004832:	2100      	movs	r1, #0
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fb27 	bl	8004e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800483a:	f000 f88d 	bl	8004958 <xTaskResumeAll>
 800483e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <vTaskDelay+0x68>)
 8004848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000a08 	.word	0x20000a08
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	@ 0x28
 800486c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004876:	463a      	mov	r2, r7
 8004878:	1d39      	adds	r1, r7, #4
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fe4c 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2300      	movs	r3, #0
 8004894:	460a      	mov	r2, r1
 8004896:	4921      	ldr	r1, [pc, #132]	@ (800491c <vTaskStartScheduler+0xb4>)
 8004898:	4821      	ldr	r0, [pc, #132]	@ (8004920 <vTaskStartScheduler+0xb8>)
 800489a:	f7ff fdff 	bl	800449c <xTaskCreateStatic>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <vTaskStartScheduler+0xbc>)
 80048a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004924 <vTaskStartScheduler+0xbc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048ac:	2301      	movs	r3, #1
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e001      	b.n	80048b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d11b      	bne.n	80048f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	613b      	str	r3, [r7, #16]
}
 80048ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048d0:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <vTaskStartScheduler+0xc0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	334c      	adds	r3, #76	@ 0x4c
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <vTaskStartScheduler+0xc4>)
 80048d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048da:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <vTaskStartScheduler+0xc8>)
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295
 80048e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048e2:	4b14      	ldr	r3, [pc, #80]	@ (8004934 <vTaskStartScheduler+0xcc>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <vTaskStartScheduler+0xd0>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048ee:	f000 fbbf 	bl	8005070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048f2:	e00f      	b.n	8004914 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d10b      	bne.n	8004914 <vTaskStartScheduler+0xac>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	60fb      	str	r3, [r7, #12]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <vTaskStartScheduler+0xa8>
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	08005980 	.word	0x08005980
 8004920:	08004cd1 	.word	0x08004cd1
 8004924:	20000a04 	.word	0x20000a04
 8004928:	200008e0 	.word	0x200008e0
 800492c:	20000010 	.word	0x20000010
 8004930:	20000a00 	.word	0x20000a00
 8004934:	200009ec 	.word	0x200009ec
 8004938:	200009e4 	.word	0x200009e4

0800493c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004940:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <vTaskSuspendAll+0x18>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	4a03      	ldr	r2, [pc, #12]	@ (8004954 <vTaskSuspendAll+0x18>)
 8004948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800494a:	bf00      	nop
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	20000a08 	.word	0x20000a08

08004958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004966:	4b42      	ldr	r3, [pc, #264]	@ (8004a70 <xTaskResumeAll+0x118>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <xTaskResumeAll+0x2e>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	603b      	str	r3, [r7, #0]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004986:	f000 fc17 	bl	80051b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800498a:	4b39      	ldr	r3, [pc, #228]	@ (8004a70 <xTaskResumeAll+0x118>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3b01      	subs	r3, #1
 8004990:	4a37      	ldr	r2, [pc, #220]	@ (8004a70 <xTaskResumeAll+0x118>)
 8004992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004994:	4b36      	ldr	r3, [pc, #216]	@ (8004a70 <xTaskResumeAll+0x118>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d161      	bne.n	8004a60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800499c:	4b35      	ldr	r3, [pc, #212]	@ (8004a74 <xTaskResumeAll+0x11c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05d      	beq.n	8004a60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a4:	e02e      	b.n	8004a04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <xTaskResumeAll+0x120>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3318      	adds	r3, #24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fd48 	bl	8004448 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fd43 	bl	8004448 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	2201      	movs	r2, #1
 80049c8:	409a      	lsls	r2, r3
 80049ca:	4b2c      	ldr	r3, [pc, #176]	@ (8004a7c <xTaskResumeAll+0x124>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	4a2a      	ldr	r2, [pc, #168]	@ (8004a7c <xTaskResumeAll+0x124>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <xTaskResumeAll+0x128>)
 80049e2:	441a      	add	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7ff fccf 	bl	800438e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f4:	4b23      	ldr	r3, [pc, #140]	@ (8004a84 <xTaskResumeAll+0x12c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049fe:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <xTaskResumeAll+0x130>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a04:	4b1c      	ldr	r3, [pc, #112]	@ (8004a78 <xTaskResumeAll+0x120>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1cc      	bne.n	80049a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a12:	f000 fa19 	bl	8004e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a16:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <xTaskResumeAll+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a22:	f000 f837 	bl	8004a94 <xTaskIncrementTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	@ (8004a88 <xTaskResumeAll+0x130>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f1      	bne.n	8004a22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a3e:	4b13      	ldr	r3, [pc, #76]	@ (8004a8c <xTaskResumeAll+0x134>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a44:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <xTaskResumeAll+0x130>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a50:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <xTaskResumeAll+0x138>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a60:	f000 fbdc 	bl	800521c <vPortExitCritical>

	return xAlreadyYielded;
 8004a64:	68bb      	ldr	r3, [r7, #8]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000a08 	.word	0x20000a08
 8004a74:	200009e0 	.word	0x200009e0
 8004a78:	200009a0 	.word	0x200009a0
 8004a7c:	200009e8 	.word	0x200009e8
 8004a80:	200008e4 	.word	0x200008e4
 8004a84:	200008e0 	.word	0x200008e0
 8004a88:	200009f4 	.word	0x200009f4
 8004a8c:	200009f0 	.word	0x200009f0
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bdc <xTaskIncrementTick+0x148>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 808f 	bne.w	8004bc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8004be0 <xTaskIncrementTick+0x14c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8004be0 <xTaskIncrementTick+0x14c>)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d121      	bne.n	8004b00 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004abc:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <xTaskIncrementTick+0x150>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <xTaskIncrementTick+0x4a>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	603b      	str	r3, [r7, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xTaskIncrementTick+0x46>
 8004ade:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <xTaskIncrementTick+0x150>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	4b40      	ldr	r3, [pc, #256]	@ (8004be8 <xTaskIncrementTick+0x154>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8004be4 <xTaskIncrementTick+0x150>)
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4a3e      	ldr	r2, [pc, #248]	@ (8004be8 <xTaskIncrementTick+0x154>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bec <xTaskIncrementTick+0x158>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3301      	adds	r3, #1
 8004af8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bec <xTaskIncrementTick+0x158>)
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	f000 f9a4 	bl	8004e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b00:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf0 <xTaskIncrementTick+0x15c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d348      	bcc.n	8004b9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b0a:	4b36      	ldr	r3, [pc, #216]	@ (8004be4 <xTaskIncrementTick+0x150>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b14:	4b36      	ldr	r3, [pc, #216]	@ (8004bf0 <xTaskIncrementTick+0x15c>)
 8004b16:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1a:	601a      	str	r2, [r3, #0]
					break;
 8004b1c:	e03e      	b.n	8004b9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <xTaskIncrementTick+0x150>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d203      	bcs.n	8004b3e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b36:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf0 <xTaskIncrementTick+0x15c>)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b3c:	e02e      	b.n	8004b9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fc80 	bl	8004448 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3318      	adds	r3, #24
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fc77 	bl	8004448 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	4b24      	ldr	r3, [pc, #144]	@ (8004bf4 <xTaskIncrementTick+0x160>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	4a22      	ldr	r2, [pc, #136]	@ (8004bf4 <xTaskIncrementTick+0x160>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf8 <xTaskIncrementTick+0x164>)
 8004b7a:	441a      	add	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7ff fc03 	bl	800438e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <xTaskIncrementTick+0x168>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3b9      	bcc.n	8004b0a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b9a:	e7b6      	b.n	8004b0a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <xTaskIncrementTick+0x168>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	4915      	ldr	r1, [pc, #84]	@ (8004bf8 <xTaskIncrementTick+0x164>)
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d901      	bls.n	8004bb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bb8:	4b11      	ldr	r3, [pc, #68]	@ (8004c00 <xTaskIncrementTick+0x16c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e004      	b.n	8004bd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <xTaskIncrementTick+0x170>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <xTaskIncrementTick+0x170>)
 8004bce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000a08 	.word	0x20000a08
 8004be0:	200009e4 	.word	0x200009e4
 8004be4:	20000998 	.word	0x20000998
 8004be8:	2000099c 	.word	0x2000099c
 8004bec:	200009f8 	.word	0x200009f8
 8004bf0:	20000a00 	.word	0x20000a00
 8004bf4:	200009e8 	.word	0x200009e8
 8004bf8:	200008e4 	.word	0x200008e4
 8004bfc:	200008e0 	.word	0x200008e0
 8004c00:	200009f4 	.word	0x200009f4
 8004c04:	200009f0 	.word	0x200009f0

08004c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb8 <vTaskSwitchContext+0xb0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c16:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <vTaskSwitchContext+0xb4>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c1c:	e045      	b.n	8004caa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004c1e:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <vTaskSwitchContext+0xb4>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c24:	4b26      	ldr	r3, [pc, #152]	@ (8004cc0 <vTaskSwitchContext+0xb8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	fab3 f383 	clz	r3, r3
 8004c30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	f1c3 031f 	rsb	r3, r3, #31
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	4922      	ldr	r1, [pc, #136]	@ (8004cc4 <vTaskSwitchContext+0xbc>)
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	607b      	str	r3, [r7, #4]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <vTaskSwitchContext+0x5a>
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a14      	ldr	r2, [pc, #80]	@ (8004cc4 <vTaskSwitchContext+0xbc>)
 8004c72:	4413      	add	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3308      	adds	r3, #8
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d104      	bne.n	8004c96 <vTaskSwitchContext+0x8e>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <vTaskSwitchContext+0xc0>)
 8004c9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ca0:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <vTaskSwitchContext+0xc0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	334c      	adds	r3, #76	@ 0x4c
 8004ca6:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <vTaskSwitchContext+0xc4>)
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000a08 	.word	0x20000a08
 8004cbc:	200009f4 	.word	0x200009f4
 8004cc0:	200009e8 	.word	0x200009e8
 8004cc4:	200008e4 	.word	0x200008e4
 8004cc8:	200008e0 	.word	0x200008e0
 8004ccc:	20000010 	.word	0x20000010

08004cd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cd8:	f000 f852 	bl	8004d80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cdc:	4b06      	ldr	r3, [pc, #24]	@ (8004cf8 <prvIdleTask+0x28>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d9f9      	bls.n	8004cd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ce4:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <prvIdleTask+0x2c>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cf4:	e7f0      	b.n	8004cd8 <prvIdleTask+0x8>
 8004cf6:	bf00      	nop
 8004cf8:	200008e4 	.word	0x200008e4
 8004cfc:	e000ed04 	.word	0xe000ed04

08004d00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e00c      	b.n	8004d26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <prvInitialiseTaskLists+0x60>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fb0a 	bl	8004334 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3301      	adds	r3, #1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d9ef      	bls.n	8004d0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d2c:	480d      	ldr	r0, [pc, #52]	@ (8004d64 <prvInitialiseTaskLists+0x64>)
 8004d2e:	f7ff fb01 	bl	8004334 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d32:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <prvInitialiseTaskLists+0x68>)
 8004d34:	f7ff fafe 	bl	8004334 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d38:	480c      	ldr	r0, [pc, #48]	@ (8004d6c <prvInitialiseTaskLists+0x6c>)
 8004d3a:	f7ff fafb 	bl	8004334 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d3e:	480c      	ldr	r0, [pc, #48]	@ (8004d70 <prvInitialiseTaskLists+0x70>)
 8004d40:	f7ff faf8 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d44:	480b      	ldr	r0, [pc, #44]	@ (8004d74 <prvInitialiseTaskLists+0x74>)
 8004d46:	f7ff faf5 	bl	8004334 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <prvInitialiseTaskLists+0x78>)
 8004d4c:	4a05      	ldr	r2, [pc, #20]	@ (8004d64 <prvInitialiseTaskLists+0x64>)
 8004d4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d50:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <prvInitialiseTaskLists+0x7c>)
 8004d52:	4a05      	ldr	r2, [pc, #20]	@ (8004d68 <prvInitialiseTaskLists+0x68>)
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	200008e4 	.word	0x200008e4
 8004d64:	20000970 	.word	0x20000970
 8004d68:	20000984 	.word	0x20000984
 8004d6c:	200009a0 	.word	0x200009a0
 8004d70:	200009b4 	.word	0x200009b4
 8004d74:	200009cc 	.word	0x200009cc
 8004d78:	20000998 	.word	0x20000998
 8004d7c:	2000099c 	.word	0x2000099c

08004d80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d86:	e019      	b.n	8004dbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d88:	f000 fa16 	bl	80051b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d8c:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <prvCheckTasksWaitingTermination+0x50>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fb55 	bl	8004448 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd4 <prvCheckTasksWaitingTermination+0x54>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <prvCheckTasksWaitingTermination+0x54>)
 8004da6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004db0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004db2:	f000 fa33 	bl	800521c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f810 	bl	8004ddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <prvCheckTasksWaitingTermination+0x58>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e1      	bne.n	8004d88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200009b4 	.word	0x200009b4
 8004dd4:	200009e0 	.word	0x200009e0
 8004dd8:	200009c8 	.word	0x200009c8

08004ddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	334c      	adds	r3, #76	@ 0x4c
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fcbb 	bl	8005764 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d108      	bne.n	8004e0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fb89 	bl	8005514 <vPortFree>
				vPortFree( pxTCB );
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fb86 	bl	8005514 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e08:	e019      	b.n	8004e3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d103      	bne.n	8004e1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fb7d 	bl	8005514 <vPortFree>
	}
 8004e1a:	e010      	b.n	8004e3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d00b      	beq.n	8004e3e <prvDeleteTCB+0x62>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <prvDeleteTCB+0x5e>
	}
 8004e3e:	bf00      	nop
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e60:	e008      	b.n	8004e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e62:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	20000998 	.word	0x20000998
 8004e84:	20000a00 	.word	0x20000a00

08004e88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e92:	4b29      	ldr	r3, [pc, #164]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e98:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fad2 	bl	8004448 <uxListRemove>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004eaa:	4b24      	ldr	r3, [pc, #144]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	4b21      	ldr	r3, [pc, #132]	@ (8004f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ec0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d10a      	bne.n	8004ee0 <prvAddCurrentTaskToDelayedList+0x58>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	481a      	ldr	r0, [pc, #104]	@ (8004f44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004eda:	f7ff fa58 	bl	800438e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ede:	e026      	b.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ee8:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d209      	bcs.n	8004f0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef8:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f7ff fa66 	bl	80043d6 <vListInsert>
}
 8004f0a:	e010      	b.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7ff fa5c 	bl	80043d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d202      	bcs.n	8004f2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6013      	str	r3, [r2, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	200009e4 	.word	0x200009e4
 8004f3c:	200008e0 	.word	0x200008e0
 8004f40:	200009e8 	.word	0x200009e8
 8004f44:	200009cc 	.word	0x200009cc
 8004f48:	2000099c 	.word	0x2000099c
 8004f4c:	20000998 	.word	0x20000998
 8004f50:	20000a00 	.word	0x20000a00

08004f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b04      	subs	r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f84:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb8 <pxPortInitialiseStack+0x64>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b14      	subs	r3, #20
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f06f 0202 	mvn.w	r2, #2
 8004fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b20      	subs	r3, #32
 8004fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	08004fbd 	.word	0x08004fbd

08004fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fc6:	4b13      	ldr	r3, [pc, #76]	@ (8005014 <prvTaskExitError+0x58>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d00b      	beq.n	8004fe8 <prvTaskExitError+0x2c>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <prvTaskExitError+0x28>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60bb      	str	r3, [r7, #8]
}
 8004ffa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ffc:	bf00      	nop
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0fc      	beq.n	8004ffe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
	...

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	@ (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	4770      	bx	lr
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst2>:
 8005040:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005048:	4808      	ldr	r0, [pc, #32]	@ (800506c <prvPortStartFirstTask+0x24>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f380 8814 	msr	CONTROL, r0
 800505a:	b662      	cpsie	i
 800505c:	b661      	cpsie	f
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	df00      	svc	0
 8005068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800506a:	bf00      	nop
 800506c:	e000ed08 	.word	0xe000ed08

08005070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005076:	4b47      	ldr	r3, [pc, #284]	@ (8005194 <xPortStartScheduler+0x124>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a47      	ldr	r2, [pc, #284]	@ (8005198 <xPortStartScheduler+0x128>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d10b      	bne.n	8005098 <xPortStartScheduler+0x28>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005098:	4b3e      	ldr	r3, [pc, #248]	@ (8005194 <xPortStartScheduler+0x124>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <xPortStartScheduler+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10b      	bne.n	80050ba <xPortStartScheduler+0x4a>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	613b      	str	r3, [r7, #16]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ba:	4b39      	ldr	r3, [pc, #228]	@ (80051a0 <xPortStartScheduler+0x130>)
 80050bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	22ff      	movs	r2, #255	@ 0xff
 80050ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b31      	ldr	r3, [pc, #196]	@ (80051a4 <xPortStartScheduler+0x134>)
 80050e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050e2:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050e4:	2207      	movs	r2, #7
 80050e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050e8:	e009      	b.n	80050fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050ea:	4b2f      	ldr	r3, [pc, #188]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <xPortStartScheduler+0x138>)
 80050f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b80      	cmp	r3, #128	@ 0x80
 8005108:	d0ef      	beq.n	80050ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <xPortStartScheduler+0x138>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	d00b      	beq.n	800512e <xPortStartScheduler+0xbe>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60bb      	str	r3, [r7, #8]
}
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	e7fd      	b.n	800512a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800512e:	4b1e      	ldr	r3, [pc, #120]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4a1c      	ldr	r2, [pc, #112]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005136:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005138:	4b1b      	ldr	r3, [pc, #108]	@ (80051a8 <xPortStartScheduler+0x138>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <xPortStartScheduler+0x138>)
 8005142:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <xPortStartScheduler+0x13c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <xPortStartScheduler+0x13c>)
 8005152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005156:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005158:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <xPortStartScheduler+0x13c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <xPortStartScheduler+0x13c>)
 800515e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005162:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005164:	f000 f8da 	bl	800531c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005168:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <xPortStartScheduler+0x140>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800516e:	f000 f8f9 	bl	8005364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <xPortStartScheduler+0x144>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0f      	ldr	r2, [pc, #60]	@ (80051b4 <xPortStartScheduler+0x144>)
 8005178:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800517c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800517e:	f7ff ff63 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005182:	f7ff fd41 	bl	8004c08 <vTaskSwitchContext>
	prvTaskExitError();
 8005186:	f7ff ff19 	bl	8004fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	e000ed00 	.word	0xe000ed00
 8005198:	410fc271 	.word	0x410fc271
 800519c:	410fc270 	.word	0x410fc270
 80051a0:	e000e400 	.word	0xe000e400
 80051a4:	20000a0c 	.word	0x20000a0c
 80051a8:	20000a10 	.word	0x20000a10
 80051ac:	e000ed20 	.word	0xe000ed20
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	e000ef34 	.word	0xe000ef34

080051b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <vPortEnterCritical+0x5c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d110      	bne.n	8005206 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <vPortEnterCritical+0x60>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <vPortEnterCritical+0x4a>
	}
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005222:	4b12      	ldr	r3, [pc, #72]	@ (800526c <vPortExitCritical+0x50>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <vPortExitCritical+0x26>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	607b      	str	r3, [r7, #4]
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	e7fd      	b.n	800523e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005242:	4b0a      	ldr	r3, [pc, #40]	@ (800526c <vPortExitCritical+0x50>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3b01      	subs	r3, #1
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <vPortExitCritical+0x50>)
 800524a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800524c:	4b07      	ldr	r3, [pc, #28]	@ (800526c <vPortExitCritical+0x50>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <vPortExitCritical+0x44>
 8005254:	2300      	movs	r3, #0
 8005256:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800525e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	2000000c 	.word	0x2000000c

08005270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005270:	f3ef 8009 	mrs	r0, PSP
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	4b15      	ldr	r3, [pc, #84]	@ (80052d0 <pxCurrentTCBConst>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f01e 0f10 	tst.w	lr, #16
 8005280:	bf08      	it	eq
 8005282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528a:	6010      	str	r0, [r2, #0]
 800528c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005294:	f380 8811 	msr	BASEPRI, r0
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f7ff fcb2 	bl	8004c08 <vTaskSwitchContext>
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f380 8811 	msr	BASEPRI, r0
 80052ac:	bc09      	pop	{r0, r3}
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	6808      	ldr	r0, [r1, #0]
 80052b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b6:	f01e 0f10 	tst.w	lr, #16
 80052ba:	bf08      	it	eq
 80052bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052c0:	f380 8809 	msr	PSP, r0
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	f3af 8000 	nop.w

080052d0 <pxCurrentTCBConst>:
 80052d0:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop

080052d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052f2:	f7ff fbcf 	bl	8004a94 <xTaskIncrementTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052fc:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <SysTick_Handler+0x40>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f383 8811 	msr	BASEPRI, r3
}
 800530e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005326:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <vPortSetupTimerInterrupt+0x38>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <vPortSetupTimerInterrupt+0x3c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	@ (800535c <vPortSetupTimerInterrupt+0x40>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <vPortSetupTimerInterrupt+0x44>)
 800533a:	3b01      	subs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800533e:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <vPortSetupTimerInterrupt+0x34>)
 8005340:	2207      	movs	r2, #7
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e010 	.word	0xe000e010
 8005354:	e000e018 	.word	0xe000e018
 8005358:	20000000 	.word	0x20000000
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	e000e014 	.word	0xe000e014

08005364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005364:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005374 <vPortEnableVFP+0x10>
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800536e:	6001      	str	r1, [r0, #0]
 8005370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005372:	bf00      	nop
 8005374:	e000ed88 	.word	0xe000ed88

08005378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	@ 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005384:	f7ff fada 	bl	800493c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005388:	4b5c      	ldr	r3, [pc, #368]	@ (80054fc <pvPortMalloc+0x184>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005390:	f000 f924 	bl	80055dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005394:	4b5a      	ldr	r3, [pc, #360]	@ (8005500 <pvPortMalloc+0x188>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8095 	bne.w	80054cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01e      	beq.n	80053e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053a8:	2208      	movs	r2, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d015      	beq.n	80053e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	3308      	adds	r3, #8
 80053c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <pvPortMalloc+0x6e>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	617b      	str	r3, [r7, #20]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d06f      	beq.n	80054cc <pvPortMalloc+0x154>
 80053ec:	4b45      	ldr	r3, [pc, #276]	@ (8005504 <pvPortMalloc+0x18c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d86a      	bhi.n	80054cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053f6:	4b44      	ldr	r3, [pc, #272]	@ (8005508 <pvPortMalloc+0x190>)
 80053f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053fa:	4b43      	ldr	r3, [pc, #268]	@ (8005508 <pvPortMalloc+0x190>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005400:	e004      	b.n	800540c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d903      	bls.n	800541e <pvPortMalloc+0xa6>
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f1      	bne.n	8005402 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800541e:	4b37      	ldr	r3, [pc, #220]	@ (80054fc <pvPortMalloc+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005424:	429a      	cmp	r2, r3
 8005426:	d051      	beq.n	80054cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	4413      	add	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	1ad2      	subs	r2, r2, r3
 8005442:	2308      	movs	r3, #8
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	429a      	cmp	r2, r3
 8005448:	d920      	bls.n	800548c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800544a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <pvPortMalloc+0xfc>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	613b      	str	r3, [r7, #16]
}
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005486:	69b8      	ldr	r0, [r7, #24]
 8005488:	f000 f90a 	bl	80056a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800548c:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <pvPortMalloc+0x18c>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	4a1b      	ldr	r2, [pc, #108]	@ (8005504 <pvPortMalloc+0x18c>)
 8005498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800549a:	4b1a      	ldr	r3, [pc, #104]	@ (8005504 <pvPortMalloc+0x18c>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b1b      	ldr	r3, [pc, #108]	@ (800550c <pvPortMalloc+0x194>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d203      	bcs.n	80054ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a6:	4b17      	ldr	r3, [pc, #92]	@ (8005504 <pvPortMalloc+0x18c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <pvPortMalloc+0x194>)
 80054ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4b13      	ldr	r3, [pc, #76]	@ (8005500 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054c2:	4b13      	ldr	r3, [pc, #76]	@ (8005510 <pvPortMalloc+0x198>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <pvPortMalloc+0x198>)
 80054ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054cc:	f7ff fa44 	bl	8004958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <pvPortMalloc+0x17a>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60fb      	str	r3, [r7, #12]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <pvPortMalloc+0x176>
	return pvReturn;
 80054f2:	69fb      	ldr	r3, [r7, #28]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3728      	adds	r7, #40	@ 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200015d4 	.word	0x200015d4
 8005500:	200015e8 	.word	0x200015e8
 8005504:	200015d8 	.word	0x200015d8
 8005508:	200015cc 	.word	0x200015cc
 800550c:	200015dc 	.word	0x200015dc
 8005510:	200015e0 	.word	0x200015e0

08005514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d04f      	beq.n	80055c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005526:	2308      	movs	r3, #8
 8005528:	425b      	negs	r3, r3
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4413      	add	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <vPortFree+0xbc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4013      	ands	r3, r2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <vPortFree+0x46>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	60fb      	str	r3, [r7, #12]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00b      	beq.n	800557a <vPortFree+0x66>
	__asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	60bb      	str	r3, [r7, #8]
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	e7fd      	b.n	8005576 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4b14      	ldr	r3, [pc, #80]	@ (80055d0 <vPortFree+0xbc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01e      	beq.n	80055c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11a      	bne.n	80055c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	4b0e      	ldr	r3, [pc, #56]	@ (80055d0 <vPortFree+0xbc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a0:	f7ff f9cc 	bl	800493c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <vPortFree+0xc0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <vPortFree+0xc0>)
 80055b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f000 f874 	bl	80056a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055b8:	4b07      	ldr	r3, [pc, #28]	@ (80055d8 <vPortFree+0xc4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a06      	ldr	r2, [pc, #24]	@ (80055d8 <vPortFree+0xc4>)
 80055c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055c2:	f7ff f9c9 	bl	8004958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200015e8 	.word	0x200015e8
 80055d4:	200015d8 	.word	0x200015d8
 80055d8:	200015e4 	.word	0x200015e4

080055dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80055e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055e8:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <prvHeapInit+0xac>)
 80055ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3307      	adds	r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a1f      	ldr	r2, [pc, #124]	@ (8005688 <prvHeapInit+0xac>)
 800560c:	4413      	add	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005614:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <prvHeapInit+0xb0>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800561a:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <prvHeapInit+0xb0>)
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005628:	2208      	movs	r2, #8
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <prvHeapInit+0xb4>)
 800563c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800563e:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <prvHeapInit+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800565c:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <prvHeapInit+0xb4>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <prvHeapInit+0xb8>)
 800566a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a09      	ldr	r2, [pc, #36]	@ (8005698 <prvHeapInit+0xbc>)
 8005672:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005674:	4b09      	ldr	r3, [pc, #36]	@ (800569c <prvHeapInit+0xc0>)
 8005676:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000a14 	.word	0x20000a14
 800568c:	200015cc 	.word	0x200015cc
 8005690:	200015d4 	.word	0x200015d4
 8005694:	200015dc 	.word	0x200015dc
 8005698:	200015d8 	.word	0x200015d8
 800569c:	200015e8 	.word	0x200015e8

080056a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056a8:	4b28      	ldr	r3, [pc, #160]	@ (800574c <prvInsertBlockIntoFreeList+0xac>)
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e002      	b.n	80056b4 <prvInsertBlockIntoFreeList+0x14>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d8f7      	bhi.n	80056ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d108      	bne.n	80056e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	441a      	add	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d118      	bne.n	8005728 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b15      	ldr	r3, [pc, #84]	@ (8005750 <prvInsertBlockIntoFreeList+0xb0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d00d      	beq.n	800571e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e008      	b.n	8005730 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <prvInsertBlockIntoFreeList+0xb0>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e003      	b.n	8005730 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d002      	beq.n	800573e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	200015cc 	.word	0x200015cc
 8005750:	200015d4 	.word	0x200015d4

08005754 <memset>:
 8005754:	4402      	add	r2, r0
 8005756:	4603      	mov	r3, r0
 8005758:	4293      	cmp	r3, r2
 800575a:	d100      	bne.n	800575e <memset+0xa>
 800575c:	4770      	bx	lr
 800575e:	f803 1b01 	strb.w	r1, [r3], #1
 8005762:	e7f9      	b.n	8005758 <memset+0x4>

08005764 <_reclaim_reent>:
 8005764:	4b2d      	ldr	r3, [pc, #180]	@ (800581c <_reclaim_reent+0xb8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4283      	cmp	r3, r0
 800576a:	b570      	push	{r4, r5, r6, lr}
 800576c:	4604      	mov	r4, r0
 800576e:	d053      	beq.n	8005818 <_reclaim_reent+0xb4>
 8005770:	69c3      	ldr	r3, [r0, #28]
 8005772:	b31b      	cbz	r3, 80057bc <_reclaim_reent+0x58>
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	b163      	cbz	r3, 8005792 <_reclaim_reent+0x2e>
 8005778:	2500      	movs	r5, #0
 800577a:	69e3      	ldr	r3, [r4, #28]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	5959      	ldr	r1, [r3, r5]
 8005780:	b9b1      	cbnz	r1, 80057b0 <_reclaim_reent+0x4c>
 8005782:	3504      	adds	r5, #4
 8005784:	2d80      	cmp	r5, #128	@ 0x80
 8005786:	d1f8      	bne.n	800577a <_reclaim_reent+0x16>
 8005788:	69e3      	ldr	r3, [r4, #28]
 800578a:	4620      	mov	r0, r4
 800578c:	68d9      	ldr	r1, [r3, #12]
 800578e:	f000 f86d 	bl	800586c <_free_r>
 8005792:	69e3      	ldr	r3, [r4, #28]
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	b111      	cbz	r1, 800579e <_reclaim_reent+0x3a>
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f867 	bl	800586c <_free_r>
 800579e:	69e3      	ldr	r3, [r4, #28]
 80057a0:	689d      	ldr	r5, [r3, #8]
 80057a2:	b15d      	cbz	r5, 80057bc <_reclaim_reent+0x58>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4620      	mov	r0, r4
 80057a8:	682d      	ldr	r5, [r5, #0]
 80057aa:	f000 f85f 	bl	800586c <_free_r>
 80057ae:	e7f8      	b.n	80057a2 <_reclaim_reent+0x3e>
 80057b0:	680e      	ldr	r6, [r1, #0]
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f85a 	bl	800586c <_free_r>
 80057b8:	4631      	mov	r1, r6
 80057ba:	e7e1      	b.n	8005780 <_reclaim_reent+0x1c>
 80057bc:	6961      	ldr	r1, [r4, #20]
 80057be:	b111      	cbz	r1, 80057c6 <_reclaim_reent+0x62>
 80057c0:	4620      	mov	r0, r4
 80057c2:	f000 f853 	bl	800586c <_free_r>
 80057c6:	69e1      	ldr	r1, [r4, #28]
 80057c8:	b111      	cbz	r1, 80057d0 <_reclaim_reent+0x6c>
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 f84e 	bl	800586c <_free_r>
 80057d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057d2:	b111      	cbz	r1, 80057da <_reclaim_reent+0x76>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f849 	bl	800586c <_free_r>
 80057da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057dc:	b111      	cbz	r1, 80057e4 <_reclaim_reent+0x80>
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 f844 	bl	800586c <_free_r>
 80057e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057e6:	b111      	cbz	r1, 80057ee <_reclaim_reent+0x8a>
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 f83f 	bl	800586c <_free_r>
 80057ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057f0:	b111      	cbz	r1, 80057f8 <_reclaim_reent+0x94>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f83a 	bl	800586c <_free_r>
 80057f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80057fa:	b111      	cbz	r1, 8005802 <_reclaim_reent+0x9e>
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 f835 	bl	800586c <_free_r>
 8005802:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005804:	b111      	cbz	r1, 800580c <_reclaim_reent+0xa8>
 8005806:	4620      	mov	r0, r4
 8005808:	f000 f830 	bl	800586c <_free_r>
 800580c:	6a23      	ldr	r3, [r4, #32]
 800580e:	b11b      	cbz	r3, 8005818 <_reclaim_reent+0xb4>
 8005810:	4620      	mov	r0, r4
 8005812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005816:	4718      	bx	r3
 8005818:	bd70      	pop	{r4, r5, r6, pc}
 800581a:	bf00      	nop
 800581c:	20000010 	.word	0x20000010

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4d0d      	ldr	r5, [pc, #52]	@ (8005858 <__libc_init_array+0x38>)
 8005824:	4c0d      	ldr	r4, [pc, #52]	@ (800585c <__libc_init_array+0x3c>)
 8005826:	1b64      	subs	r4, r4, r5
 8005828:	10a4      	asrs	r4, r4, #2
 800582a:	2600      	movs	r6, #0
 800582c:	42a6      	cmp	r6, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	4d0b      	ldr	r5, [pc, #44]	@ (8005860 <__libc_init_array+0x40>)
 8005832:	4c0c      	ldr	r4, [pc, #48]	@ (8005864 <__libc_init_array+0x44>)
 8005834:	f000 f870 	bl	8005918 <_init>
 8005838:	1b64      	subs	r4, r4, r5
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	2600      	movs	r6, #0
 800583e:	42a6      	cmp	r6, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f855 3b04 	ldr.w	r3, [r5], #4
 8005848:	4798      	blx	r3
 800584a:	3601      	adds	r6, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005852:	4798      	blx	r3
 8005854:	3601      	adds	r6, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	080059d8 	.word	0x080059d8
 800585c:	080059d8 	.word	0x080059d8
 8005860:	080059d8 	.word	0x080059d8
 8005864:	080059dc 	.word	0x080059dc

08005868 <__retarget_lock_acquire_recursive>:
 8005868:	4770      	bx	lr

0800586a <__retarget_lock_release_recursive>:
 800586a:	4770      	bx	lr

0800586c <_free_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4605      	mov	r5, r0
 8005870:	2900      	cmp	r1, #0
 8005872:	d041      	beq.n	80058f8 <_free_r+0x8c>
 8005874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005878:	1f0c      	subs	r4, r1, #4
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfb8      	it	lt
 800587e:	18e4      	addlt	r4, r4, r3
 8005880:	f000 f83e 	bl	8005900 <__malloc_lock>
 8005884:	4a1d      	ldr	r2, [pc, #116]	@ (80058fc <_free_r+0x90>)
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	b933      	cbnz	r3, 8005898 <_free_r+0x2c>
 800588a:	6063      	str	r3, [r4, #4]
 800588c:	6014      	str	r4, [r2, #0]
 800588e:	4628      	mov	r0, r5
 8005890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005894:	f000 b83a 	b.w	800590c <__malloc_unlock>
 8005898:	42a3      	cmp	r3, r4
 800589a:	d908      	bls.n	80058ae <_free_r+0x42>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	1821      	adds	r1, r4, r0
 80058a0:	428b      	cmp	r3, r1
 80058a2:	bf01      	itttt	eq
 80058a4:	6819      	ldreq	r1, [r3, #0]
 80058a6:	685b      	ldreq	r3, [r3, #4]
 80058a8:	1809      	addeq	r1, r1, r0
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	e7ed      	b.n	800588a <_free_r+0x1e>
 80058ae:	461a      	mov	r2, r3
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b10b      	cbz	r3, 80058b8 <_free_r+0x4c>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d9fa      	bls.n	80058ae <_free_r+0x42>
 80058b8:	6811      	ldr	r1, [r2, #0]
 80058ba:	1850      	adds	r0, r2, r1
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d10b      	bne.n	80058d8 <_free_r+0x6c>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	4401      	add	r1, r0
 80058c4:	1850      	adds	r0, r2, r1
 80058c6:	4283      	cmp	r3, r0
 80058c8:	6011      	str	r1, [r2, #0]
 80058ca:	d1e0      	bne.n	800588e <_free_r+0x22>
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	6053      	str	r3, [r2, #4]
 80058d2:	4408      	add	r0, r1
 80058d4:	6010      	str	r0, [r2, #0]
 80058d6:	e7da      	b.n	800588e <_free_r+0x22>
 80058d8:	d902      	bls.n	80058e0 <_free_r+0x74>
 80058da:	230c      	movs	r3, #12
 80058dc:	602b      	str	r3, [r5, #0]
 80058de:	e7d6      	b.n	800588e <_free_r+0x22>
 80058e0:	6820      	ldr	r0, [r4, #0]
 80058e2:	1821      	adds	r1, r4, r0
 80058e4:	428b      	cmp	r3, r1
 80058e6:	bf04      	itt	eq
 80058e8:	6819      	ldreq	r1, [r3, #0]
 80058ea:	685b      	ldreq	r3, [r3, #4]
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	bf04      	itt	eq
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	6054      	str	r4, [r2, #4]
 80058f6:	e7ca      	b.n	800588e <_free_r+0x22>
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	bf00      	nop
 80058fc:	20001728 	.word	0x20001728

08005900 <__malloc_lock>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__malloc_lock+0x8>)
 8005902:	f7ff bfb1 	b.w	8005868 <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	20001724 	.word	0x20001724

0800590c <__malloc_unlock>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__malloc_unlock+0x8>)
 800590e:	f7ff bfac 	b.w	800586a <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	20001724 	.word	0x20001724

08005918 <_init>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr

08005924 <_fini>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	bf00      	nop
 8005928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592a:	bc08      	pop	{r3}
 800592c:	469e      	mov	lr, r3
 800592e:	4770      	bx	lr
