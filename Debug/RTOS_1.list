
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c40  08006c40  00007c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c48  08006c48  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006c50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016e4  2000006c  08006cbc  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  08006cbc  00008750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbee  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5f  00000000  00000000  00023c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000278f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129a  00000000  00000000  00029100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1a5  00000000  00000000  0002a39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b26e  00000000  00000000  0005753f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fc7d  00000000  00000000  000727ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018242a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c84  00000000  00000000  00182470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001890f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a9c 	.word	0x08006a9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006a9c 	.word	0x08006a9c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000088 	.word	0x20000088
 80005ec:	20000128 	.word	0x20000128

080005f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b00      	cmp	r3, #0
 8000606:	d013      	beq.n	8000630 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000610:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00b      	beq.n	8000630 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000618:	e000      	b.n	800061c <ITM_SendChar+0x2c>
    {
      __NOP();
 800061a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800061c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f9      	beq.n	800061a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000626:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <_write>:
#include"string.h"


#define ITM_PORT 0
uint8_t indix=0;
int _write(int file, char *ptr, int len) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
        ITM_SendChar(ptr[i]);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffc9 	bl	80005f0 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
    }
    return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b096      	sub	sp, #88	@ 0x58
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fcb0 	bl	8000fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f857 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f913 	bl	80008b0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800068a:	f000 f8b7 	bl	80007fc <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800068e:	f000 f8e1 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf("[%lu ms] Hello, world!\r\n", HAL_GetTick());
 8000692:	f000 fcd3 	bl	800103c <HAL_GetTick>
 8000696:	4603      	mov	r3, r0
 8000698:	4619      	mov	r1, r3
 800069a:	481f      	ldr	r0, [pc, #124]	@ (8000718 <main+0xa0>)
 800069c:	f005 fb34 	bl	8005d08 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <main+0xa4>)
 80006a2:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 ff58 	bl	8004570 <osThreadCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a17      	ldr	r2, [pc, #92]	@ (8000720 <main+0xa8>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task02_init, osPriorityNormal, 0, 128);
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <main+0xac>)
 80006c8:	f107 0420 	add.w	r4, r7, #32
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 ff45 	bl	8004570 <osThreadCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <main+0xb0>)
 80006ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(myTask03, Task03_init, osPriorityAboveNormal, 0, 128);
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <main+0xb4>)
 80006ee:	1d3c      	adds	r4, r7, #4
 80006f0:	461d      	mov	r5, r3
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 ff34 	bl	8004570 <osThreadCreate>
 8000708:	4603      	mov	r3, r0
 800070a:	4a09      	ldr	r2, [pc, #36]	@ (8000730 <main+0xb8>)
 800070c:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800070e:	f003 ff28 	bl	8004562 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <main+0x9a>
 8000716:	bf00      	nop
 8000718:	08006ab4 	.word	0x08006ab4
 800071c:	08006adc 	.word	0x08006adc
 8000720:	20000898 	.word	0x20000898
 8000724:	08006b04 	.word	0x08006b04
 8000728:	2000089c 	.word	0x2000089c
 800072c:	08006b2c 	.word	0x08006b2c
 8000730:	200008a0 	.word	0x200008a0

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	@ 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2244      	movs	r2, #68	@ 0x44
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fb35 	bl	8005db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000756:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800075a:	f001 f897 	bl	800188c <HAL_PWREx_ControlVoltageScaling>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000764:	f000 f9bc 	bl	8000ae0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000768:	f001 f872 	bl	8001850 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <SystemClock_Config+0xc4>)
 800076e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000772:	4a21      	ldr	r2, [pc, #132]	@ (80007f8 <SystemClock_Config+0xc4>)
 8000774:	f023 0318 	bic.w	r3, r3, #24
 8000778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800077c:	2314      	movs	r3, #20
 800077e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800078c:	2360      	movs	r3, #96	@ 0x60
 800078e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000794:	2301      	movs	r3, #1
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800079c:	2328      	movs	r3, #40	@ 0x28
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f8e1 	bl	8001978 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007bc:	f000 f990 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2104      	movs	r1, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fce6 	bl	80021ac <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e6:	f000 f97b 	bl	8000ae0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ea:	f002 fa31 	bl	8002c50 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ee:	bf00      	nop
 80007f0:	3758      	adds	r7, #88	@ 0x58
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_LPUART1_UART_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800083a:	f002 fead 	bl	8003598 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 f94c 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000032c 	.word	0x2000032c
 8000850:	40008000 	.word	0x40008000

08000854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800085e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2206      	movs	r2, #6
 8000864:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2202      	movs	r2, #2
 8000870:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2201      	movs	r2, #1
 8000876:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2201      	movs	r2, #1
 8000888:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2201      	movs	r2, #1
 8000894:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	f000 fea6 	bl	80015e8 <HAL_PCD_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f91d 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200003b4 	.word	0x200003b4

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a47      	ldr	r2, [pc, #284]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b42      	ldr	r3, [pc, #264]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a41      	ldr	r2, [pc, #260]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b3f      	ldr	r3, [pc, #252]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a3b      	ldr	r2, [pc, #236]	@ (80009e8 <MX_GPIO_Init+0x138>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b39      	ldr	r3, [pc, #228]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a35      	ldr	r2, [pc, #212]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <MX_GPIO_Init+0x138>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	4b30      	ldr	r3, [pc, #192]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a2f      	ldr	r2, [pc, #188]	@ (80009e8 <MX_GPIO_Init+0x138>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x138>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800093e:	f001 f80b 	bl	8001958 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000948:	4828      	ldr	r0, [pc, #160]	@ (80009ec <MX_GPIO_Init+0x13c>)
 800094a:	f000 fe1b 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	4827      	ldr	r0, [pc, #156]	@ (80009f0 <MX_GPIO_Init+0x140>)
 8000954:	f000 fe16 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4821      	ldr	r0, [pc, #132]	@ (80009f4 <MX_GPIO_Init+0x144>)
 8000970:	f000 fc76 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000974:	2308      	movs	r3, #8
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000978:	2303      	movs	r3, #3
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098a:	f000 fc69 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800098e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_GPIO_Init+0x13c>)
 80009a8:	f000 fc5a 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <MX_GPIO_Init+0x140>)
 80009c0:	f000 fc4e 	bl	8001260 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_GPIO_Init+0x140>)
 80009dc:	f000 fc40 	bl	8001260 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400
 80009f0:	48001800 	.word	0x48001800
 80009f4:	48000800 	.word	0x48000800

080009f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("[%lu ms]RED LED TOGGLING...!\r\n",HAL_GetTick());
 8000a00:	f000 fb1c 	bl	800103c <HAL_GetTick>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <StartDefaultTask+0x2c>)
 8000a0a:	f005 f97d 	bl	8005d08 <iprintf>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a12:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <StartDefaultTask+0x30>)
 8000a14:	f000 fdce 	bl	80015b4 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1c:	f003 fe00 	bl	8004620 <osDelay>
	  printf("[%lu ms]RED LED TOGGLING...!\r\n",HAL_GetTick());
 8000a20:	bf00      	nop
 8000a22:	e7ed      	b.n	8000a00 <StartDefaultTask+0x8>
 8000a24:	08006b48 	.word	0x08006b48
 8000a28:	48000400 	.word	0x48000400

08000a2c <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_init */
  /* Infinite loop */
  for(;;)
  {
	  printf("[%lu ms]BLUE LED TOGGLING...!\r\n",HAL_GetTick());
 8000a34:	f000 fb02 	bl	800103c <HAL_GetTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <Task02_init+0x2c>)
 8000a3e:	f005 f963 	bl	8005d08 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a42:	2180      	movs	r1, #128	@ 0x80
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <Task02_init+0x30>)
 8000a46:	f000 fdb5 	bl	80015b4 <HAL_GPIO_TogglePin>

    osDelay(1000);
 8000a4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a4e:	f003 fde7 	bl	8004620 <osDelay>
	  printf("[%lu ms]BLUE LED TOGGLING...!\r\n",HAL_GetTick());
 8000a52:	bf00      	nop
 8000a54:	e7ee      	b.n	8000a34 <Task02_init+0x8>
 8000a56:	bf00      	nop
 8000a58:	08006b68 	.word	0x08006b68
 8000a5c:	48000400 	.word	0x48000400

08000a60 <Task03_init>:
  }
  /* USER CODE END Task02_init */
}
void Task03_init(void const * argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  while(1)
  {
	  printf("[%lu ms]indix= %d\r\n",HAL_GetTick(),indix++);
 8000a68:	f000 fae8 	bl	800103c <HAL_GetTick>
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <Task03_init+0x4c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	b2d0      	uxtb	r0, r2
 8000a76:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <Task03_init+0x4c>)
 8000a78:	7010      	strb	r0, [r2, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <Task03_init+0x50>)
 8000a7e:	f005 f943 	bl	8005d08 <iprintf>

    osDelay(1000);
 8000a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a86:	f003 fdcb 	bl	8004620 <osDelay>
    if(indix==4){
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <Task03_init+0x4c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	d1ea      	bne.n	8000a68 <Task03_init+0x8>
    	printf("[%lu ms]BLUE LED STOP TOGGLING",HAL_GetTick());
 8000a92:	f000 fad3 	bl	800103c <HAL_GetTick>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <Task03_init+0x54>)
 8000a9c:	f005 f934 	bl	8005d08 <iprintf>
        osThreadTerminate (myTask02Handle);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <Task03_init+0x58>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fdaf 	bl	8004608 <osThreadTerminate>
	  printf("[%lu ms]indix= %d\r\n",HAL_GetTick(),indix++);
 8000aaa:	e7dd      	b.n	8000a68 <Task03_init+0x8>
 8000aac:	20000328 	.word	0x20000328
 8000ab0:	08006b88 	.word	0x08006b88
 8000ab4:	08006b9c 	.word	0x08006b9c
 8000ab8:	2000089c 	.word	0x2000089c

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */

  if (htim->Instance == TIM1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ace:	f000 faa1 	bl	8001014 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40012c00 	.word	0x40012c00

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	210f      	movs	r1, #15
 8000b26:	f06f 0001 	mvn.w	r0, #1
 8000b2a:	f000 fb6f 	bl	800120c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	228c      	movs	r2, #140	@ 0x8c
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f005 f928 	bl	8005db2 <memset>
  if(huart->Instance==LPUART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	@ (8000bf0 <HAL_UART_MspInit+0xb4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d13d      	bne.n	8000be8 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fd6d 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b84:	f7ff ffac 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b8c:	4a19      	ldr	r2, [pc, #100]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a13      	ldr	r2, [pc, #76]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bb8:	f000 fece 	bl	8001958 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bbc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bdc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <HAL_UART_MspInit+0xbc>)
 8000be4:	f000 fb3c 	bl	8001260 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000be8:	bf00      	nop
 8000bea:	37b0      	adds	r7, #176	@ 0xb0
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40008000 	.word	0x40008000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	48001800 	.word	0x48001800

08000bfc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0ae      	sub	sp, #184	@ 0xb8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	f107 0318 	add.w	r3, r7, #24
 8000c18:	228c      	movs	r2, #140	@ 0x8c
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f005 f8c8 	bl	8005db2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c2a:	d17c      	bne.n	8000d26 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000c42:	2318      	movs	r3, #24
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000c52:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fcfb 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000c68:	f7ff ff3a 	bl	8000ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	4a2f      	ldr	r2, [pc, #188]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c84:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f000 fad7 	bl	8001260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f000 fac6 	bl	8001260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd8:	4a15      	ldr	r2, [pc, #84]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000cda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d114      	bne.n	8000d22 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d04:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000d10:	f000 fe12 	bl	8001938 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <HAL_PCD_MspInit+0x134>)
 8000d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d20:	e001      	b.n	8000d26 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000d22:	f000 fe09 	bl	8001938 <HAL_PWREx_EnableVddUSB>
}
 8000d26:	bf00      	nop
 8000d28:	37b8      	adds	r7, #184	@ 0xb8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d42:	4b2e      	ldr	r3, [pc, #184]	@ (8000dfc <HAL_InitTick+0xc8>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	4a2d      	ldr	r2, [pc, #180]	@ (8000dfc <HAL_InitTick+0xc8>)
 8000d48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dfc <HAL_InitTick+0xc8>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5a:	f107 020c 	add.w	r2, r7, #12
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fbe5 	bl	8002534 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d6a:	f001 fbcd 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8000d6e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d72:	4a23      	ldr	r2, [pc, #140]	@ (8000e00 <HAL_InitTick+0xcc>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	0c9b      	lsrs	r3, r3, #18
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <HAL_InitTick+0xd4>)
 8000d82:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000d86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da4:	4817      	ldr	r0, [pc, #92]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000da6:	f002 f931 	bl	800300c <HAL_TIM_Base_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000db0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11b      	bne.n	8000df0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db8:	4812      	ldr	r0, [pc, #72]	@ (8000e04 <HAL_InitTick+0xd0>)
 8000dba:	f002 f989 	bl	80030d0 <HAL_TIM_Base_Start_IT>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d111      	bne.n	8000df0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f000 fa39 	bl	8001244 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d808      	bhi.n	8000dea <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2019      	movs	r0, #25
 8000dde:	f000 fa15 	bl	800120c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_InitTick+0xd8>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e002      	b.n	8000df0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000df0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3730      	adds	r7, #48	@ 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	200008a4 	.word	0x200008a4
 8000e08:	40012c00 	.word	0x40012c00
 8000e0c:	20000004 	.word	0x20000004

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e4e:	f002 f9af 	bl	80031b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200008a4 	.word	0x200008a4

08000e5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f004 ffec 	bl	8005f0c <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20050000 	.word	0x20050000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	200008f0 	.word	0x200008f0
 8000f68:	20001750 	.word	0x20001750

08000f6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f94:	f7ff ffea 	bl	8000f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fdc <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f004 ffab 	bl	8005f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc2:	f7ff fb59 	bl	8000678 <main>

08000fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc6:	e7fe      	b.n	8000fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fd4:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 8000fd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fdc:	20001750 	.word	0x20001750

08000fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC1_2_IRQHandler>

08000fe2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f902 	bl	80011f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff fe9e 	bl	8000d34 <HAL_InitTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e001      	b.n	8001008 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001004:	f7ff fd72 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001008:	79fb      	ldrb	r3, [r7, #7]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	200008f4 	.word	0x200008f4

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200008f4 	.word	0x200008f4

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008

0800109c <__NVIC_SetPriorityGrouping>:
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff4c 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121e:	f7ff ff61 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001222:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f7ff ffb1 	bl	8001190 <NVIC_EncodePriority>
 800122e:	4602      	mov	r2, r0
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff80 	bl	800113c <__NVIC_SetPriority>
}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff54 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e166      	b.n	800153e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2101      	movs	r1, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8158 	beq.w	8001538 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b01      	cmp	r3, #1
 8001292:	d005      	beq.n	80012a0 <HAL_GPIO_Init+0x40>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d130      	bne.n	8001302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d6:	2201      	movs	r2, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	f003 0201 	and.w	r2, r3, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b03      	cmp	r3, #3
 800130c:	d017      	beq.n	800133e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d123      	bne.n	8001392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0203 	and.w	r2, r3, #3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80b2 	beq.w	8001538 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_GPIO_Init+0x2fc>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d8:	4a60      	ldr	r2, [pc, #384]	@ (800155c <HAL_GPIO_Init+0x2fc>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6613      	str	r3, [r2, #96]	@ 0x60
 80013e0:	4b5e      	ldr	r3, [pc, #376]	@ (800155c <HAL_GPIO_Init+0x2fc>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001560 <HAL_GPIO_Init+0x300>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001416:	d02b      	beq.n	8001470 <HAL_GPIO_Init+0x210>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a52      	ldr	r2, [pc, #328]	@ (8001564 <HAL_GPIO_Init+0x304>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d025      	beq.n	800146c <HAL_GPIO_Init+0x20c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a51      	ldr	r2, [pc, #324]	@ (8001568 <HAL_GPIO_Init+0x308>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01f      	beq.n	8001468 <HAL_GPIO_Init+0x208>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a50      	ldr	r2, [pc, #320]	@ (800156c <HAL_GPIO_Init+0x30c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d019      	beq.n	8001464 <HAL_GPIO_Init+0x204>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a4f      	ldr	r2, [pc, #316]	@ (8001570 <HAL_GPIO_Init+0x310>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d013      	beq.n	8001460 <HAL_GPIO_Init+0x200>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4e      	ldr	r2, [pc, #312]	@ (8001574 <HAL_GPIO_Init+0x314>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d00d      	beq.n	800145c <HAL_GPIO_Init+0x1fc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4d      	ldr	r2, [pc, #308]	@ (8001578 <HAL_GPIO_Init+0x318>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_GPIO_Init+0x1f8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4c      	ldr	r2, [pc, #304]	@ (800157c <HAL_GPIO_Init+0x31c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d101      	bne.n	8001454 <HAL_GPIO_Init+0x1f4>
 8001450:	2307      	movs	r3, #7
 8001452:	e00e      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001454:	2308      	movs	r3, #8
 8001456:	e00c      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001458:	2306      	movs	r3, #6
 800145a:	e00a      	b.n	8001472 <HAL_GPIO_Init+0x212>
 800145c:	2305      	movs	r3, #5
 800145e:	e008      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001460:	2304      	movs	r3, #4
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001464:	2303      	movs	r3, #3
 8001466:	e004      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001468:	2302      	movs	r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x212>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_GPIO_Init+0x212>
 8001470:	2300      	movs	r3, #0
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	f002 0203 	and.w	r2, r2, #3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4093      	lsls	r3, r2
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001482:	4937      	ldr	r1, [pc, #220]	@ (8001560 <HAL_GPIO_Init+0x300>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001490:	4b3b      	ldr	r3, [pc, #236]	@ (8001580 <HAL_GPIO_Init+0x320>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b4:	4a32      	ldr	r2, [pc, #200]	@ (8001580 <HAL_GPIO_Init+0x320>)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <HAL_GPIO_Init+0x320>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014de:	4a28      	ldr	r2, [pc, #160]	@ (8001580 <HAL_GPIO_Init+0x320>)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e4:	4b26      	ldr	r3, [pc, #152]	@ (8001580 <HAL_GPIO_Init+0x320>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001508:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <HAL_GPIO_Init+0x320>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_GPIO_Init+0x320>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001532:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <HAL_GPIO_Init+0x320>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	f47f ae91 	bne.w	8001270 <HAL_GPIO_Init+0x10>
  }
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	371c      	adds	r7, #28
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	48000400 	.word	0x48000400
 8001568:	48000800 	.word	0x48000800
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48001000 	.word	0x48001000
 8001574:	48001400 	.word	0x48001400
 8001578:	48001800 	.word	0x48001800
 800157c:	48001c00 	.word	0x48001c00
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43d9      	mvns	r1, r3
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	400b      	ands	r3, r1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e101      	b.n	80017fe <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff faf4 	bl	8000bfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fd04 	bl	8004034 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7c1a      	ldrb	r2, [r3, #16]
 8001634:	f88d 2000 	strb.w	r2, [sp]
 8001638:	3304      	adds	r3, #4
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f002 fccd 	bl	8003fda <USB_CoreInit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0d5      	b.n	80017fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fcfc 	bl	8004056 <USB_SetCurrentMode>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0c6      	b.n	80017fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e04a      	b.n	800170c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3315      	adds	r3, #21
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	3314      	adds	r3, #20
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	b298      	uxth	r0, r3
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	332e      	adds	r3, #46	@ 0x2e
 80016b2:	4602      	mov	r2, r0
 80016b4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3318      	adds	r3, #24
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	331c      	adds	r3, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3320      	adds	r3, #32
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3324      	adds	r3, #36	@ 0x24
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	791b      	ldrb	r3, [r3, #4]
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3af      	bcc.n	8001676 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e044      	b.n	80017a6 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	440b      	add	r3, r1
 800176c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	791b      	ldrb	r3, [r3, #4]
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3b5      	bcc.n	800171c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7c1a      	ldrb	r2, [r3, #16]
 80017b8:	f88d 2000 	strb.w	r2, [sp]
 80017bc:	3304      	adds	r3, #4
 80017be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c0:	f002 fc96 	bl	80040f0 <USB_DevInit>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e013      	b.n	80017fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b1b      	ldrb	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d102      	bne.n	80017f2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f80a 	bl	8001806 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fe3b 	bl	8004472 <USB_DevDisconnect>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	f043 0303 	orr.w	r3, r3, #3
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000

08001870 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <HAL_PWREx_GetVoltageRange+0x18>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40007000 	.word	0x40007000

0800188c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800189a:	d130      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800189c:	4b23      	ldr	r3, [pc, #140]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018a8:	d038      	beq.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b2:	4a1e      	ldr	r2, [pc, #120]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2232      	movs	r2, #50	@ 0x32
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	3301      	adds	r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d0:	e002      	b.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e4:	d102      	bne.n	80018ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f2      	bne.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f8:	d110      	bne.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e00f      	b.n	800191e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190a:	d007      	beq.n	800191c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001914:	4a05      	ldr	r2, [pc, #20]	@ (800192c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40007000 	.word	0x40007000
 8001930:	20000000 	.word	0x20000000
 8001934:	431bde83 	.word	0x431bde83

08001938 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_PWREx_EnableVddUSB+0x1c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001946:	6053      	str	r3, [r2, #4]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40007000 	.word	0x40007000

08001958 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_PWREx_EnableVddIO2+0x1c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001966:	6053      	str	r3, [r2, #4]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40007000 	.word	0x40007000

08001978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	f000 bc08 	b.w	800219c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198c:	4b96      	ldr	r3, [pc, #600]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001996:	4b94      	ldr	r3, [pc, #592]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80e4 	beq.w	8001b76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4c>
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	f040 808b 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	f040 8087 	bne.w	8001ad2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c4:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_OscConfig+0x64>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e3df      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	4b81      	ldr	r3, [pc, #516]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_RCC_OscConfig+0x7e>
 80019ec:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f4:	e005      	b.n	8001a02 <HAL_RCC_OscConfig+0x8a>
 80019f6:	4b7c      	ldr	r3, [pc, #496]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d223      	bcs.n	8001a4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fdc4 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e3c0      	b.n	800219c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1a:	4b73      	ldr	r3, [pc, #460]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a72      	ldr	r2, [pc, #456]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b70      	ldr	r3, [pc, #448]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	496d      	ldr	r1, [pc, #436]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a38:	4b6b      	ldr	r3, [pc, #428]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	4968      	ldr	r1, [pc, #416]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e025      	b.n	8001a9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4e:	4b66      	ldr	r3, [pc, #408]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a65      	ldr	r2, [pc, #404]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b63      	ldr	r3, [pc, #396]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4960      	ldr	r1, [pc, #384]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	495b      	ldr	r1, [pc, #364]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fd84 	bl	8002598 <RCC_SetFlashLatencyFromMSIRange>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e380      	b.n	800219c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a9a:	f000 fc87 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	4950      	ldr	r1, [pc, #320]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001aac:	5ccb      	ldrb	r3, [r1, r3]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf0 <HAL_RCC_OscConfig+0x278>)
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <HAL_RCC_OscConfig+0x27c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f938 	bl	8000d34 <HAL_InitTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d052      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	e364      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d032      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ada:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a42      	ldr	r2, [pc, #264]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff faa9 	bl	800103c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aee:	f7ff faa5 	bl	800103c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e34d      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0c:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a35      	ldr	r2, [pc, #212]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4930      	ldr	r1, [pc, #192]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	492b      	ldr	r1, [pc, #172]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e01a      	b.n	8001b76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b40:	4b29      	ldr	r3, [pc, #164]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a28      	ldr	r2, [pc, #160]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fa76 	bl	800103c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b54:	f7ff fa72 	bl	800103c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e31a      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1dc>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d073      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_OscConfig+0x21c>
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d10e      	bne.n	8001bac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d063      	beq.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d15f      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e2f7      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x24c>
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e025      	b.n	8001c10 <HAL_RCC_OscConfig+0x298>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bcc:	d114      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x280>
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a02      	ldr	r2, [pc, #8]	@ (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e013      	b.n	8001c10 <HAL_RCC_OscConfig+0x298>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08006bc4 	.word	0x08006bc4
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a9f      	ldr	r2, [pc, #636]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b9d      	ldr	r3, [pc, #628]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a9c      	ldr	r2, [pc, #624]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fa10 	bl	800103c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fa0c 	bl	800103c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e2b4      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b92      	ldr	r3, [pc, #584]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2a8>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f9fc 	bl	800103c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff f9f8 	bl	800103c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e2a0      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	4b88      	ldr	r3, [pc, #544]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2d0>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d060      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x310>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d119      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d116      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c88:	4b7c      	ldr	r3, [pc, #496]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x328>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e27d      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b76      	ldr	r3, [pc, #472]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	4973      	ldr	r1, [pc, #460]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb4:	e040      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d023      	beq.n	8001d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff f9b7 	bl	800103c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f9b3 	bl	800103c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e25b      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	4b65      	ldr	r3, [pc, #404]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b62      	ldr	r3, [pc, #392]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	495f      	ldr	r1, [pc, #380]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e018      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b5d      	ldr	r3, [pc, #372]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f993 	bl	800103c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f98f 	bl	800103c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e237      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	4b53      	ldr	r3, [pc, #332]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d52:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96e 	bl	800103c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff f96a 	bl	800103c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e212      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x3ec>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f951 	bl	800103c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f94d 	bl	800103c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1f5      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80a6 	beq.w	8001f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a26      	ldr	r2, [pc, #152]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d118      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1d      	ldr	r2, [pc, #116]	@ (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e10:	f7ff f914 	bl	800103c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7ff f910 	bl	800103c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1b8      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d8>
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e4e:	e029      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d115      	bne.n	8001e84 <HAL_RCC_OscConfig+0x50c>
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6e:	4a03      	ldr	r2, [pc, #12]	@ (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	4b9d      	ldr	r3, [pc, #628]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	4a9c      	ldr	r2, [pc, #624]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e94:	4b99      	ldr	r3, [pc, #612]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9a:	4a98      	ldr	r2, [pc, #608]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d016      	beq.n	8001eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff f8c6 	bl	800103c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f8c2 	bl	800103c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e168      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eca:	4b8c      	ldr	r3, [pc, #560]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ed      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x53c>
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff f8af 	bl	800103c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff f8ab 	bl	800103c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e151      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef8:	4b80      	ldr	r3, [pc, #512]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ed      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	4a7a      	ldr	r2, [pc, #488]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01c      	beq.n	8001f66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f2c:	4b73      	ldr	r3, [pc, #460]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f32:	4a72      	ldr	r2, [pc, #456]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f87e 	bl	800103c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f44:	f7ff f87a 	bl	800103c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e122      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f56:	4b69      	ldr	r3, [pc, #420]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ef      	beq.n	8001f44 <HAL_RCC_OscConfig+0x5cc>
 8001f64:	e01b      	b.n	8001f9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f66:	4b65      	ldr	r3, [pc, #404]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f6c:	4a63      	ldr	r2, [pc, #396]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f76:	f7ff f861 	bl	800103c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f7e:	f7ff f85d 	bl	800103c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e105      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f90:	4b5a      	ldr	r3, [pc, #360]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ef      	bne.n	8001f7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80f9 	beq.w	800219a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	f040 80cf 	bne.w	8002150 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fb2:	4b52      	ldr	r3, [pc, #328]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d12c      	bne.n	8002020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d123      	bne.n	8002020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d11b      	bne.n	8002020 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d113      	bne.n	8002020 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	3b01      	subs	r3, #1
 8002006:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d109      	bne.n	8002020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d071      	beq.n	8002104 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d068      	beq.n	80020f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002026:	4b35      	ldr	r3, [pc, #212]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002032:	4b32      	ldr	r3, [pc, #200]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0ac      	b.n	800219c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002042:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8002048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204e:	f7fe fff5 	bl	800103c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7fe fff1 	bl	800103c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e099      	b.n	800219c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002074:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_RCC_OscConfig+0x788>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002084:	3a01      	subs	r2, #1
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208e:	0212      	lsls	r2, r2, #8
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002096:	0852      	lsrs	r2, r2, #1
 8002098:	3a01      	subs	r2, #1
 800209a:	0552      	lsls	r2, r2, #21
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a2:	0852      	lsrs	r2, r2, #1
 80020a4:	3a01      	subs	r2, #1
 80020a6:	0652      	lsls	r2, r2, #25
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ae:	06d2      	lsls	r2, r2, #27
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4912      	ldr	r1, [pc, #72]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b8:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7fe ffb4 	bl	800103c <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe ffb0 	bl	800103c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e058      	b.n	800219c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <HAL_RCC_OscConfig+0x784>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	e050      	b.n	800219a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04f      	b.n	800219c <HAL_RCC_OscConfig+0x824>
 80020fc:	40021000 	.word	0x40021000
 8002100:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d144      	bne.n	800219a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002128:	f7fe ff88 	bl	800103c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe ff84 	bl	800103c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e02c      	b.n	800219c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x7b8>
 800214e:	e024      	b.n	800219a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d01f      	beq.n	8002196 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 800215c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe ff6b 	bl	800103c <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe ff67 	bl	800103c <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e00f      	b.n	800219c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4905      	ldr	r1, [pc, #20]	@ (80021a4 <HAL_RCC_OscConfig+0x82c>)
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x830>)
 8002190:	4013      	ands	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e001      	b.n	800219a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	feeefffc 	.word	0xfeeefffc

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0e7      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4970      	ldr	r1, [pc, #448]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b6e      	ldr	r3, [pc, #440]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cf      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b66      	ldr	r3, [pc, #408]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4960      	ldr	r1, [pc, #384]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04c      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b5a      	ldr	r3, [pc, #360]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d121      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0a6      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	4b54      	ldr	r3, [pc, #336]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09a      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002262:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e08e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002272:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e086      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4943      	ldr	r1, [pc, #268]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7fe fed2 	bl	800103c <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe fece 	bl	800103c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b31      	ldr	r3, [pc, #196]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022dc:	429a      	cmp	r2, r3
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	492b      	ldr	r1, [pc, #172]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d210      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4923      	ldr	r1, [pc, #140]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e036      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4918      	ldr	r1, [pc, #96]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4910      	ldr	r1, [pc, #64]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002360:	f000 f824 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	490b      	ldr	r1, [pc, #44]	@ (80023a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fcd5 	bl	8000d34 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	72fb      	strb	r3, [r7, #11]

  return status;
 800238e:	7afb      	ldrb	r3, [r7, #11]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40022000 	.word	0x40022000
 800239c:	40021000 	.word	0x40021000
 80023a0:	08006bc4 	.word	0x08006bc4
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d121      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d11e      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ec:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d102      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e004      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d101      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d134      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0xa6>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d003      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xac>
 8002450:	e005      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e002      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	3301      	adds	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	0e5b      	lsrs	r3, r3, #25
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	3301      	adds	r3, #1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08006bdc 	.word	0x08006bdc
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000000 	.word	0x20000000

080024dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e0:	f7ff fff0 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	4904      	ldr	r1, [pc, #16]	@ (8002504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	08006bd4 	.word	0x08006bd4

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800250c:	f7ff ffda 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0adb      	lsrs	r3, r3, #11
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4904      	ldr	r1, [pc, #16]	@ (8002530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	08006bd4 	.word	0x08006bd4

08002534 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	220f      	movs	r2, #15
 8002542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800255c:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002568:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	08db      	lsrs	r3, r3, #3
 800256e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002576:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <HAL_RCC_GetClockConfig+0x60>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0207 	and.w	r2, r3, #7
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40022000 	.word	0x40022000

08002598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025b0:	f7ff f95e 	bl	8001870 <HAL_PWREx_GetVoltageRange>
 80025b4:	6178      	str	r0, [r7, #20]
 80025b6:	e014      	b.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c4:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff f94e 	bl	8001870 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	4a1d      	ldr	r2, [pc, #116]	@ (8002650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025e8:	d10b      	bne.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	@ 0x80
 80025ee:	d919      	bls.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80025f4:	d902      	bls.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f6:	2302      	movs	r3, #2
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e013      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e010      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b80      	cmp	r3, #128	@ 0x80
 8002606:	d902      	bls.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002608:	2303      	movs	r3, #3
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e00a      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b80      	cmp	r3, #128	@ 0x80
 8002612:	d102      	bne.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002614:	2302      	movs	r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e004      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b70      	cmp	r3, #112	@ 0x70
 800261e:	d101      	bne.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002620:	2301      	movs	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 0207 	bic.w	r2, r3, #7
 800262c:	4909      	ldr	r1, [pc, #36]	@ (8002654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002634:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40022000 	.word	0x40022000

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002660:	2300      	movs	r3, #0
 8002662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002664:	2300      	movs	r3, #0
 8002666:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002670:	2b00      	cmp	r3, #0
 8002672:	d041      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002678:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800267c:	d02a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800267e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002682:	d824      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800268a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800268e:	d81e      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002694:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002698:	d010      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800269a:	e018      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800269c:	4b86      	ldr	r3, [pc, #536]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a85      	ldr	r2, [pc, #532]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a8:	e015      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fadd 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ba:	e00c      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3320      	adds	r3, #32
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fbc6 	bl	8002e54 <RCCEx_PLLSAI2_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026cc:	e003      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	74fb      	strb	r3, [r7, #19]
      break;
 80026d2:	e000      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026dc:	4b76      	ldr	r3, [pc, #472]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ea:	4973      	ldr	r1, [pc, #460]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026f2:	e001      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d041      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002708:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800270c:	d02a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800270e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002712:	d824      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800271a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800271e:	d81e      	bhi.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002728:	d010      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800272a:	e018      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800272c:	4b62      	ldr	r3, [pc, #392]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a61      	ldr	r2, [pc, #388]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002736:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002738:	e015      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fa95 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274a:	e00c      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3320      	adds	r3, #32
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fb7e 	bl	8002e54 <RCCEx_PLLSAI2_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800275c:	e003      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	74fb      	strb	r3, [r7, #19]
      break;
 8002762:	e000      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800276c:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277a:	494f      	ldr	r1, [pc, #316]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002782:	e001      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a0 	beq.w	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800279a:	4b47      	ldr	r3, [pc, #284]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b0:	4b41      	ldr	r3, [pc, #260]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	4a40      	ldr	r2, [pc, #256]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80027bc:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c8:	2301      	movs	r3, #1
 80027ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4b3b      	ldr	r3, [pc, #236]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a3a      	ldr	r2, [pc, #232]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fc30 	bl	800103c <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027de:	e009      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe fc2c 	bl	800103c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	74fb      	strb	r3, [r7, #19]
        break;
 80027f2:	e005      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f4:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ef      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d15c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002806:	4b2c      	ldr	r3, [pc, #176]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01f      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	d019      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002824:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002830:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	4a20      	ldr	r2, [pc, #128]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002840:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002850:	4a19      	ldr	r2, [pc, #100]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fbeb 	bl	800103c <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002868:	e00b      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fbe7 	bl	800103c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d902      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	74fb      	strb	r3, [r7, #19]
            break;
 8002880:	e006      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ec      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002896:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800289c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	4904      	ldr	r1, [pc, #16]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028ae:	e009      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c4:	7c7b      	ldrb	r3, [r7, #17]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4ba6      	ldr	r3, [pc, #664]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	4aa5      	ldr	r2, [pc, #660]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e2:	4ba0      	ldr	r3, [pc, #640]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e8:	f023 0203 	bic.w	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	499c      	ldr	r1, [pc, #624]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002904:	4b97      	ldr	r3, [pc, #604]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f023 020c 	bic.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	4994      	ldr	r1, [pc, #592]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002926:	4b8f      	ldr	r3, [pc, #572]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	498b      	ldr	r1, [pc, #556]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002948:	4b86      	ldr	r3, [pc, #536]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4983      	ldr	r1, [pc, #524]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800296a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002970:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	497a      	ldr	r1, [pc, #488]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298c:	4b75      	ldr	r3, [pc, #468]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002992:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	4972      	ldr	r1, [pc, #456]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029bc:	4969      	ldr	r1, [pc, #420]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d0:	4b64      	ldr	r3, [pc, #400]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029de:	4961      	ldr	r1, [pc, #388]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a00:	4958      	ldr	r1, [pc, #352]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	4950      	ldr	r1, [pc, #320]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a36:	4b4b      	ldr	r3, [pc, #300]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	4947      	ldr	r1, [pc, #284]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a58:	4b42      	ldr	r3, [pc, #264]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	493f      	ldr	r1, [pc, #252]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d028      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4936      	ldr	r1, [pc, #216]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a9a:	4b32      	ldr	r3, [pc, #200]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a31      	ldr	r2, [pc, #196]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002aa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa4:	60d3      	str	r3, [r2, #12]
 8002aa6:	e011      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f8d9 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad8:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae6:	491f      	ldr	r1, [pc, #124]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a19      	ldr	r2, [pc, #100]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e011      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8aa 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d02a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b36:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b44:	4907      	ldr	r1, [pc, #28]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b54:	d108      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b56:	4b03      	ldr	r3, [pc, #12]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a02      	ldr	r2, [pc, #8]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b60:	60d3      	str	r3, [r2, #12]
 8002b62:	e013      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f879 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02f      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b2c      	ldr	r3, [pc, #176]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ba6:	4929      	ldr	r1, [pc, #164]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f856 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f935 	bl	8002e54 <RCCEx_PLLSAI2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c14:	490d      	ldr	r1, [pc, #52]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00b      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c38:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c40:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000

08002c50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7e:	4b74      	ldr	r3, [pc, #464]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d018      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c8a:	4b71      	ldr	r3, [pc, #452]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d047      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e044      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d018      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x86>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d825      	bhi.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x62>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d009      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x74>
 8002cd0:	e020      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e01a      	b.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e013      	b.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf6:	4b56      	ldr	r3, [pc, #344]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d02:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d12:	e006      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e004      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	4943      	ldr	r1, [pc, #268]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d17c      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d4c:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a3f      	ldr	r2, [pc, #252]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f970 	bl	800103c <HAL_GetTick>
 8002d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d5e:	e009      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d60:	f7fe f96c 	bl	800103c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
        break;
 8002d72:	e005      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d74:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ef      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d15f      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d110      	bne.n	8002dae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8c:	4b30      	ldr	r3, [pc, #192]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002d94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	0211      	lsls	r1, r2, #8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	06d2      	lsls	r2, r2, #27
 8002da4:	430a      	orrs	r2, r1
 8002da6:	492a      	ldr	r1, [pc, #168]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	610b      	str	r3, [r1, #16]
 8002dac:	e027      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d112      	bne.n	8002dda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db4:	4b26      	ldr	r3, [pc, #152]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002dbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6892      	ldr	r2, [r2, #8]
 8002dc4:	0211      	lsls	r1, r2, #8
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6912      	ldr	r2, [r2, #16]
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0552      	lsls	r2, r2, #21
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	491f      	ldr	r1, [pc, #124]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	610b      	str	r3, [r1, #16]
 8002dd8:	e011      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002de2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6892      	ldr	r2, [r2, #8]
 8002dea:	0211      	lsls	r1, r2, #8
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6952      	ldr	r2, [r2, #20]
 8002df0:	0852      	lsrs	r2, r2, #1
 8002df2:	3a01      	subs	r2, #1
 8002df4:	0652      	lsls	r2, r2, #25
 8002df6:	430a      	orrs	r2, r1
 8002df8:	4915      	ldr	r1, [pc, #84]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fe f917 	bl	800103c <HAL_GetTick>
 8002e0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e10:	e009      	b.n	8002e26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e12:	f7fe f913 	bl	800103c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d902      	bls.n	8002e26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	73fb      	strb	r3, [r7, #15]
          break;
 8002e24:	e005      	b.n	8002e32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ef      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e62:	4b69      	ldr	r3, [pc, #420]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e6e:	4b66      	ldr	r3, [pc, #408]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0203 	and.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d10d      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
       ||
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e86:	4b60      	ldr	r3, [pc, #384]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
       ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d047      	beq.n	8002f2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	e044      	b.n	8002f2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d018      	beq.n	8002eda <RCCEx_PLLSAI2_Config+0x86>
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d825      	bhi.n	8002ef8 <RCCEx_PLLSAI2_Config+0xa4>
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <RCCEx_PLLSAI2_Config+0x62>
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d009      	beq.n	8002ec8 <RCCEx_PLLSAI2_Config+0x74>
 8002eb4:	e020      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eb6:	4b54      	ldr	r3, [pc, #336]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d11d      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec6:	e01a      	b.n	8002efe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e013      	b.n	8002f02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eda:	4b4b      	ldr	r3, [pc, #300]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ee6:	4b48      	ldr	r3, [pc, #288]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ef6:	e006      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e004      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efe:	bf00      	nop
 8002f00:	e002      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e000      	b.n	8002f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	430b      	orrs	r3, r1
 8002f24:	4938      	ldr	r1, [pc, #224]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d166      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f30:	4b35      	ldr	r3, [pc, #212]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a34      	ldr	r2, [pc, #208]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe f87e 	bl	800103c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f44:	f7fe f87a 	bl	800103c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
        break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f58:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1ef      	bne.n	8002f44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d149      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d110      	bne.n	8002f92 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f70:	4b25      	ldr	r3, [pc, #148]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002f78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6892      	ldr	r2, [r2, #8]
 8002f80:	0211      	lsls	r1, r2, #8
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	06d2      	lsls	r2, r2, #27
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	491f      	ldr	r1, [pc, #124]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	614b      	str	r3, [r1, #20]
 8002f90:	e011      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f92:	4b1d      	ldr	r3, [pc, #116]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6892      	ldr	r2, [r2, #8]
 8002fa2:	0211      	lsls	r1, r2, #8
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6912      	ldr	r2, [r2, #16]
 8002fa8:	0852      	lsrs	r2, r2, #1
 8002faa:	3a01      	subs	r2, #1
 8002fac:	0652      	lsls	r2, r2, #25
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	4915      	ldr	r1, [pc, #84]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a13      	ldr	r2, [pc, #76]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f83b 	bl	800103c <HAL_GetTick>
 8002fc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc8:	e009      	b.n	8002fde <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fca:	f7fe f837 	bl	800103c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d902      	bls.n	8002fde <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	73fb      	strb	r3, [r7, #15]
          break;
 8002fdc:	e005      	b.n	8002fea <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ef      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e049      	b.n	80030b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f841 	bl	80030ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f000 f9e0 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d001      	beq.n	80030e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04f      	b.n	8003188 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	@ (8003194 <HAL_TIM_Base_Start_IT+0xc4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d018      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1f      	ldr	r2, [pc, #124]	@ (8003198 <HAL_TIM_Base_Start_IT+0xc8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_TIM_Base_Start_IT+0xcc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a1c      	ldr	r2, [pc, #112]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x76>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d115      	bne.n	8003172 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <HAL_TIM_Base_Start_IT+0xdc>)
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d015      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315e:	d011      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e008      	b.n	8003184 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e000      	b.n	8003186 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40013400 	.word	0x40013400
 80031a8:	40014000 	.word	0x40014000
 80031ac:	00010007 	.word	0x00010007

080031b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0202 	mvn.w	r2, #2
 80031e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8e9 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8db 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8ec 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0204 	mvn.w	r2, #4
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8c3 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8b5 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8c6 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0208 	mvn.w	r2, #8
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2204      	movs	r2, #4
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f89d 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f88f 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8a0 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01b      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0210 	mvn.w	r2, #16
 80032c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2208      	movs	r2, #8
 80032ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f877 	bl	80033d2 <HAL_TIM_IC_CaptureCallback>
 80032e4:	e005      	b.n	80032f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f869 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f87a 	bl	80033e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d007      	beq.n	800331c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0201 	mvn.w	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd fbd0 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f913 	bl	8003570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f90b 	bl	8003584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00c      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d007      	beq.n	8003392 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800338a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f834 	bl	80033fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00c      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0220 	mvn.w	r2, #32
 80033ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8d3 	bl	800355c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a46      	ldr	r2, [pc, #280]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <TIM_Base_SetConfig+0x130>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <TIM_Base_SetConfig+0x134>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a41      	ldr	r2, [pc, #260]	@ (8003548 <TIM_Base_SetConfig+0x138>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a40      	ldr	r2, [pc, #256]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a35      	ldr	r2, [pc, #212]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003470:	d01b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a32      	ldr	r2, [pc, #200]	@ (8003540 <TIM_Base_SetConfig+0x130>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a31      	ldr	r2, [pc, #196]	@ (8003544 <TIM_Base_SetConfig+0x134>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a30      	ldr	r2, [pc, #192]	@ (8003548 <TIM_Base_SetConfig+0x138>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2f      	ldr	r2, [pc, #188]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <TIM_Base_SetConfig+0x140>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <TIM_Base_SetConfig+0x144>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <TIM_Base_SetConfig+0x148>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a16      	ldr	r2, [pc, #88]	@ (800353c <TIM_Base_SetConfig+0x12c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a18      	ldr	r2, [pc, #96]	@ (800354c <TIM_Base_SetConfig+0x13c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a17      	ldr	r2, [pc, #92]	@ (8003550 <TIM_Base_SetConfig+0x140>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <TIM_Base_SetConfig+0x144>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <TIM_Base_SetConfig+0x148>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f023 0201 	bic.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
  }
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40013400 	.word	0x40013400
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800

0800355c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fabe 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	@ 0x24
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fae0 	bl	8003ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f825 	bl	8003634 <UART_SetConfig>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e01b      	b.n	800362c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb5f 	bl	8003ce8 <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b08a      	sub	sp, #40	@ 0x28
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	4313      	orrs	r3, r2
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4ba4      	ldr	r3, [pc, #656]	@ (80038f4 <UART_SetConfig+0x2c0>)
 8003664:	4013      	ands	r3, r2
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800366c:	430b      	orrs	r3, r1
 800366e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a99      	ldr	r2, [pc, #612]	@ (80038f8 <UART_SetConfig+0x2c4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	4313      	orrs	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a90      	ldr	r2, [pc, #576]	@ (80038fc <UART_SetConfig+0x2c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d126      	bne.n	800370c <UART_SetConfig+0xd8>
 80036be:	4b90      	ldr	r3, [pc, #576]	@ (8003900 <UART_SetConfig+0x2cc>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d81b      	bhi.n	8003704 <UART_SetConfig+0xd0>
 80036cc:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <UART_SetConfig+0xa0>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036fd 	.word	0x080036fd
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e116      	b.n	800391a <UART_SetConfig+0x2e6>
 80036ec:	2302      	movs	r3, #2
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e112      	b.n	800391a <UART_SetConfig+0x2e6>
 80036f4:	2304      	movs	r3, #4
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e10e      	b.n	800391a <UART_SetConfig+0x2e6>
 80036fc:	2308      	movs	r3, #8
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e10a      	b.n	800391a <UART_SetConfig+0x2e6>
 8003704:	2310      	movs	r3, #16
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370a:	e106      	b.n	800391a <UART_SetConfig+0x2e6>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a7c      	ldr	r2, [pc, #496]	@ (8003904 <UART_SetConfig+0x2d0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d138      	bne.n	8003788 <UART_SetConfig+0x154>
 8003716:	4b7a      	ldr	r3, [pc, #488]	@ (8003900 <UART_SetConfig+0x2cc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b0c      	cmp	r3, #12
 8003722:	d82d      	bhi.n	8003780 <UART_SetConfig+0x14c>
 8003724:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <UART_SetConfig+0xf8>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003761 	.word	0x08003761
 8003730:	08003781 	.word	0x08003781
 8003734:	08003781 	.word	0x08003781
 8003738:	08003781 	.word	0x08003781
 800373c:	08003771 	.word	0x08003771
 8003740:	08003781 	.word	0x08003781
 8003744:	08003781 	.word	0x08003781
 8003748:	08003781 	.word	0x08003781
 800374c:	08003769 	.word	0x08003769
 8003750:	08003781 	.word	0x08003781
 8003754:	08003781 	.word	0x08003781
 8003758:	08003781 	.word	0x08003781
 800375c:	08003779 	.word	0x08003779
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003766:	e0d8      	b.n	800391a <UART_SetConfig+0x2e6>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376e:	e0d4      	b.n	800391a <UART_SetConfig+0x2e6>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003776:	e0d0      	b.n	800391a <UART_SetConfig+0x2e6>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e0cc      	b.n	800391a <UART_SetConfig+0x2e6>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003786:	e0c8      	b.n	800391a <UART_SetConfig+0x2e6>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5e      	ldr	r2, [pc, #376]	@ (8003908 <UART_SetConfig+0x2d4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d125      	bne.n	80037de <UART_SetConfig+0x1aa>
 8003792:	4b5b      	ldr	r3, [pc, #364]	@ (8003900 <UART_SetConfig+0x2cc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800379c:	2b30      	cmp	r3, #48	@ 0x30
 800379e:	d016      	beq.n	80037ce <UART_SetConfig+0x19a>
 80037a0:	2b30      	cmp	r3, #48	@ 0x30
 80037a2:	d818      	bhi.n	80037d6 <UART_SetConfig+0x1a2>
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d00a      	beq.n	80037be <UART_SetConfig+0x18a>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d814      	bhi.n	80037d6 <UART_SetConfig+0x1a2>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <UART_SetConfig+0x182>
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d008      	beq.n	80037c6 <UART_SetConfig+0x192>
 80037b4:	e00f      	b.n	80037d6 <UART_SetConfig+0x1a2>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037bc:	e0ad      	b.n	800391a <UART_SetConfig+0x2e6>
 80037be:	2302      	movs	r3, #2
 80037c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c4:	e0a9      	b.n	800391a <UART_SetConfig+0x2e6>
 80037c6:	2304      	movs	r3, #4
 80037c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037cc:	e0a5      	b.n	800391a <UART_SetConfig+0x2e6>
 80037ce:	2308      	movs	r3, #8
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d4:	e0a1      	b.n	800391a <UART_SetConfig+0x2e6>
 80037d6:	2310      	movs	r3, #16
 80037d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037dc:	e09d      	b.n	800391a <UART_SetConfig+0x2e6>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4a      	ldr	r2, [pc, #296]	@ (800390c <UART_SetConfig+0x2d8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d125      	bne.n	8003834 <UART_SetConfig+0x200>
 80037e8:	4b45      	ldr	r3, [pc, #276]	@ (8003900 <UART_SetConfig+0x2cc>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f4:	d016      	beq.n	8003824 <UART_SetConfig+0x1f0>
 80037f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f8:	d818      	bhi.n	800382c <UART_SetConfig+0x1f8>
 80037fa:	2b80      	cmp	r3, #128	@ 0x80
 80037fc:	d00a      	beq.n	8003814 <UART_SetConfig+0x1e0>
 80037fe:	2b80      	cmp	r3, #128	@ 0x80
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x1f8>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <UART_SetConfig+0x1d8>
 8003806:	2b40      	cmp	r3, #64	@ 0x40
 8003808:	d008      	beq.n	800381c <UART_SetConfig+0x1e8>
 800380a:	e00f      	b.n	800382c <UART_SetConfig+0x1f8>
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e082      	b.n	800391a <UART_SetConfig+0x2e6>
 8003814:	2302      	movs	r3, #2
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381a:	e07e      	b.n	800391a <UART_SetConfig+0x2e6>
 800381c:	2304      	movs	r3, #4
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003822:	e07a      	b.n	800391a <UART_SetConfig+0x2e6>
 8003824:	2308      	movs	r3, #8
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382a:	e076      	b.n	800391a <UART_SetConfig+0x2e6>
 800382c:	2310      	movs	r3, #16
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003832:	e072      	b.n	800391a <UART_SetConfig+0x2e6>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a35      	ldr	r2, [pc, #212]	@ (8003910 <UART_SetConfig+0x2dc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d12a      	bne.n	8003894 <UART_SetConfig+0x260>
 800383e:	4b30      	ldr	r3, [pc, #192]	@ (8003900 <UART_SetConfig+0x2cc>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800384c:	d01a      	beq.n	8003884 <UART_SetConfig+0x250>
 800384e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003852:	d81b      	bhi.n	800388c <UART_SetConfig+0x258>
 8003854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003858:	d00c      	beq.n	8003874 <UART_SetConfig+0x240>
 800385a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385e:	d815      	bhi.n	800388c <UART_SetConfig+0x258>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <UART_SetConfig+0x238>
 8003864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003868:	d008      	beq.n	800387c <UART_SetConfig+0x248>
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x258>
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e052      	b.n	800391a <UART_SetConfig+0x2e6>
 8003874:	2302      	movs	r3, #2
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387a:	e04e      	b.n	800391a <UART_SetConfig+0x2e6>
 800387c:	2304      	movs	r3, #4
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003882:	e04a      	b.n	800391a <UART_SetConfig+0x2e6>
 8003884:	2308      	movs	r3, #8
 8003886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388a:	e046      	b.n	800391a <UART_SetConfig+0x2e6>
 800388c:	2310      	movs	r3, #16
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003892:	e042      	b.n	800391a <UART_SetConfig+0x2e6>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <UART_SetConfig+0x2c4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d13a      	bne.n	8003914 <UART_SetConfig+0x2e0>
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <UART_SetConfig+0x2cc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d01a      	beq.n	80038e4 <UART_SetConfig+0x2b0>
 80038ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b2:	d81b      	bhi.n	80038ec <UART_SetConfig+0x2b8>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d00c      	beq.n	80038d4 <UART_SetConfig+0x2a0>
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038be:	d815      	bhi.n	80038ec <UART_SetConfig+0x2b8>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0x298>
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d008      	beq.n	80038dc <UART_SetConfig+0x2a8>
 80038ca:	e00f      	b.n	80038ec <UART_SetConfig+0x2b8>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d2:	e022      	b.n	800391a <UART_SetConfig+0x2e6>
 80038d4:	2302      	movs	r3, #2
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038da:	e01e      	b.n	800391a <UART_SetConfig+0x2e6>
 80038dc:	2304      	movs	r3, #4
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e2:	e01a      	b.n	800391a <UART_SetConfig+0x2e6>
 80038e4:	2308      	movs	r3, #8
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ea:	e016      	b.n	800391a <UART_SetConfig+0x2e6>
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f2:	e012      	b.n	800391a <UART_SetConfig+0x2e6>
 80038f4:	efff69f3 	.word	0xefff69f3
 80038f8:	40008000 	.word	0x40008000
 80038fc:	40013800 	.word	0x40013800
 8003900:	40021000 	.word	0x40021000
 8003904:	40004400 	.word	0x40004400
 8003908:	40004800 	.word	0x40004800
 800390c:	40004c00 	.word	0x40004c00
 8003910:	40005000 	.word	0x40005000
 8003914:	2310      	movs	r3, #16
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a9f      	ldr	r2, [pc, #636]	@ (8003b9c <UART_SetConfig+0x568>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d17a      	bne.n	8003a1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003924:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003928:	2b08      	cmp	r3, #8
 800392a:	d824      	bhi.n	8003976 <UART_SetConfig+0x342>
 800392c:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <UART_SetConfig+0x300>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003959 	.word	0x08003959
 8003938:	08003977 	.word	0x08003977
 800393c:	08003961 	.word	0x08003961
 8003940:	08003977 	.word	0x08003977
 8003944:	08003967 	.word	0x08003967
 8003948:	08003977 	.word	0x08003977
 800394c:	08003977 	.word	0x08003977
 8003950:	08003977 	.word	0x08003977
 8003954:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003958:	f7fe fdc0 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 800395c:	61f8      	str	r0, [r7, #28]
        break;
 800395e:	e010      	b.n	8003982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba0 <UART_SetConfig+0x56c>)
 8003962:	61fb      	str	r3, [r7, #28]
        break;
 8003964:	e00d      	b.n	8003982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe fd21 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800396a:	61f8      	str	r0, [r7, #28]
        break;
 800396c:	e009      	b.n	8003982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003972:	61fb      	str	r3, [r7, #28]
        break;
 8003974:	e005      	b.n	8003982 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80fb 	beq.w	8003b80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d305      	bcc.n	80039a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d903      	bls.n	80039ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039ac:	e0e8      	b.n	8003b80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2200      	movs	r2, #0
 80039b2:	461c      	mov	r4, r3
 80039b4:	4615      	mov	r5, r2
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	022b      	lsls	r3, r5, #8
 80039c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039c4:	0222      	lsls	r2, r4, #8
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	6849      	ldr	r1, [r1, #4]
 80039ca:	0849      	lsrs	r1, r1, #1
 80039cc:	2000      	movs	r0, #0
 80039ce:	4688      	mov	r8, r1
 80039d0:	4681      	mov	r9, r0
 80039d2:	eb12 0a08 	adds.w	sl, r2, r8
 80039d6:	eb43 0b09 	adc.w	fp, r3, r9
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e8:	4650      	mov	r0, sl
 80039ea:	4659      	mov	r1, fp
 80039ec:	f7fc fc50 	bl	8000290 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4613      	mov	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fe:	d308      	bcc.n	8003a12 <UART_SetConfig+0x3de>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a06:	d204      	bcs.n	8003a12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	e0b6      	b.n	8003b80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a18:	e0b2      	b.n	8003b80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a22:	d15e      	bne.n	8003ae2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d828      	bhi.n	8003a7e <UART_SetConfig+0x44a>
 8003a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <UART_SetConfig+0x400>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a59 	.word	0x08003a59
 8003a38:	08003a61 	.word	0x08003a61
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a77 	.word	0x08003a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7fe fd40 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8003a5c:	61f8      	str	r0, [r7, #28]
        break;
 8003a5e:	e014      	b.n	8003a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7fe fd52 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003a64:	61f8      	str	r0, [r7, #28]
        break;
 8003a66:	e010      	b.n	8003a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <UART_SetConfig+0x56c>)
 8003a6a:	61fb      	str	r3, [r7, #28]
        break;
 8003a6c:	e00d      	b.n	8003a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a6e:	f7fe fc9d 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003a72:	61f8      	str	r0, [r7, #28]
        break;
 8003a74:	e009      	b.n	8003a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7a:	61fb      	str	r3, [r7, #28]
        break;
 8003a7c:	e005      	b.n	8003a8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d077      	beq.n	8003b80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005a      	lsls	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	441a      	add	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b0f      	cmp	r3, #15
 8003aaa:	d916      	bls.n	8003ada <UART_SetConfig+0x4a6>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab2:	d212      	bcs.n	8003ada <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f023 030f 	bic.w	r3, r3, #15
 8003abc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	8afa      	ldrh	r2, [r7, #22]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	e052      	b.n	8003b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ae0:	e04e      	b.n	8003b80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d827      	bhi.n	8003b3a <UART_SetConfig+0x506>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <UART_SetConfig+0x4bc>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b1d 	.word	0x08003b1d
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b2b 	.word	0x08003b2b
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b3b 	.word	0x08003b3b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7fe fce2 	bl	80024dc <HAL_RCC_GetPCLK1Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e014      	b.n	8003b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b1c:	f7fe fcf4 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e010      	b.n	8003b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <UART_SetConfig+0x56c>)
 8003b26:	61fb      	str	r3, [r7, #28]
        break;
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7fe fc3f 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8003b2e:	61f8      	str	r0, [r7, #28]
        break;
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e005      	b.n	8003b46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b44:	bf00      	nop
    }

    if (pclk != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d019      	beq.n	8003b80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	085a      	lsrs	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	441a      	add	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d909      	bls.n	8003b7a <UART_SetConfig+0x546>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d205      	bcs.n	8003b7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	e002      	b.n	8003b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	@ 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	00f42400 	.word	0x00f42400

08003ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01a      	beq.n	8003cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca2:	d10a      	bne.n	8003cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b098      	sub	sp, #96	@ 0x60
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf8:	f7fd f9a0 	bl	800103c <HAL_GetTick>
 8003cfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d12e      	bne.n	8003d6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f88c 	bl	8003e38 <UART_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d021      	beq.n	8003d6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	461a      	mov	r2, r3
 8003d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e6      	bne.n	8003d26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e062      	b.n	8003e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d149      	bne.n	8003e0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f856 	bl	8003e38 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d03c      	beq.n	8003e0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e6      	bne.n	8003d92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3308      	adds	r3, #8
 8003de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de4:	61fa      	str	r2, [r7, #28]
 8003de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	69b9      	ldr	r1, [r7, #24]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	617b      	str	r3, [r7, #20]
   return(result);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e011      	b.n	8003e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3758      	adds	r7, #88	@ 0x58
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e48:	e04f      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d04b      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fd f8f3 	bl	800103c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e04e      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d037      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d034      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b40      	cmp	r3, #64	@ 0x40
 8003e84:	d031      	beq.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d110      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f838 	bl	8003f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e029      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec4:	d111      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f81e 	bl	8003f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e00f      	b.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	bf0c      	ite	eq
 8003efa:	2301      	moveq	r3, #1
 8003efc:	2300      	movne	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d0a0      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b095      	sub	sp, #84	@ 0x54
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e6      	bne.n	8003f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e5      	bne.n	8003f4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d118      	bne.n	8003fba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0310 	bic.w	r3, r3, #16
 8003f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003fce:	bf00      	nop
 8003fd0:	3754      	adds	r7, #84	@ 0x54
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fda:	b084      	sub	sp, #16
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	f107 001c 	add.w	r0, r7, #28
 8003fe8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa69 	bl	80044d0 <USB_CoreReset>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004002:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38
 8004016:	e005      	b.n	8004024 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004030:	b004      	add	sp, #16
 8004032:	4770      	bx	lr

08004034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f023 0201 	bic.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d115      	bne.n	80040a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004084:	200a      	movs	r0, #10
 8004086:	f7fc ffe5 	bl	8001054 <HAL_Delay>
      ms += 10U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	330a      	adds	r3, #10
 800408e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fa0f 	bl	80044b4 <USB_GetMode>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d01e      	beq.n	80040da <USB_SetCurrentMode+0x84>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2bc7      	cmp	r3, #199	@ 0xc7
 80040a0:	d9f0      	bls.n	8004084 <USB_SetCurrentMode+0x2e>
 80040a2:	e01a      	b.n	80040da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80040b6:	200a      	movs	r0, #10
 80040b8:	f7fc ffcc 	bl	8001054 <HAL_Delay>
      ms += 10U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	330a      	adds	r3, #10
 80040c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9f6 	bl	80044b4 <USB_GetMode>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <USB_SetCurrentMode+0x84>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80040d2:	d9f0      	bls.n	80040b6 <USB_SetCurrentMode+0x60>
 80040d4:	e001      	b.n	80040da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e005      	b.n	80040e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80040de:	d101      	bne.n	80040e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f0:	b084      	sub	sp, #16
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e009      	b.n	8004124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3340      	adds	r3, #64	@ 0x40
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3301      	adds	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b0e      	cmp	r3, #14
 8004128:	d9f2      	bls.n	8004110 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800412a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11c      	bne.n	800416c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e005      	b.n	8004178 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004184:	2103      	movs	r1, #3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f95a 	bl	8004440 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800418c:	2110      	movs	r1, #16
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8f6 	bl	8004380 <USB_FlushTxFifo>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f920 	bl	80043e4 <USB_FlushRxFifo>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e043      	b.n	8004260 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041ee:	d118      	bne.n	8004222 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004202:	461a      	mov	r2, r3
 8004204:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e013      	b.n	8004234 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004218:	461a      	mov	r2, r3
 800421a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e008      	b.n	8004234 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422e:	461a      	mov	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004240:	461a      	mov	r2, r3
 8004242:	2300      	movs	r3, #0
 8004244:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004252:	461a      	mov	r2, r3
 8004254:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004258:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3301      	adds	r3, #1
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004264:	461a      	mov	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4293      	cmp	r3, r2
 800426a:	d3b5      	bcc.n	80041d8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	e043      	b.n	80042fa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004288:	d118      	bne.n	80042bc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	e013      	b.n	80042ce <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b2:	461a      	mov	r2, r3
 80042b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e008      	b.n	80042ce <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c8:	461a      	mov	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80042f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042fe:	461a      	mov	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4293      	cmp	r3, r2
 8004304:	d3b5      	bcc.n	8004272 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004318:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004326:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f043 0210 	orr.w	r2, r3, #16
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	4b10      	ldr	r3, [pc, #64]	@ (800437c <USB_DevInit+0x28c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004340:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f043 0208 	orr.w	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004354:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004378:	b004      	add	sp, #16
 800437a:	4770      	bx	lr
 800437c:	803c3800 	.word	0x803c3800

08004380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3301      	adds	r3, #1
 8004392:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800439a:	d901      	bls.n	80043a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e01b      	b.n	80043d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	daf2      	bge.n	800438e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	019b      	lsls	r3, r3, #6
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043c4:	d901      	bls.n	80043ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e006      	b.n	80043d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d0f0      	beq.n	80043b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3301      	adds	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043fc:	d901      	bls.n	8004402 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e018      	b.n	8004434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	daf2      	bge.n	80043f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2210      	movs	r2, #16
 8004412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004420:	d901      	bls.n	8004426 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e006      	b.n	8004434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d0f0      	beq.n	8004414 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800448c:	f023 0303 	bic.w	r3, r3, #3
 8004490:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0301 	and.w	r3, r3, #1
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044e8:	d901      	bls.n	80044ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e01b      	b.n	8004526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	daf2      	bge.n	80044dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004512:	d901      	bls.n	8004518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d0f0      	beq.n	8004506 <USB_CoreReset+0x36>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004544:	2b84      	cmp	r3, #132	@ 0x84
 8004546:	d005      	beq.n	8004554 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004548:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	3303      	adds	r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004566:	f000 fb99 	bl	8004c9c <vTaskStartScheduler>
  
  return osOK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}

08004570 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	b089      	sub	sp, #36	@ 0x24
 8004574:	af04      	add	r7, sp, #16
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <osThreadCreate+0x54>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01c      	beq.n	80045c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685c      	ldr	r4, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691e      	ldr	r6, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ffc8 	bl	8004532 <makeFreeRtosPriority>
 80045a2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ac:	9202      	str	r2, [sp, #8]
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	9100      	str	r1, [sp, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4632      	mov	r2, r6
 80045b6:	4629      	mov	r1, r5
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 f8f9 	bl	80047b0 <xTaskCreateStatic>
 80045be:	4603      	mov	r3, r0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e01c      	b.n	80045fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685c      	ldr	r4, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff ffaa 	bl	8004532 <makeFreeRtosPriority>
 80045de:	4602      	mov	r2, r0
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	9200      	str	r2, [sp, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4632      	mov	r2, r6
 80045ec:	4629      	mov	r1, r5
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 f93e 	bl	8004870 <xTaskCreate>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d001      	beq.n	80045fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004608 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa7d 	bl	8004b10 <vTaskDelete>
  return osOK;
 8004616:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <osDelay+0x16>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	e000      	b.n	8004638 <osDelay+0x18>
 8004636:	2301      	movs	r3, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f000 faf9 	bl	8004c30 <vTaskDelay>
  
  return osOK;
 800463e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f103 0208 	add.w	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f04f 32ff 	mov.w	r2, #4294967295
 8004660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 0208 	add.w	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0208 	add.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d103      	bne.n	800470a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e00c      	b.n	8004724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3308      	adds	r3, #8
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e002      	b.n	8004718 <vListInsert+0x2e>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	429a      	cmp	r2, r3
 8004722:	d2f6      	bcs.n	8004712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6852      	ldr	r2, [r2, #4]
 800477c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d103      	bne.n	8004790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	@ 0x38
 80047b4:	af04      	add	r7, sp, #16
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10b      	bne.n	80047dc <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	61fb      	str	r3, [r7, #28]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047fa:	23a0      	movs	r3, #160	@ 0xa0
 80047fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2ba0      	cmp	r3, #160	@ 0xa0
 8004802:	d00b      	beq.n	800481c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	61bb      	str	r3, [r7, #24]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800481c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01e      	beq.n	8004862 <xTaskCreateStatic+0xb2>
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	2202      	movs	r2, #2
 8004838:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800483c:	2300      	movs	r3, #0
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	9302      	str	r3, [sp, #8]
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f851 	bl	80048fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800485a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800485c:	f000 f8ee 	bl	8004a3c <prvAddNewTaskToReadyList>
 8004860:	e001      	b.n	8004866 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004866:	697b      	ldr	r3, [r7, #20]
	}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	@ 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af04      	add	r7, sp, #16
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f000 ff8f 	bl	80057a8 <pvPortMalloc>
 800488a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004892:	20a0      	movs	r0, #160	@ 0xa0
 8004894:	f000 ff88 	bl	80057a8 <pvPortMalloc>
 8004898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a6:	e005      	b.n	80048b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f001 f84b 	bl	8005944 <vPortFree>
 80048ae:	e001      	b.n	80048b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	2300      	movs	r3, #0
 80048c6:	9303      	str	r3, [sp, #12]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	9302      	str	r3, [sp, #8]
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f80f 	bl	80048fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048de:	69f8      	ldr	r0, [r7, #28]
 80048e0:	f000 f8ac 	bl	8004a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048e4:	2301      	movs	r3, #1
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e002      	b.n	80048f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048f0:	69bb      	ldr	r3, [r7, #24]
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004914:	3b01      	subs	r3, #1
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f023 0307 	bic.w	r3, r3, #7
 8004922:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	617b      	str	r3, [r7, #20]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01f      	beq.n	800498c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	e012      	b.n	8004978 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	7819      	ldrb	r1, [r3, #0]
 800495a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	3334      	adds	r3, #52	@ 0x34
 8004962:	460a      	mov	r2, r1
 8004964:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	d9e9      	bls.n	8004952 <prvInitialiseNewTask+0x56>
 800497e:	e000      	b.n	8004982 <prvInitialiseNewTask+0x86>
			{
				break;
 8004980:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800498a:	e003      	b.n	8004994 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	2b06      	cmp	r3, #6
 8004998:	d901      	bls.n	800499e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800499a:	2306      	movs	r3, #6
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ac:	2200      	movs	r2, #0
 80049ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fe67 	bl	8004688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	3318      	adds	r3, #24
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff fe62 	bl	8004688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	f1c3 0207 	rsb	r2, r3, #7
 80049d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2200      	movs	r2, #0
 80049de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	334c      	adds	r3, #76	@ 0x4c
 80049ee:	224c      	movs	r2, #76	@ 0x4c
 80049f0:	2100      	movs	r1, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 f9dd 	bl	8005db2 <memset>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004a30 <prvInitialiseNewTask+0x134>)
 80049fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	4a0c      	ldr	r2, [pc, #48]	@ (8004a34 <prvInitialiseNewTask+0x138>)
 8004a02:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a06:	4a0c      	ldr	r2, [pc, #48]	@ (8004a38 <prvInitialiseNewTask+0x13c>)
 8004a08:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	69b8      	ldr	r0, [r7, #24]
 8004a10:	f000 fcba 	bl	8005388 <pxPortInitialiseStack>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a26:	bf00      	nop
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20001604 	.word	0x20001604
 8004a34:	2000166c 	.word	0x2000166c
 8004a38:	200016d4 	.word	0x200016d4

08004a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a44:	f000 fdd0 	bl	80055e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a48:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <prvAddNewTaskToReadyList+0xb8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a29      	ldr	r2, [pc, #164]	@ (8004af4 <prvAddNewTaskToReadyList+0xb8>)
 8004a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a52:	4b29      	ldr	r3, [pc, #164]	@ (8004af8 <prvAddNewTaskToReadyList+0xbc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a5a:	4a27      	ldr	r2, [pc, #156]	@ (8004af8 <prvAddNewTaskToReadyList+0xbc>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a60:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <prvAddNewTaskToReadyList+0xb8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d110      	bne.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a68:	f000 fb64 	bl	8005134 <prvInitialiseTaskLists>
 8004a6c:	e00d      	b.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <prvAddNewTaskToReadyList+0xc0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a76:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <prvAddNewTaskToReadyList+0xbc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d802      	bhi.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <prvAddNewTaskToReadyList+0xbc>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b00 <prvAddNewTaskToReadyList+0xc4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <prvAddNewTaskToReadyList+0xc4>)
 8004a92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	2201      	movs	r2, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	4b19      	ldr	r3, [pc, #100]	@ (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <prvAddNewTaskToReadyList+0xcc>)
 8004ab4:	441a      	add	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7ff fdf0 	bl	80046a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ac2:	f000 fdc3 	bl	800564c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <prvAddNewTaskToReadyList+0xc0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ace:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <prvAddNewTaskToReadyList+0xbc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d207      	bcs.n	8004aec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004adc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <prvAddNewTaskToReadyList+0xd0>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200009f8 	.word	0x200009f8
 8004af8:	200008f8 	.word	0x200008f8
 8004afc:	20000a04 	.word	0x20000a04
 8004b00:	20000a14 	.word	0x20000a14
 8004b04:	20000a00 	.word	0x20000a00
 8004b08:	200008fc 	.word	0x200008fc
 8004b0c:	e000ed04 	.word	0xe000ed04

08004b10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004b18:	f000 fd66 	bl	80055e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <vTaskDelete+0x18>
 8004b22:	4b39      	ldr	r3, [pc, #228]	@ (8004c08 <vTaskDelete+0xf8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	e000      	b.n	8004b2a <vTaskDelete+0x1a>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fe13 	bl	800475c <uxListRemove>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d115      	bne.n	8004b68 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4932      	ldr	r1, [pc, #200]	@ (8004c0c <vTaskDelete+0xfc>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vTaskDelete+0x58>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <vTaskDelete+0x100>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4013      	ands	r3, r2
 8004b64:	4a2a      	ldr	r2, [pc, #168]	@ (8004c10 <vTaskDelete+0x100>)
 8004b66:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3318      	adds	r3, #24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fdf1 	bl	800475c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004b7a:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <vTaskDelete+0x104>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	4a24      	ldr	r2, [pc, #144]	@ (8004c14 <vTaskDelete+0x104>)
 8004b82:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004b84:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <vTaskDelete+0xf8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d10b      	bne.n	8004ba6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4619      	mov	r1, r3
 8004b94:	4820      	ldr	r0, [pc, #128]	@ (8004c18 <vTaskDelete+0x108>)
 8004b96:	f7ff fd84 	bl	80046a2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004b9a:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <vTaskDelete+0x10c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <vTaskDelete+0x10c>)
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e009      	b.n	8004bba <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c20 <vTaskDelete+0x110>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <vTaskDelete+0x110>)
 8004bae:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fb2d 	bl	8005210 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004bb6:	f000 fb61 	bl	800527c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004bba:	f000 fd47 	bl	800564c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004bbe:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <vTaskDelete+0x114>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01c      	beq.n	8004c00 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8004bc6:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <vTaskDelete+0xf8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d117      	bne.n	8004c00 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004bd0:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <vTaskDelete+0x118>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00b      	beq.n	8004bf0 <vTaskDelete+0xe0>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60bb      	str	r3, [r7, #8]
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <vTaskDelete+0x11c>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200008f8 	.word	0x200008f8
 8004c0c:	200008fc 	.word	0x200008fc
 8004c10:	20000a00 	.word	0x20000a00
 8004c14:	20000a14 	.word	0x20000a14
 8004c18:	200009cc 	.word	0x200009cc
 8004c1c:	200009e0 	.word	0x200009e0
 8004c20:	200009f8 	.word	0x200009f8
 8004c24:	20000a04 	.word	0x20000a04
 8004c28:	20000a20 	.word	0x20000a20
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c42:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <vTaskDelay+0x64>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <vTaskDelay+0x32>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	60bb      	str	r3, [r7, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c62:	f000 f885 	bl	8004d70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c66:	2100      	movs	r1, #0
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fb27 	bl	80052bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c6e:	f000 f88d 	bl	8004d8c <xTaskResumeAll>
 8004c72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <vTaskDelay+0x68>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000a20 	.word	0x20000a20
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004caa:	463a      	mov	r2, r7
 8004cac:	1d39      	adds	r1, r7, #4
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fc82 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	460a      	mov	r2, r1
 8004cca:	4921      	ldr	r1, [pc, #132]	@ (8004d50 <vTaskStartScheduler+0xb4>)
 8004ccc:	4821      	ldr	r0, [pc, #132]	@ (8004d54 <vTaskStartScheduler+0xb8>)
 8004cce:	f7ff fd6f 	bl	80047b0 <xTaskCreateStatic>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4a20      	ldr	r2, [pc, #128]	@ (8004d58 <vTaskStartScheduler+0xbc>)
 8004cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d58 <vTaskStartScheduler+0xbc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e001      	b.n	8004cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d11b      	bne.n	8004d28 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d04:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <vTaskStartScheduler+0xc0>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	334c      	adds	r3, #76	@ 0x4c
 8004d0a:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <vTaskStartScheduler+0xc4>)
 8004d0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d0e:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <vTaskStartScheduler+0xc8>)
 8004d10:	f04f 32ff 	mov.w	r2, #4294967295
 8004d14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d16:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <vTaskStartScheduler+0xcc>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	@ (8004d6c <vTaskStartScheduler+0xd0>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d22:	f000 fbbd 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d26:	e00f      	b.n	8004d48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2e:	d10b      	bne.n	8004d48 <vTaskStartScheduler+0xac>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <vTaskStartScheduler+0xa8>
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	08006bbc 	.word	0x08006bbc
 8004d54:	08005105 	.word	0x08005105
 8004d58:	20000a1c 	.word	0x20000a1c
 8004d5c:	200008f8 	.word	0x200008f8
 8004d60:	2000001c 	.word	0x2000001c
 8004d64:	20000a18 	.word	0x20000a18
 8004d68:	20000a04 	.word	0x20000a04
 8004d6c:	200009fc 	.word	0x200009fc

08004d70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <vTaskSuspendAll+0x18>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	4a03      	ldr	r2, [pc, #12]	@ (8004d88 <vTaskSuspendAll+0x18>)
 8004d7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d7e:	bf00      	nop
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000a20 	.word	0x20000a20

08004d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d9a:	4b42      	ldr	r3, [pc, #264]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <xTaskResumeAll+0x2e>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	603b      	str	r3, [r7, #0]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004dba:	f000 fc15 	bl	80055e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	4a37      	ldr	r2, [pc, #220]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc8:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <xTaskResumeAll+0x118>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d161      	bne.n	8004e94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ea8 <xTaskResumeAll+0x11c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05d      	beq.n	8004e94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd8:	e02e      	b.n	8004e38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dda:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <xTaskResumeAll+0x120>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3318      	adds	r3, #24
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fcb8 	bl	800475c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fcb3 	bl	800475c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <xTaskResumeAll+0x124>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <xTaskResumeAll+0x124>)
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <xTaskResumeAll+0x128>)
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7ff fc3f 	bl	80046a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e28:	4b23      	ldr	r3, [pc, #140]	@ (8004eb8 <xTaskResumeAll+0x12c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d302      	bcc.n	8004e38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e32:	4b22      	ldr	r3, [pc, #136]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e38:	4b1c      	ldr	r3, [pc, #112]	@ (8004eac <xTaskResumeAll+0x120>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1cc      	bne.n	8004dda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e46:	f000 fa19 	bl	800527c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec0 <xTaskResumeAll+0x134>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e56:	f000 f837 	bl	8004ec8 <xTaskIncrementTick>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e60:	4b16      	ldr	r3, [pc, #88]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f1      	bne.n	8004e56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e72:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <xTaskResumeAll+0x134>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e78:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <xTaskResumeAll+0x130>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <xTaskResumeAll+0x138>)
 8004e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e94:	f000 fbda 	bl	800564c <vPortExitCritical>

	return xAlreadyYielded;
 8004e98:	68bb      	ldr	r3, [r7, #8]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000a20 	.word	0x20000a20
 8004ea8:	200009f8 	.word	0x200009f8
 8004eac:	200009b8 	.word	0x200009b8
 8004eb0:	20000a00 	.word	0x20000a00
 8004eb4:	200008fc 	.word	0x200008fc
 8004eb8:	200008f8 	.word	0x200008f8
 8004ebc:	20000a0c 	.word	0x20000a0c
 8004ec0:	20000a08 	.word	0x20000a08
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8005010 <xTaskIncrementTick+0x148>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 808f 	bne.w	8004ffa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004edc:	4b4d      	ldr	r3, [pc, #308]	@ (8005014 <xTaskIncrementTick+0x14c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8005014 <xTaskIncrementTick+0x14c>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d121      	bne.n	8004f34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ef0:	4b49      	ldr	r3, [pc, #292]	@ (8005018 <xTaskIncrementTick+0x150>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	603b      	str	r3, [r7, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <xTaskIncrementTick+0x46>
 8004f12:	4b41      	ldr	r3, [pc, #260]	@ (8005018 <xTaskIncrementTick+0x150>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	4b40      	ldr	r3, [pc, #256]	@ (800501c <xTaskIncrementTick+0x154>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005018 <xTaskIncrementTick+0x150>)
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	@ (800501c <xTaskIncrementTick+0x154>)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b3e      	ldr	r3, [pc, #248]	@ (8005020 <xTaskIncrementTick+0x158>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005020 <xTaskIncrementTick+0x158>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	f000 f9a4 	bl	800527c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f34:	4b3b      	ldr	r3, [pc, #236]	@ (8005024 <xTaskIncrementTick+0x15c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d348      	bcc.n	8004fd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3e:	4b36      	ldr	r3, [pc, #216]	@ (8005018 <xTaskIncrementTick+0x150>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	4b36      	ldr	r3, [pc, #216]	@ (8005024 <xTaskIncrementTick+0x15c>)
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	601a      	str	r2, [r3, #0]
					break;
 8004f50:	e03e      	b.n	8004fd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f52:	4b31      	ldr	r3, [pc, #196]	@ (8005018 <xTaskIncrementTick+0x150>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d203      	bcs.n	8004f72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005024 <xTaskIncrementTick+0x15c>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f70:	e02e      	b.n	8004fd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fbf0 	bl	800475c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	3318      	adds	r3, #24
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fbe7 	bl	800475c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	2201      	movs	r2, #1
 8004f94:	409a      	lsls	r2, r3
 8004f96:	4b24      	ldr	r3, [pc, #144]	@ (8005028 <xTaskIncrementTick+0x160>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <xTaskIncrementTick+0x160>)
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4a1f      	ldr	r2, [pc, #124]	@ (800502c <xTaskIncrementTick+0x164>)
 8004fae:	441a      	add	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7ff fb73 	bl	80046a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <xTaskIncrementTick+0x168>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3b9      	bcc.n	8004f3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fce:	e7b6      	b.n	8004f3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fd0:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <xTaskIncrementTick+0x168>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	4915      	ldr	r1, [pc, #84]	@ (800502c <xTaskIncrementTick+0x164>)
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d901      	bls.n	8004fec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fec:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <xTaskIncrementTick+0x16c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e004      	b.n	8005004 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8005038 <xTaskIncrementTick+0x170>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a0d      	ldr	r2, [pc, #52]	@ (8005038 <xTaskIncrementTick+0x170>)
 8005002:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005004:	697b      	ldr	r3, [r7, #20]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000a20 	.word	0x20000a20
 8005014:	200009fc 	.word	0x200009fc
 8005018:	200009b0 	.word	0x200009b0
 800501c:	200009b4 	.word	0x200009b4
 8005020:	20000a10 	.word	0x20000a10
 8005024:	20000a18 	.word	0x20000a18
 8005028:	20000a00 	.word	0x20000a00
 800502c:	200008fc 	.word	0x200008fc
 8005030:	200008f8 	.word	0x200008f8
 8005034:	20000a0c 	.word	0x20000a0c
 8005038:	20000a08 	.word	0x20000a08

0800503c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005042:	4b2a      	ldr	r3, [pc, #168]	@ (80050ec <vTaskSwitchContext+0xb0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <vTaskSwitchContext+0xb4>)
 800504c:	2201      	movs	r2, #1
 800504e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005050:	e045      	b.n	80050de <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005052:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <vTaskSwitchContext+0xb4>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005058:	4b26      	ldr	r3, [pc, #152]	@ (80050f4 <vTaskSwitchContext+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	fab3 f383 	clz	r3, r3
 8005064:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	f1c3 031f 	rsb	r3, r3, #31
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	4922      	ldr	r1, [pc, #136]	@ (80050f8 <vTaskSwitchContext+0xbc>)
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <vTaskSwitchContext+0x5a>
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a14      	ldr	r2, [pc, #80]	@ (80050f8 <vTaskSwitchContext+0xbc>)
 80050a6:	4413      	add	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	605a      	str	r2, [r3, #4]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3308      	adds	r3, #8
 80050bc:	429a      	cmp	r2, r3
 80050be:	d104      	bne.n	80050ca <vTaskSwitchContext+0x8e>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a0a      	ldr	r2, [pc, #40]	@ (80050fc <vTaskSwitchContext+0xc0>)
 80050d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050d4:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <vTaskSwitchContext+0xc0>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	334c      	adds	r3, #76	@ 0x4c
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <vTaskSwitchContext+0xc4>)
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000a20 	.word	0x20000a20
 80050f0:	20000a0c 	.word	0x20000a0c
 80050f4:	20000a00 	.word	0x20000a00
 80050f8:	200008fc 	.word	0x200008fc
 80050fc:	200008f8 	.word	0x200008f8
 8005100:	2000001c 	.word	0x2000001c

08005104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800510c:	f000 f852 	bl	80051b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <prvIdleTask+0x28>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d9f9      	bls.n	800510c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <prvIdleTask+0x2c>)
 800511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005128:	e7f0      	b.n	800510c <prvIdleTask+0x8>
 800512a:	bf00      	nop
 800512c:	200008fc 	.word	0x200008fc
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	e00c      	b.n	800515a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4a12      	ldr	r2, [pc, #72]	@ (8005194 <prvInitialiseTaskLists+0x60>)
 800514c:	4413      	add	r3, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fa7a 	bl	8004648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3301      	adds	r3, #1
 8005158:	607b      	str	r3, [r7, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d9ef      	bls.n	8005140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005160:	480d      	ldr	r0, [pc, #52]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005162:	f7ff fa71 	bl	8004648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005166:	480d      	ldr	r0, [pc, #52]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005168:	f7ff fa6e 	bl	8004648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800516c:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <prvInitialiseTaskLists+0x6c>)
 800516e:	f7ff fa6b 	bl	8004648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005172:	480c      	ldr	r0, [pc, #48]	@ (80051a4 <prvInitialiseTaskLists+0x70>)
 8005174:	f7ff fa68 	bl	8004648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005178:	480b      	ldr	r0, [pc, #44]	@ (80051a8 <prvInitialiseTaskLists+0x74>)
 800517a:	f7ff fa65 	bl	8004648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <prvInitialiseTaskLists+0x78>)
 8005180:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <prvInitialiseTaskLists+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005184:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <prvInitialiseTaskLists+0x7c>)
 8005186:	4a05      	ldr	r2, [pc, #20]	@ (800519c <prvInitialiseTaskLists+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200008fc 	.word	0x200008fc
 8005198:	20000988 	.word	0x20000988
 800519c:	2000099c 	.word	0x2000099c
 80051a0:	200009b8 	.word	0x200009b8
 80051a4:	200009cc 	.word	0x200009cc
 80051a8:	200009e4 	.word	0x200009e4
 80051ac:	200009b0 	.word	0x200009b0
 80051b0:	200009b4 	.word	0x200009b4

080051b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ba:	e019      	b.n	80051f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051bc:	f000 fa14 	bl	80055e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <prvCheckTasksWaitingTermination+0x50>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fac5 	bl	800475c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	4a0b      	ldr	r2, [pc, #44]	@ (8005208 <prvCheckTasksWaitingTermination+0x54>)
 80051da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051e6:	f000 fa31 	bl	800564c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f810 	bl	8005210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <prvCheckTasksWaitingTermination+0x58>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e1      	bne.n	80051bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200009cc 	.word	0x200009cc
 8005208:	200009f8 	.word	0x200009f8
 800520c:	200009e0 	.word	0x200009e0

08005210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	334c      	adds	r3, #76	@ 0x4c
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fde1 	bl	8005de4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb87 	bl	8005944 <vPortFree>
				vPortFree( pxTCB );
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fb84 	bl	8005944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800523c:	e019      	b.n	8005272 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005244:	2b01      	cmp	r3, #1
 8005246:	d103      	bne.n	8005250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb7b 	bl	8005944 <vPortFree>
	}
 800524e:	e010      	b.n	8005272 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005256:	2b02      	cmp	r3, #2
 8005258:	d00b      	beq.n	8005272 <prvDeleteTCB+0x62>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	60fb      	str	r3, [r7, #12]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <prvDeleteTCB+0x5e>
	}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005282:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005294:	e008      	b.n	80052a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005296:	4b07      	ldr	r3, [pc, #28]	@ (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	200009b0 	.word	0x200009b0
 80052b8:	20000a18 	.word	0x20000a18

080052bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052c6:	4b29      	ldr	r3, [pc, #164]	@ (800536c <prvAddCurrentTaskToDelayedList+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052cc:	4b28      	ldr	r3, [pc, #160]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fa42 	bl	800475c <uxListRemove>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052de:	4b24      	ldr	r3, [pc, #144]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43da      	mvns	r2, r3
 80052ec:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	4a20      	ldr	r2, [pc, #128]	@ (8005374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d10a      	bne.n	8005314 <prvAddCurrentTaskToDelayedList+0x58>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005304:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	481a      	ldr	r0, [pc, #104]	@ (8005378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800530e:	f7ff f9c8 	bl	80046a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005312:	e026      	b.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531c:	4b14      	ldr	r3, [pc, #80]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d209      	bcs.n	8005340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532c:	4b13      	ldr	r3, [pc, #76]	@ (800537c <prvAddCurrentTaskToDelayedList+0xc0>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7ff f9d6 	bl	80046ea <vListInsert>
}
 800533e:	e010      	b.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005340:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0a      	ldr	r3, [pc, #40]	@ (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7ff f9cc 	bl	80046ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d202      	bcs.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800535c:	4a09      	ldr	r2, [pc, #36]	@ (8005384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6013      	str	r3, [r2, #0]
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200009fc 	.word	0x200009fc
 8005370:	200008f8 	.word	0x200008f8
 8005374:	20000a00 	.word	0x20000a00
 8005378:	200009e4 	.word	0x200009e4
 800537c:	200009b4 	.word	0x200009b4
 8005380:	200009b0 	.word	0x200009b0
 8005384:	20000a18 	.word	0x20000a18

08005388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b04      	subs	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b04      	subs	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053b8:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <pxPortInitialiseStack+0x64>)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b14      	subs	r3, #20
 80053c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f06f 0202 	mvn.w	r2, #2
 80053d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b20      	subs	r3, #32
 80053dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	080053f1 	.word	0x080053f1

080053f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fa:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <prvTaskExitError+0x58>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d00b      	beq.n	800541c <prvTaskExitError+0x2c>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <prvTaskExitError+0x28>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
}
 800542e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005430:	bf00      	nop
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0fc      	beq.n	8005432 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	2000000c 	.word	0x2000000c
 800544c:	00000000 	.word	0x00000000

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	@ (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a47      	ldr	r2, [pc, #284]	@ (80055c8 <xPortStartScheduler+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10b      	bne.n	80054c8 <xPortStartScheduler+0x28>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c8:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <xPortStartScheduler+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10b      	bne.n	80054ea <xPortStartScheduler+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	613b      	str	r3, [r7, #16]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xPortStartScheduler+0x130>)
 80054ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	22ff      	movs	r2, #255	@ 0xff
 80054fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <xPortStartScheduler+0x134>)
 8005510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005518:	e009      	b.n	800552e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800551a:	4b2f      	ldr	r3, [pc, #188]	@ (80055d8 <xPortStartScheduler+0x138>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d0ef      	beq.n	800551a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800553a:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <xPortStartScheduler+0x138>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00b      	beq.n	800555e <xPortStartScheduler+0xbe>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60bb      	str	r3, [r7, #8]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <xPortStartScheduler+0x138>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <xPortStartScheduler+0x13c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <xPortStartScheduler+0x13c>)
 8005582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005594:	f000 f8da 	bl	800574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <xPortStartScheduler+0x140>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800559e:	f000 f8f9 	bl	8005794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ae:	f7ff ff63 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b2:	f7ff fd43 	bl	800503c <vTaskSwitchContext>
	prvTaskExitError();
 80055b6:	f7ff ff1b 	bl	80053f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed00 	.word	0xe000ed00
 80055c8:	410fc271 	.word	0x410fc271
 80055cc:	410fc270 	.word	0x410fc270
 80055d0:	e000e400 	.word	0xe000e400
 80055d4:	20000a24 	.word	0x20000a24
 80055d8:	20000a28 	.word	0x20000a28
 80055dc:	e000ed20 	.word	0xe000ed20
 80055e0:	2000000c 	.word	0x2000000c
 80055e4:	e000ef34 	.word	0xe000ef34

080055e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <vPortEnterCritical+0x5c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a0e      	ldr	r2, [pc, #56]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800560c:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <vPortEnterCritical+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vPortEnterCritical+0x4e>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	603b      	str	r3, [r7, #0]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortEnterCritical+0x4a>
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	2000000c 	.word	0x2000000c
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <vPortExitCritical+0x26>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <vPortExitCritical+0x50>)
 800567a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vPortExitCritical+0x50>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <vPortExitCritical+0x44>
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800568e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	2000000c 	.word	0x2000000c

080056a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056a0:	f3ef 8009 	mrs	r0, PSP
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <pxCurrentTCBConst>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f01e 0f10 	tst.w	lr, #16
 80056b0:	bf08      	it	eq
 80056b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056c4:	f380 8811 	msr	BASEPRI, r0
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f7ff fcb4 	bl	800503c <vTaskSwitchContext>
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f380 8811 	msr	BASEPRI, r0
 80056dc:	bc09      	pop	{r0, r3}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f01e 0f10 	tst.w	lr, #16
 80056ea:	bf08      	it	eq
 80056ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056f0:	f380 8809 	msr	PSP, r0
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst>:
 8005700:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
}
 8005720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005722:	f7ff fbd1 	bl	8004ec8 <xTaskIncrementTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <SysTick_Handler+0x40>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f383 8811 	msr	BASEPRI, r3
}
 800573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <vPortSetupTimerInterrupt+0x40>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <vPortSetupTimerInterrupt+0x44>)
 800576a:	3b01      	subs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005770:	2207      	movs	r2, #7
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000000 	.word	0x20000000
 800578c:	10624dd3 	.word	0x10624dd3
 8005790:	e000e014 	.word	0xe000e014

08005794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057a4 <vPortEnableVFP+0x10>
 8005798:	6801      	ldr	r1, [r0, #0]
 800579a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800579e:	6001      	str	r1, [r0, #0]
 80057a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed88 	.word	0xe000ed88

080057a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	@ 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057b4:	f7ff fadc 	bl	8004d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057b8:	4b5c      	ldr	r3, [pc, #368]	@ (800592c <pvPortMalloc+0x184>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057c0:	f000 f924 	bl	8005a0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005930 <pvPortMalloc+0x188>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 8095 	bne.w	80058fc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01e      	beq.n	8005816 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d015      	beq.n	8005816 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <pvPortMalloc+0x6e>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d06f      	beq.n	80058fc <pvPortMalloc+0x154>
 800581c:	4b45      	ldr	r3, [pc, #276]	@ (8005934 <pvPortMalloc+0x18c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d86a      	bhi.n	80058fc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005826:	4b44      	ldr	r3, [pc, #272]	@ (8005938 <pvPortMalloc+0x190>)
 8005828:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800582a:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <pvPortMalloc+0x190>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005830:	e004      	b.n	800583c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d903      	bls.n	800584e <pvPortMalloc+0xa6>
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f1      	bne.n	8005832 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800584e:	4b37      	ldr	r3, [pc, #220]	@ (800592c <pvPortMalloc+0x184>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	429a      	cmp	r2, r3
 8005856:	d051      	beq.n	80058fc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	4413      	add	r3, r2
 8005860:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	1ad2      	subs	r2, r2, r3
 8005872:	2308      	movs	r3, #8
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	429a      	cmp	r2, r3
 8005878:	d920      	bls.n	80058bc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800587a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <pvPortMalloc+0xfc>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	613b      	str	r3, [r7, #16]
}
 800589e:	bf00      	nop
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b6:	69b8      	ldr	r0, [r7, #24]
 80058b8:	f000 f90a 	bl	8005ad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <pvPortMalloc+0x18c>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <pvPortMalloc+0x18c>)
 80058c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <pvPortMalloc+0x18c>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <pvPortMalloc+0x194>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d203      	bcs.n	80058de <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <pvPortMalloc+0x18c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a18      	ldr	r2, [pc, #96]	@ (800593c <pvPortMalloc+0x194>)
 80058dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <pvPortMalloc+0x188>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058f2:	4b13      	ldr	r3, [pc, #76]	@ (8005940 <pvPortMalloc+0x198>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <pvPortMalloc+0x198>)
 80058fa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058fc:	f7ff fa46 	bl	8004d8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <pvPortMalloc+0x17a>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	60fb      	str	r3, [r7, #12]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <pvPortMalloc+0x176>
	return pvReturn;
 8005922:	69fb      	ldr	r3, [r7, #28]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	@ 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	200015ec 	.word	0x200015ec
 8005930:	20001600 	.word	0x20001600
 8005934:	200015f0 	.word	0x200015f0
 8005938:	200015e4 	.word	0x200015e4
 800593c:	200015f4 	.word	0x200015f4
 8005940:	200015f8 	.word	0x200015f8

08005944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d04f      	beq.n	80059f6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005956:	2308      	movs	r3, #8
 8005958:	425b      	negs	r3, r3
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	4b25      	ldr	r3, [pc, #148]	@ (8005a00 <vPortFree+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <vPortFree+0x46>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60fb      	str	r3, [r7, #12]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <vPortFree+0x66>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <vPortFree+0xbc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01e      	beq.n	80059f6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11a      	bne.n	80059f6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <vPortFree+0xbc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059d0:	f7ff f9ce 	bl	8004d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a04 <vPortFree+0xc0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4413      	add	r3, r2
 80059de:	4a09      	ldr	r2, [pc, #36]	@ (8005a04 <vPortFree+0xc0>)
 80059e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059e2:	6938      	ldr	r0, [r7, #16]
 80059e4:	f000 f874 	bl	8005ad0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059e8:	4b07      	ldr	r3, [pc, #28]	@ (8005a08 <vPortFree+0xc4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a06      	ldr	r2, [pc, #24]	@ (8005a08 <vPortFree+0xc4>)
 80059f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059f2:	f7ff f9cb 	bl	8004d8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059f6:	bf00      	nop
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20001600 	.word	0x20001600
 8005a04:	200015f0 	.word	0x200015f0
 8005a08:	200015fc 	.word	0x200015fc

08005a0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a12:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005a16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a18:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <prvHeapInit+0xac>)
 8005a1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0307 	bic.w	r3, r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <prvHeapInit+0xac>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a44:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <prvHeapInit+0xb0>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <prvHeapInit+0xb0>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	1ad2      	subs	r2, r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <prvHeapInit+0xb4>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac4 <prvHeapInit+0xb8>)
 8005a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a09      	ldr	r2, [pc, #36]	@ (8005ac8 <prvHeapInit+0xbc>)
 8005aa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aa4:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <prvHeapInit+0xc0>)
 8005aa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005aaa:	601a      	str	r2, [r3, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	20000a2c 	.word	0x20000a2c
 8005abc:	200015e4 	.word	0x200015e4
 8005ac0:	200015ec 	.word	0x200015ec
 8005ac4:	200015f4 	.word	0x200015f4
 8005ac8:	200015f0 	.word	0x200015f0
 8005acc:	20001600 	.word	0x20001600

08005ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ad8:	4b28      	ldr	r3, [pc, #160]	@ (8005b7c <prvInsertBlockIntoFreeList+0xac>)
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e002      	b.n	8005ae4 <prvInsertBlockIntoFreeList+0x14>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d8f7      	bhi.n	8005ade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d108      	bne.n	8005b12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	441a      	add	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d118      	bne.n	8005b58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b15      	ldr	r3, [pc, #84]	@ (8005b80 <prvInsertBlockIntoFreeList+0xb0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d00d      	beq.n	8005b4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	e008      	b.n	8005b60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <prvInsertBlockIntoFreeList+0xb0>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e003      	b.n	8005b60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d002      	beq.n	8005b6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	200015e4 	.word	0x200015e4
 8005b80:	200015ec 	.word	0x200015ec

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b92:	6083      	str	r3, [r0, #8]
 8005b94:	8181      	strh	r1, [r0, #12]
 8005b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b98:	81c2      	strh	r2, [r0, #14]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	@ 0x5c
 8005ba2:	f000 f906 	bl	8005db2 <memset>
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <std+0x58>)
 8005ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <std+0x5c>)
 8005bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x60>)
 8005bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <std+0x64>)
 8005bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x68>)
 8005bb8:	6224      	str	r4, [r4, #32]
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d006      	beq.n	8005bcc <std+0x48>
 8005bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bc2:	4294      	cmp	r4, r2
 8005bc4:	d002      	beq.n	8005bcc <std+0x48>
 8005bc6:	33d0      	adds	r3, #208	@ 0xd0
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	d105      	bne.n	8005bd8 <std+0x54>
 8005bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f000 b9c4 	b.w	8005f60 <__retarget_lock_init_recursive>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	bf00      	nop
 8005bdc:	08005d2d 	.word	0x08005d2d
 8005be0:	08005d4f 	.word	0x08005d4f
 8005be4:	08005d87 	.word	0x08005d87
 8005be8:	08005dab 	.word	0x08005dab
 8005bec:	20001604 	.word	0x20001604

08005bf0 <stdio_exit_handler>:
 8005bf0:	4a02      	ldr	r2, [pc, #8]	@ (8005bfc <stdio_exit_handler+0xc>)
 8005bf2:	4903      	ldr	r1, [pc, #12]	@ (8005c00 <stdio_exit_handler+0x10>)
 8005bf4:	4803      	ldr	r0, [pc, #12]	@ (8005c04 <stdio_exit_handler+0x14>)
 8005bf6:	f000 b869 	b.w	8005ccc <_fwalk_sglue>
 8005bfa:	bf00      	nop
 8005bfc:	20000010 	.word	0x20000010
 8005c00:	080067fd 	.word	0x080067fd
 8005c04:	20000020 	.word	0x20000020

08005c08 <cleanup_stdio>:
 8005c08:	6841      	ldr	r1, [r0, #4]
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <cleanup_stdio+0x34>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	d001      	beq.n	8005c18 <cleanup_stdio+0x10>
 8005c14:	f000 fdf2 	bl	80067fc <_fflush_r>
 8005c18:	68a1      	ldr	r1, [r4, #8]
 8005c1a:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <cleanup_stdio+0x38>)
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <cleanup_stdio+0x1e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 fdeb 	bl	80067fc <_fflush_r>
 8005c26:	68e1      	ldr	r1, [r4, #12]
 8005c28:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <cleanup_stdio+0x3c>)
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d004      	beq.n	8005c38 <cleanup_stdio+0x30>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	f000 bde2 	b.w	80067fc <_fflush_r>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001604 	.word	0x20001604
 8005c40:	2000166c 	.word	0x2000166c
 8005c44:	200016d4 	.word	0x200016d4

08005c48 <global_stdio_init.part.0>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <global_stdio_init.part.0+0x30>)
 8005c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c7c <global_stdio_init.part.0+0x34>)
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <global_stdio_init.part.0+0x38>)
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	4620      	mov	r0, r4
 8005c54:	2200      	movs	r2, #0
 8005c56:	2104      	movs	r1, #4
 8005c58:	f7ff ff94 	bl	8005b84 <std>
 8005c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c60:	2201      	movs	r2, #1
 8005c62:	2109      	movs	r1, #9
 8005c64:	f7ff ff8e 	bl	8005b84 <std>
 8005c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff bf86 	b.w	8005b84 <std>
 8005c78:	2000173c 	.word	0x2000173c
 8005c7c:	20001604 	.word	0x20001604
 8005c80:	08005bf1 	.word	0x08005bf1

08005c84 <__sfp_lock_acquire>:
 8005c84:	4801      	ldr	r0, [pc, #4]	@ (8005c8c <__sfp_lock_acquire+0x8>)
 8005c86:	f000 b96c 	b.w	8005f62 <__retarget_lock_acquire_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	20001745 	.word	0x20001745

08005c90 <__sfp_lock_release>:
 8005c90:	4801      	ldr	r0, [pc, #4]	@ (8005c98 <__sfp_lock_release+0x8>)
 8005c92:	f000 b967 	b.w	8005f64 <__retarget_lock_release_recursive>
 8005c96:	bf00      	nop
 8005c98:	20001745 	.word	0x20001745

08005c9c <__sinit>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7ff fff0 	bl	8005c84 <__sfp_lock_acquire>
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	b11b      	cbz	r3, 8005cb0 <__sinit+0x14>
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cac:	f7ff bff0 	b.w	8005c90 <__sfp_lock_release>
 8005cb0:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <__sinit+0x28>)
 8005cb2:	6223      	str	r3, [r4, #32]
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <__sinit+0x2c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f5      	bne.n	8005ca8 <__sinit+0xc>
 8005cbc:	f7ff ffc4 	bl	8005c48 <global_stdio_init.part.0>
 8005cc0:	e7f2      	b.n	8005ca8 <__sinit+0xc>
 8005cc2:	bf00      	nop
 8005cc4:	08005c09 	.word	0x08005c09
 8005cc8:	2000173c 	.word	0x2000173c

08005ccc <_fwalk_sglue>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	4688      	mov	r8, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce0:	d505      	bpl.n	8005cee <_fwalk_sglue+0x22>
 8005ce2:	6824      	ldr	r4, [r4, #0]
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <_fwalk_sglue+0xc>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d907      	bls.n	8005d04 <_fwalk_sglue+0x38>
 8005cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	d003      	beq.n	8005d04 <_fwalk_sglue+0x38>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	4306      	orrs	r6, r0
 8005d04:	3568      	adds	r5, #104	@ 0x68
 8005d06:	e7e9      	b.n	8005cdc <_fwalk_sglue+0x10>

08005d08 <iprintf>:
 8005d08:	b40f      	push	{r0, r1, r2, r3}
 8005d0a:	b507      	push	{r0, r1, r2, lr}
 8005d0c:	4906      	ldr	r1, [pc, #24]	@ (8005d28 <iprintf+0x20>)
 8005d0e:	ab04      	add	r3, sp, #16
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d16:	6881      	ldr	r1, [r0, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f000 fa47 	bl	80061ac <_vfiprintf_r>
 8005d1e:	b003      	add	sp, #12
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	2000001c 	.word	0x2000001c

08005d2c <__sread>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	f000 f8c6 	bl	8005ec4 <_read_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	bfab      	itete	ge
 8005d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d40:	181b      	addge	r3, r3, r0
 8005d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d46:	bfac      	ite	ge
 8005d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d4a:	81a3      	strhlt	r3, [r4, #12]
 8005d4c:	bd10      	pop	{r4, pc}

08005d4e <__swrite>:
 8005d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	461f      	mov	r7, r3
 8005d54:	898b      	ldrh	r3, [r1, #12]
 8005d56:	05db      	lsls	r3, r3, #23
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	d505      	bpl.n	8005d6c <__swrite+0x1e>
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	2302      	movs	r3, #2
 8005d66:	2200      	movs	r2, #0
 8005d68:	f000 f89a 	bl	8005ea0 <_lseek_r>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	4632      	mov	r2, r6
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	f000 b8b1 	b.w	8005ee8 <_write_r>

08005d86 <__sseek>:
 8005d86:	b510      	push	{r4, lr}
 8005d88:	460c      	mov	r4, r1
 8005d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8e:	f000 f887 	bl	8005ea0 <_lseek_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	bf15      	itete	ne
 8005d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005da2:	81a3      	strheq	r3, [r4, #12]
 8005da4:	bf18      	it	ne
 8005da6:	81a3      	strhne	r3, [r4, #12]
 8005da8:	bd10      	pop	{r4, pc}

08005daa <__sclose>:
 8005daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dae:	f000 b809 	b.w	8005dc4 <_close_r>

08005db2 <memset>:
 8005db2:	4402      	add	r2, r0
 8005db4:	4603      	mov	r3, r0
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d100      	bne.n	8005dbc <memset+0xa>
 8005dba:	4770      	bx	lr
 8005dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc0:	e7f9      	b.n	8005db6 <memset+0x4>
	...

08005dc4 <_close_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	@ (8005de0 <_close_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fb f861 	bl	8000e96 <_close>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_close_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_close_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20001740 	.word	0x20001740

08005de4 <_reclaim_reent>:
 8005de4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e9c <_reclaim_reent+0xb8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4283      	cmp	r3, r0
 8005dea:	b570      	push	{r4, r5, r6, lr}
 8005dec:	4604      	mov	r4, r0
 8005dee:	d053      	beq.n	8005e98 <_reclaim_reent+0xb4>
 8005df0:	69c3      	ldr	r3, [r0, #28]
 8005df2:	b31b      	cbz	r3, 8005e3c <_reclaim_reent+0x58>
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	b163      	cbz	r3, 8005e12 <_reclaim_reent+0x2e>
 8005df8:	2500      	movs	r5, #0
 8005dfa:	69e3      	ldr	r3, [r4, #28]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	5959      	ldr	r1, [r3, r5]
 8005e00:	b9b1      	cbnz	r1, 8005e30 <_reclaim_reent+0x4c>
 8005e02:	3504      	adds	r5, #4
 8005e04:	2d80      	cmp	r5, #128	@ 0x80
 8005e06:	d1f8      	bne.n	8005dfa <_reclaim_reent+0x16>
 8005e08:	69e3      	ldr	r3, [r4, #28]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	f000 f8ab 	bl	8005f68 <_free_r>
 8005e12:	69e3      	ldr	r3, [r4, #28]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	b111      	cbz	r1, 8005e1e <_reclaim_reent+0x3a>
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f8a5 	bl	8005f68 <_free_r>
 8005e1e:	69e3      	ldr	r3, [r4, #28]
 8005e20:	689d      	ldr	r5, [r3, #8]
 8005e22:	b15d      	cbz	r5, 8005e3c <_reclaim_reent+0x58>
 8005e24:	4629      	mov	r1, r5
 8005e26:	4620      	mov	r0, r4
 8005e28:	682d      	ldr	r5, [r5, #0]
 8005e2a:	f000 f89d 	bl	8005f68 <_free_r>
 8005e2e:	e7f8      	b.n	8005e22 <_reclaim_reent+0x3e>
 8005e30:	680e      	ldr	r6, [r1, #0]
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 f898 	bl	8005f68 <_free_r>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	e7e1      	b.n	8005e00 <_reclaim_reent+0x1c>
 8005e3c:	6961      	ldr	r1, [r4, #20]
 8005e3e:	b111      	cbz	r1, 8005e46 <_reclaim_reent+0x62>
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 f891 	bl	8005f68 <_free_r>
 8005e46:	69e1      	ldr	r1, [r4, #28]
 8005e48:	b111      	cbz	r1, 8005e50 <_reclaim_reent+0x6c>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 f88c 	bl	8005f68 <_free_r>
 8005e50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e52:	b111      	cbz	r1, 8005e5a <_reclaim_reent+0x76>
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 f887 	bl	8005f68 <_free_r>
 8005e5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e5c:	b111      	cbz	r1, 8005e64 <_reclaim_reent+0x80>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f882 	bl	8005f68 <_free_r>
 8005e64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e66:	b111      	cbz	r1, 8005e6e <_reclaim_reent+0x8a>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 f87d 	bl	8005f68 <_free_r>
 8005e6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005e70:	b111      	cbz	r1, 8005e78 <_reclaim_reent+0x94>
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 f878 	bl	8005f68 <_free_r>
 8005e78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005e7a:	b111      	cbz	r1, 8005e82 <_reclaim_reent+0x9e>
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 f873 	bl	8005f68 <_free_r>
 8005e82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e84:	b111      	cbz	r1, 8005e8c <_reclaim_reent+0xa8>
 8005e86:	4620      	mov	r0, r4
 8005e88:	f000 f86e 	bl	8005f68 <_free_r>
 8005e8c:	6a23      	ldr	r3, [r4, #32]
 8005e8e:	b11b      	cbz	r3, 8005e98 <_reclaim_reent+0xb4>
 8005e90:	4620      	mov	r0, r4
 8005e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e96:	4718      	bx	r3
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000001c 	.word	0x2000001c

08005ea0 <_lseek_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d07      	ldr	r5, [pc, #28]	@ (8005ec0 <_lseek_r+0x20>)
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fb f818 	bl	8000ee4 <_lseek>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_lseek_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_lseek_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20001740 	.word	0x20001740

08005ec4 <_read_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	@ (8005ee4 <_read_r+0x20>)
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fa ffc2 	bl	8000e5c <_read>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_read_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_read_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20001740 	.word	0x20001740

08005ee8 <_write_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d07      	ldr	r5, [pc, #28]	@ (8005f08 <_write_r+0x20>)
 8005eec:	4604      	mov	r4, r0
 8005eee:	4608      	mov	r0, r1
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7fa fba1 	bl	800063e <_write>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_write_r+0x1e>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_write_r+0x1e>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	20001740 	.word	0x20001740

08005f0c <__errno>:
 8005f0c:	4b01      	ldr	r3, [pc, #4]	@ (8005f14 <__errno+0x8>)
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	2000001c 	.word	0x2000001c

08005f18 <__libc_init_array>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f50 <__libc_init_array+0x38>)
 8005f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f54 <__libc_init_array+0x3c>)
 8005f1e:	1b64      	subs	r4, r4, r5
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	2600      	movs	r6, #0
 8005f24:	42a6      	cmp	r6, r4
 8005f26:	d109      	bne.n	8005f3c <__libc_init_array+0x24>
 8005f28:	4d0b      	ldr	r5, [pc, #44]	@ (8005f58 <__libc_init_array+0x40>)
 8005f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f5c <__libc_init_array+0x44>)
 8005f2c:	f000 fdb6 	bl	8006a9c <_init>
 8005f30:	1b64      	subs	r4, r4, r5
 8005f32:	10a4      	asrs	r4, r4, #2
 8005f34:	2600      	movs	r6, #0
 8005f36:	42a6      	cmp	r6, r4
 8005f38:	d105      	bne.n	8005f46 <__libc_init_array+0x2e>
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f40:	4798      	blx	r3
 8005f42:	3601      	adds	r6, #1
 8005f44:	e7ee      	b.n	8005f24 <__libc_init_array+0xc>
 8005f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4a:	4798      	blx	r3
 8005f4c:	3601      	adds	r6, #1
 8005f4e:	e7f2      	b.n	8005f36 <__libc_init_array+0x1e>
 8005f50:	08006c48 	.word	0x08006c48
 8005f54:	08006c48 	.word	0x08006c48
 8005f58:	08006c48 	.word	0x08006c48
 8005f5c:	08006c4c 	.word	0x08006c4c

08005f60 <__retarget_lock_init_recursive>:
 8005f60:	4770      	bx	lr

08005f62 <__retarget_lock_acquire_recursive>:
 8005f62:	4770      	bx	lr

08005f64 <__retarget_lock_release_recursive>:
 8005f64:	4770      	bx	lr
	...

08005f68 <_free_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4605      	mov	r5, r0
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d041      	beq.n	8005ff4 <_free_r+0x8c>
 8005f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f74:	1f0c      	subs	r4, r1, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfb8      	it	lt
 8005f7a:	18e4      	addlt	r4, r4, r3
 8005f7c:	f000 f8e0 	bl	8006140 <__malloc_lock>
 8005f80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff8 <_free_r+0x90>)
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	b933      	cbnz	r3, 8005f94 <_free_r+0x2c>
 8005f86:	6063      	str	r3, [r4, #4]
 8005f88:	6014      	str	r4, [r2, #0]
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f90:	f000 b8dc 	b.w	800614c <__malloc_unlock>
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d908      	bls.n	8005faa <_free_r+0x42>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428b      	cmp	r3, r1
 8005f9e:	bf01      	itttt	eq
 8005fa0:	6819      	ldreq	r1, [r3, #0]
 8005fa2:	685b      	ldreq	r3, [r3, #4]
 8005fa4:	1809      	addeq	r1, r1, r0
 8005fa6:	6021      	streq	r1, [r4, #0]
 8005fa8:	e7ed      	b.n	8005f86 <_free_r+0x1e>
 8005faa:	461a      	mov	r2, r3
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b10b      	cbz	r3, 8005fb4 <_free_r+0x4c>
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	d9fa      	bls.n	8005faa <_free_r+0x42>
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	1850      	adds	r0, r2, r1
 8005fb8:	42a0      	cmp	r0, r4
 8005fba:	d10b      	bne.n	8005fd4 <_free_r+0x6c>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	4401      	add	r1, r0
 8005fc0:	1850      	adds	r0, r2, r1
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	6011      	str	r1, [r2, #0]
 8005fc6:	d1e0      	bne.n	8005f8a <_free_r+0x22>
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	4408      	add	r0, r1
 8005fd0:	6010      	str	r0, [r2, #0]
 8005fd2:	e7da      	b.n	8005f8a <_free_r+0x22>
 8005fd4:	d902      	bls.n	8005fdc <_free_r+0x74>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	e7d6      	b.n	8005f8a <_free_r+0x22>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	1821      	adds	r1, r4, r0
 8005fe0:	428b      	cmp	r3, r1
 8005fe2:	bf04      	itt	eq
 8005fe4:	6819      	ldreq	r1, [r3, #0]
 8005fe6:	685b      	ldreq	r3, [r3, #4]
 8005fe8:	6063      	str	r3, [r4, #4]
 8005fea:	bf04      	itt	eq
 8005fec:	1809      	addeq	r1, r1, r0
 8005fee:	6021      	streq	r1, [r4, #0]
 8005ff0:	6054      	str	r4, [r2, #4]
 8005ff2:	e7ca      	b.n	8005f8a <_free_r+0x22>
 8005ff4:	bd38      	pop	{r3, r4, r5, pc}
 8005ff6:	bf00      	nop
 8005ff8:	2000174c 	.word	0x2000174c

08005ffc <sbrk_aligned>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800603c <sbrk_aligned+0x40>)
 8006000:	460c      	mov	r4, r1
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	4605      	mov	r5, r0
 8006006:	b911      	cbnz	r1, 800600e <sbrk_aligned+0x12>
 8006008:	f000 fcb4 	bl	8006974 <_sbrk_r>
 800600c:	6030      	str	r0, [r6, #0]
 800600e:	4621      	mov	r1, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fcaf 	bl	8006974 <_sbrk_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d103      	bne.n	8006022 <sbrk_aligned+0x26>
 800601a:	f04f 34ff 	mov.w	r4, #4294967295
 800601e:	4620      	mov	r0, r4
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	1cc4      	adds	r4, r0, #3
 8006024:	f024 0403 	bic.w	r4, r4, #3
 8006028:	42a0      	cmp	r0, r4
 800602a:	d0f8      	beq.n	800601e <sbrk_aligned+0x22>
 800602c:	1a21      	subs	r1, r4, r0
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fca0 	bl	8006974 <_sbrk_r>
 8006034:	3001      	adds	r0, #1
 8006036:	d1f2      	bne.n	800601e <sbrk_aligned+0x22>
 8006038:	e7ef      	b.n	800601a <sbrk_aligned+0x1e>
 800603a:	bf00      	nop
 800603c:	20001748 	.word	0x20001748

08006040 <_malloc_r>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	1ccd      	adds	r5, r1, #3
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	2d00      	cmp	r5, #0
 8006054:	4606      	mov	r6, r0
 8006056:	db01      	blt.n	800605c <_malloc_r+0x1c>
 8006058:	42a9      	cmp	r1, r5
 800605a:	d904      	bls.n	8006066 <_malloc_r+0x26>
 800605c:	230c      	movs	r3, #12
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800613c <_malloc_r+0xfc>
 800606a:	f000 f869 	bl	8006140 <__malloc_lock>
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	461c      	mov	r4, r3
 8006074:	bb44      	cbnz	r4, 80060c8 <_malloc_r+0x88>
 8006076:	4629      	mov	r1, r5
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffbf 	bl	8005ffc <sbrk_aligned>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	4604      	mov	r4, r0
 8006082:	d158      	bne.n	8006136 <_malloc_r+0xf6>
 8006084:	f8d8 4000 	ldr.w	r4, [r8]
 8006088:	4627      	mov	r7, r4
 800608a:	2f00      	cmp	r7, #0
 800608c:	d143      	bne.n	8006116 <_malloc_r+0xd6>
 800608e:	2c00      	cmp	r4, #0
 8006090:	d04b      	beq.n	800612a <_malloc_r+0xea>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4639      	mov	r1, r7
 8006096:	4630      	mov	r0, r6
 8006098:	eb04 0903 	add.w	r9, r4, r3
 800609c:	f000 fc6a 	bl	8006974 <_sbrk_r>
 80060a0:	4581      	cmp	r9, r0
 80060a2:	d142      	bne.n	800612a <_malloc_r+0xea>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	1a6d      	subs	r5, r5, r1
 80060a8:	4629      	mov	r1, r5
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ffa6 	bl	8005ffc <sbrk_aligned>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d03a      	beq.n	800612a <_malloc_r+0xea>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	442b      	add	r3, r5
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	f8d8 3000 	ldr.w	r3, [r8]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	bb62      	cbnz	r2, 800611c <_malloc_r+0xdc>
 80060c2:	f8c8 7000 	str.w	r7, [r8]
 80060c6:	e00f      	b.n	80060e8 <_malloc_r+0xa8>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	1b52      	subs	r2, r2, r5
 80060cc:	d420      	bmi.n	8006110 <_malloc_r+0xd0>
 80060ce:	2a0b      	cmp	r2, #11
 80060d0:	d917      	bls.n	8006102 <_malloc_r+0xc2>
 80060d2:	1961      	adds	r1, r4, r5
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	6025      	str	r5, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	6059      	strne	r1, [r3, #4]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	bf08      	it	eq
 80060e0:	f8c8 1000 	streq.w	r1, [r8]
 80060e4:	5162      	str	r2, [r4, r5]
 80060e6:	604b      	str	r3, [r1, #4]
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 f82f 	bl	800614c <__malloc_unlock>
 80060ee:	f104 000b 	add.w	r0, r4, #11
 80060f2:	1d23      	adds	r3, r4, #4
 80060f4:	f020 0007 	bic.w	r0, r0, #7
 80060f8:	1ac2      	subs	r2, r0, r3
 80060fa:	bf1c      	itt	ne
 80060fc:	1a1b      	subne	r3, r3, r0
 80060fe:	50a3      	strne	r3, [r4, r2]
 8006100:	e7af      	b.n	8006062 <_malloc_r+0x22>
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	42a3      	cmp	r3, r4
 8006106:	bf0c      	ite	eq
 8006108:	f8c8 2000 	streq.w	r2, [r8]
 800610c:	605a      	strne	r2, [r3, #4]
 800610e:	e7eb      	b.n	80060e8 <_malloc_r+0xa8>
 8006110:	4623      	mov	r3, r4
 8006112:	6864      	ldr	r4, [r4, #4]
 8006114:	e7ae      	b.n	8006074 <_malloc_r+0x34>
 8006116:	463c      	mov	r4, r7
 8006118:	687f      	ldr	r7, [r7, #4]
 800611a:	e7b6      	b.n	800608a <_malloc_r+0x4a>
 800611c:	461a      	mov	r2, r3
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	42a3      	cmp	r3, r4
 8006122:	d1fb      	bne.n	800611c <_malloc_r+0xdc>
 8006124:	2300      	movs	r3, #0
 8006126:	6053      	str	r3, [r2, #4]
 8006128:	e7de      	b.n	80060e8 <_malloc_r+0xa8>
 800612a:	230c      	movs	r3, #12
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f80c 	bl	800614c <__malloc_unlock>
 8006134:	e794      	b.n	8006060 <_malloc_r+0x20>
 8006136:	6005      	str	r5, [r0, #0]
 8006138:	e7d6      	b.n	80060e8 <_malloc_r+0xa8>
 800613a:	bf00      	nop
 800613c:	2000174c 	.word	0x2000174c

08006140 <__malloc_lock>:
 8006140:	4801      	ldr	r0, [pc, #4]	@ (8006148 <__malloc_lock+0x8>)
 8006142:	f7ff bf0e 	b.w	8005f62 <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	20001744 	.word	0x20001744

0800614c <__malloc_unlock>:
 800614c:	4801      	ldr	r0, [pc, #4]	@ (8006154 <__malloc_unlock+0x8>)
 800614e:	f7ff bf09 	b.w	8005f64 <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	20001744 	.word	0x20001744

08006158 <__sfputc_r>:
 8006158:	6893      	ldr	r3, [r2, #8]
 800615a:	3b01      	subs	r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	b410      	push	{r4}
 8006160:	6093      	str	r3, [r2, #8]
 8006162:	da08      	bge.n	8006176 <__sfputc_r+0x1e>
 8006164:	6994      	ldr	r4, [r2, #24]
 8006166:	42a3      	cmp	r3, r4
 8006168:	db01      	blt.n	800616e <__sfputc_r+0x16>
 800616a:	290a      	cmp	r1, #10
 800616c:	d103      	bne.n	8006176 <__sfputc_r+0x1e>
 800616e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006172:	f000 bb6b 	b.w	800684c <__swbuf_r>
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	1c58      	adds	r0, r3, #1
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	7019      	strb	r1, [r3, #0]
 800617e:	4608      	mov	r0, r1
 8006180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006184:	4770      	bx	lr

08006186 <__sfputs_r>:
 8006186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006188:	4606      	mov	r6, r0
 800618a:	460f      	mov	r7, r1
 800618c:	4614      	mov	r4, r2
 800618e:	18d5      	adds	r5, r2, r3
 8006190:	42ac      	cmp	r4, r5
 8006192:	d101      	bne.n	8006198 <__sfputs_r+0x12>
 8006194:	2000      	movs	r0, #0
 8006196:	e007      	b.n	80061a8 <__sfputs_r+0x22>
 8006198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800619c:	463a      	mov	r2, r7
 800619e:	4630      	mov	r0, r6
 80061a0:	f7ff ffda 	bl	8006158 <__sfputc_r>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d1f3      	bne.n	8006190 <__sfputs_r+0xa>
 80061a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061ac <_vfiprintf_r>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	460d      	mov	r5, r1
 80061b2:	b09d      	sub	sp, #116	@ 0x74
 80061b4:	4614      	mov	r4, r2
 80061b6:	4698      	mov	r8, r3
 80061b8:	4606      	mov	r6, r0
 80061ba:	b118      	cbz	r0, 80061c4 <_vfiprintf_r+0x18>
 80061bc:	6a03      	ldr	r3, [r0, #32]
 80061be:	b90b      	cbnz	r3, 80061c4 <_vfiprintf_r+0x18>
 80061c0:	f7ff fd6c 	bl	8005c9c <__sinit>
 80061c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061c6:	07d9      	lsls	r1, r3, #31
 80061c8:	d405      	bmi.n	80061d6 <_vfiprintf_r+0x2a>
 80061ca:	89ab      	ldrh	r3, [r5, #12]
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_vfiprintf_r+0x2a>
 80061d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061d2:	f7ff fec6 	bl	8005f62 <__retarget_lock_acquire_recursive>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	d501      	bpl.n	80061e0 <_vfiprintf_r+0x34>
 80061dc:	692b      	ldr	r3, [r5, #16]
 80061de:	b99b      	cbnz	r3, 8006208 <_vfiprintf_r+0x5c>
 80061e0:	4629      	mov	r1, r5
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fb70 	bl	80068c8 <__swsetup_r>
 80061e8:	b170      	cbz	r0, 8006208 <_vfiprintf_r+0x5c>
 80061ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061ec:	07dc      	lsls	r4, r3, #31
 80061ee:	d504      	bpl.n	80061fa <_vfiprintf_r+0x4e>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b01d      	add	sp, #116	@ 0x74
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	0598      	lsls	r0, r3, #22
 80061fe:	d4f7      	bmi.n	80061f0 <_vfiprintf_r+0x44>
 8006200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006202:	f7ff feaf 	bl	8005f64 <__retarget_lock_release_recursive>
 8006206:	e7f3      	b.n	80061f0 <_vfiprintf_r+0x44>
 8006208:	2300      	movs	r3, #0
 800620a:	9309      	str	r3, [sp, #36]	@ 0x24
 800620c:	2320      	movs	r3, #32
 800620e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006212:	f8cd 800c 	str.w	r8, [sp, #12]
 8006216:	2330      	movs	r3, #48	@ 0x30
 8006218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063c8 <_vfiprintf_r+0x21c>
 800621c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006220:	f04f 0901 	mov.w	r9, #1
 8006224:	4623      	mov	r3, r4
 8006226:	469a      	mov	sl, r3
 8006228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800622c:	b10a      	cbz	r2, 8006232 <_vfiprintf_r+0x86>
 800622e:	2a25      	cmp	r2, #37	@ 0x25
 8006230:	d1f9      	bne.n	8006226 <_vfiprintf_r+0x7a>
 8006232:	ebba 0b04 	subs.w	fp, sl, r4
 8006236:	d00b      	beq.n	8006250 <_vfiprintf_r+0xa4>
 8006238:	465b      	mov	r3, fp
 800623a:	4622      	mov	r2, r4
 800623c:	4629      	mov	r1, r5
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ffa1 	bl	8006186 <__sfputs_r>
 8006244:	3001      	adds	r0, #1
 8006246:	f000 80a7 	beq.w	8006398 <_vfiprintf_r+0x1ec>
 800624a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800624c:	445a      	add	r2, fp
 800624e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006250:	f89a 3000 	ldrb.w	r3, [sl]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 809f 	beq.w	8006398 <_vfiprintf_r+0x1ec>
 800625a:	2300      	movs	r3, #0
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006264:	f10a 0a01 	add.w	sl, sl, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9307      	str	r3, [sp, #28]
 800626c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006270:	931a      	str	r3, [sp, #104]	@ 0x68
 8006272:	4654      	mov	r4, sl
 8006274:	2205      	movs	r2, #5
 8006276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800627a:	4853      	ldr	r0, [pc, #332]	@ (80063c8 <_vfiprintf_r+0x21c>)
 800627c:	f7f9 ffb8 	bl	80001f0 <memchr>
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	b9d8      	cbnz	r0, 80062bc <_vfiprintf_r+0x110>
 8006284:	06d1      	lsls	r1, r2, #27
 8006286:	bf44      	itt	mi
 8006288:	2320      	movmi	r3, #32
 800628a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800628e:	0713      	lsls	r3, r2, #28
 8006290:	bf44      	itt	mi
 8006292:	232b      	movmi	r3, #43	@ 0x2b
 8006294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006298:	f89a 3000 	ldrb.w	r3, [sl]
 800629c:	2b2a      	cmp	r3, #42	@ 0x2a
 800629e:	d015      	beq.n	80062cc <_vfiprintf_r+0x120>
 80062a0:	9a07      	ldr	r2, [sp, #28]
 80062a2:	4654      	mov	r4, sl
 80062a4:	2000      	movs	r0, #0
 80062a6:	f04f 0c0a 	mov.w	ip, #10
 80062aa:	4621      	mov	r1, r4
 80062ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062b0:	3b30      	subs	r3, #48	@ 0x30
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	d94b      	bls.n	800634e <_vfiprintf_r+0x1a2>
 80062b6:	b1b0      	cbz	r0, 80062e6 <_vfiprintf_r+0x13a>
 80062b8:	9207      	str	r2, [sp, #28]
 80062ba:	e014      	b.n	80062e6 <_vfiprintf_r+0x13a>
 80062bc:	eba0 0308 	sub.w	r3, r0, r8
 80062c0:	fa09 f303 	lsl.w	r3, r9, r3
 80062c4:	4313      	orrs	r3, r2
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	46a2      	mov	sl, r4
 80062ca:	e7d2      	b.n	8006272 <_vfiprintf_r+0xc6>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	1d19      	adds	r1, r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	9103      	str	r1, [sp, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfbb      	ittet	lt
 80062d8:	425b      	neglt	r3, r3
 80062da:	f042 0202 	orrlt.w	r2, r2, #2
 80062de:	9307      	strge	r3, [sp, #28]
 80062e0:	9307      	strlt	r3, [sp, #28]
 80062e2:	bfb8      	it	lt
 80062e4:	9204      	strlt	r2, [sp, #16]
 80062e6:	7823      	ldrb	r3, [r4, #0]
 80062e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ea:	d10a      	bne.n	8006302 <_vfiprintf_r+0x156>
 80062ec:	7863      	ldrb	r3, [r4, #1]
 80062ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f0:	d132      	bne.n	8006358 <_vfiprintf_r+0x1ac>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	9203      	str	r2, [sp, #12]
 80062fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062fe:	3402      	adds	r4, #2
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063d8 <_vfiprintf_r+0x22c>
 8006306:	7821      	ldrb	r1, [r4, #0]
 8006308:	2203      	movs	r2, #3
 800630a:	4650      	mov	r0, sl
 800630c:	f7f9 ff70 	bl	80001f0 <memchr>
 8006310:	b138      	cbz	r0, 8006322 <_vfiprintf_r+0x176>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	eba0 000a 	sub.w	r0, r0, sl
 8006318:	2240      	movs	r2, #64	@ 0x40
 800631a:	4082      	lsls	r2, r0
 800631c:	4313      	orrs	r3, r2
 800631e:	3401      	adds	r4, #1
 8006320:	9304      	str	r3, [sp, #16]
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4829      	ldr	r0, [pc, #164]	@ (80063cc <_vfiprintf_r+0x220>)
 8006328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800632c:	2206      	movs	r2, #6
 800632e:	f7f9 ff5f 	bl	80001f0 <memchr>
 8006332:	2800      	cmp	r0, #0
 8006334:	d03f      	beq.n	80063b6 <_vfiprintf_r+0x20a>
 8006336:	4b26      	ldr	r3, [pc, #152]	@ (80063d0 <_vfiprintf_r+0x224>)
 8006338:	bb1b      	cbnz	r3, 8006382 <_vfiprintf_r+0x1d6>
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	3307      	adds	r3, #7
 800633e:	f023 0307 	bic.w	r3, r3, #7
 8006342:	3308      	adds	r3, #8
 8006344:	9303      	str	r3, [sp, #12]
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	443b      	add	r3, r7
 800634a:	9309      	str	r3, [sp, #36]	@ 0x24
 800634c:	e76a      	b.n	8006224 <_vfiprintf_r+0x78>
 800634e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006352:	460c      	mov	r4, r1
 8006354:	2001      	movs	r0, #1
 8006356:	e7a8      	b.n	80062aa <_vfiprintf_r+0xfe>
 8006358:	2300      	movs	r3, #0
 800635a:	3401      	adds	r4, #1
 800635c:	9305      	str	r3, [sp, #20]
 800635e:	4619      	mov	r1, r3
 8006360:	f04f 0c0a 	mov.w	ip, #10
 8006364:	4620      	mov	r0, r4
 8006366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800636a:	3a30      	subs	r2, #48	@ 0x30
 800636c:	2a09      	cmp	r2, #9
 800636e:	d903      	bls.n	8006378 <_vfiprintf_r+0x1cc>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0c6      	beq.n	8006302 <_vfiprintf_r+0x156>
 8006374:	9105      	str	r1, [sp, #20]
 8006376:	e7c4      	b.n	8006302 <_vfiprintf_r+0x156>
 8006378:	fb0c 2101 	mla	r1, ip, r1, r2
 800637c:	4604      	mov	r4, r0
 800637e:	2301      	movs	r3, #1
 8006380:	e7f0      	b.n	8006364 <_vfiprintf_r+0x1b8>
 8006382:	ab03      	add	r3, sp, #12
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	462a      	mov	r2, r5
 8006388:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <_vfiprintf_r+0x228>)
 800638a:	a904      	add	r1, sp, #16
 800638c:	4630      	mov	r0, r6
 800638e:	f3af 8000 	nop.w
 8006392:	4607      	mov	r7, r0
 8006394:	1c78      	adds	r0, r7, #1
 8006396:	d1d6      	bne.n	8006346 <_vfiprintf_r+0x19a>
 8006398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800639a:	07d9      	lsls	r1, r3, #31
 800639c:	d405      	bmi.n	80063aa <_vfiprintf_r+0x1fe>
 800639e:	89ab      	ldrh	r3, [r5, #12]
 80063a0:	059a      	lsls	r2, r3, #22
 80063a2:	d402      	bmi.n	80063aa <_vfiprintf_r+0x1fe>
 80063a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063a6:	f7ff fddd 	bl	8005f64 <__retarget_lock_release_recursive>
 80063aa:	89ab      	ldrh	r3, [r5, #12]
 80063ac:	065b      	lsls	r3, r3, #25
 80063ae:	f53f af1f 	bmi.w	80061f0 <_vfiprintf_r+0x44>
 80063b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063b4:	e71e      	b.n	80061f4 <_vfiprintf_r+0x48>
 80063b6:	ab03      	add	r3, sp, #12
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	462a      	mov	r2, r5
 80063bc:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <_vfiprintf_r+0x228>)
 80063be:	a904      	add	r1, sp, #16
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f879 	bl	80064b8 <_printf_i>
 80063c6:	e7e4      	b.n	8006392 <_vfiprintf_r+0x1e6>
 80063c8:	08006c0c 	.word	0x08006c0c
 80063cc:	08006c16 	.word	0x08006c16
 80063d0:	00000000 	.word	0x00000000
 80063d4:	08006187 	.word	0x08006187
 80063d8:	08006c12 	.word	0x08006c12

080063dc <_printf_common>:
 80063dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e0:	4616      	mov	r6, r2
 80063e2:	4698      	mov	r8, r3
 80063e4:	688a      	ldr	r2, [r1, #8]
 80063e6:	690b      	ldr	r3, [r1, #16]
 80063e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063ec:	4293      	cmp	r3, r2
 80063ee:	bfb8      	it	lt
 80063f0:	4613      	movlt	r3, r2
 80063f2:	6033      	str	r3, [r6, #0]
 80063f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063f8:	4607      	mov	r7, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b10a      	cbz	r2, 8006402 <_printf_common+0x26>
 80063fe:	3301      	adds	r3, #1
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	0699      	lsls	r1, r3, #26
 8006406:	bf42      	ittt	mi
 8006408:	6833      	ldrmi	r3, [r6, #0]
 800640a:	3302      	addmi	r3, #2
 800640c:	6033      	strmi	r3, [r6, #0]
 800640e:	6825      	ldr	r5, [r4, #0]
 8006410:	f015 0506 	ands.w	r5, r5, #6
 8006414:	d106      	bne.n	8006424 <_printf_common+0x48>
 8006416:	f104 0a19 	add.w	sl, r4, #25
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	6832      	ldr	r2, [r6, #0]
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	42ab      	cmp	r3, r5
 8006422:	dc26      	bgt.n	8006472 <_printf_common+0x96>
 8006424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006428:	6822      	ldr	r2, [r4, #0]
 800642a:	3b00      	subs	r3, #0
 800642c:	bf18      	it	ne
 800642e:	2301      	movne	r3, #1
 8006430:	0692      	lsls	r2, r2, #26
 8006432:	d42b      	bmi.n	800648c <_printf_common+0xb0>
 8006434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006438:	4641      	mov	r1, r8
 800643a:	4638      	mov	r0, r7
 800643c:	47c8      	blx	r9
 800643e:	3001      	adds	r0, #1
 8006440:	d01e      	beq.n	8006480 <_printf_common+0xa4>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6922      	ldr	r2, [r4, #16]
 8006446:	f003 0306 	and.w	r3, r3, #6
 800644a:	2b04      	cmp	r3, #4
 800644c:	bf02      	ittt	eq
 800644e:	68e5      	ldreq	r5, [r4, #12]
 8006450:	6833      	ldreq	r3, [r6, #0]
 8006452:	1aed      	subeq	r5, r5, r3
 8006454:	68a3      	ldr	r3, [r4, #8]
 8006456:	bf0c      	ite	eq
 8006458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800645c:	2500      	movne	r5, #0
 800645e:	4293      	cmp	r3, r2
 8006460:	bfc4      	itt	gt
 8006462:	1a9b      	subgt	r3, r3, r2
 8006464:	18ed      	addgt	r5, r5, r3
 8006466:	2600      	movs	r6, #0
 8006468:	341a      	adds	r4, #26
 800646a:	42b5      	cmp	r5, r6
 800646c:	d11a      	bne.n	80064a4 <_printf_common+0xc8>
 800646e:	2000      	movs	r0, #0
 8006470:	e008      	b.n	8006484 <_printf_common+0xa8>
 8006472:	2301      	movs	r3, #1
 8006474:	4652      	mov	r2, sl
 8006476:	4641      	mov	r1, r8
 8006478:	4638      	mov	r0, r7
 800647a:	47c8      	blx	r9
 800647c:	3001      	adds	r0, #1
 800647e:	d103      	bne.n	8006488 <_printf_common+0xac>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	3501      	adds	r5, #1
 800648a:	e7c6      	b.n	800641a <_printf_common+0x3e>
 800648c:	18e1      	adds	r1, r4, r3
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	2030      	movs	r0, #48	@ 0x30
 8006492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006496:	4422      	add	r2, r4
 8006498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800649c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064a0:	3302      	adds	r3, #2
 80064a2:	e7c7      	b.n	8006434 <_printf_common+0x58>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4622      	mov	r2, r4
 80064a8:	4641      	mov	r1, r8
 80064aa:	4638      	mov	r0, r7
 80064ac:	47c8      	blx	r9
 80064ae:	3001      	adds	r0, #1
 80064b0:	d0e6      	beq.n	8006480 <_printf_common+0xa4>
 80064b2:	3601      	adds	r6, #1
 80064b4:	e7d9      	b.n	800646a <_printf_common+0x8e>
	...

080064b8 <_printf_i>:
 80064b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	7e0f      	ldrb	r7, [r1, #24]
 80064be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064c0:	2f78      	cmp	r7, #120	@ 0x78
 80064c2:	4691      	mov	r9, r2
 80064c4:	4680      	mov	r8, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	469a      	mov	sl, r3
 80064ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064ce:	d807      	bhi.n	80064e0 <_printf_i+0x28>
 80064d0:	2f62      	cmp	r7, #98	@ 0x62
 80064d2:	d80a      	bhi.n	80064ea <_printf_i+0x32>
 80064d4:	2f00      	cmp	r7, #0
 80064d6:	f000 80d1 	beq.w	800667c <_printf_i+0x1c4>
 80064da:	2f58      	cmp	r7, #88	@ 0x58
 80064dc:	f000 80b8 	beq.w	8006650 <_printf_i+0x198>
 80064e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064e8:	e03a      	b.n	8006560 <_printf_i+0xa8>
 80064ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064ee:	2b15      	cmp	r3, #21
 80064f0:	d8f6      	bhi.n	80064e0 <_printf_i+0x28>
 80064f2:	a101      	add	r1, pc, #4	@ (adr r1, 80064f8 <_printf_i+0x40>)
 80064f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f8:	08006551 	.word	0x08006551
 80064fc:	08006565 	.word	0x08006565
 8006500:	080064e1 	.word	0x080064e1
 8006504:	080064e1 	.word	0x080064e1
 8006508:	080064e1 	.word	0x080064e1
 800650c:	080064e1 	.word	0x080064e1
 8006510:	08006565 	.word	0x08006565
 8006514:	080064e1 	.word	0x080064e1
 8006518:	080064e1 	.word	0x080064e1
 800651c:	080064e1 	.word	0x080064e1
 8006520:	080064e1 	.word	0x080064e1
 8006524:	08006663 	.word	0x08006663
 8006528:	0800658f 	.word	0x0800658f
 800652c:	0800661d 	.word	0x0800661d
 8006530:	080064e1 	.word	0x080064e1
 8006534:	080064e1 	.word	0x080064e1
 8006538:	08006685 	.word	0x08006685
 800653c:	080064e1 	.word	0x080064e1
 8006540:	0800658f 	.word	0x0800658f
 8006544:	080064e1 	.word	0x080064e1
 8006548:	080064e1 	.word	0x080064e1
 800654c:	08006625 	.word	0x08006625
 8006550:	6833      	ldr	r3, [r6, #0]
 8006552:	1d1a      	adds	r2, r3, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6032      	str	r2, [r6, #0]
 8006558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800655c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006560:	2301      	movs	r3, #1
 8006562:	e09c      	b.n	800669e <_printf_i+0x1e6>
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	6820      	ldr	r0, [r4, #0]
 8006568:	1d19      	adds	r1, r3, #4
 800656a:	6031      	str	r1, [r6, #0]
 800656c:	0606      	lsls	r6, r0, #24
 800656e:	d501      	bpl.n	8006574 <_printf_i+0xbc>
 8006570:	681d      	ldr	r5, [r3, #0]
 8006572:	e003      	b.n	800657c <_printf_i+0xc4>
 8006574:	0645      	lsls	r5, r0, #25
 8006576:	d5fb      	bpl.n	8006570 <_printf_i+0xb8>
 8006578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800657c:	2d00      	cmp	r5, #0
 800657e:	da03      	bge.n	8006588 <_printf_i+0xd0>
 8006580:	232d      	movs	r3, #45	@ 0x2d
 8006582:	426d      	negs	r5, r5
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006588:	4858      	ldr	r0, [pc, #352]	@ (80066ec <_printf_i+0x234>)
 800658a:	230a      	movs	r3, #10
 800658c:	e011      	b.n	80065b2 <_printf_i+0xfa>
 800658e:	6821      	ldr	r1, [r4, #0]
 8006590:	6833      	ldr	r3, [r6, #0]
 8006592:	0608      	lsls	r0, r1, #24
 8006594:	f853 5b04 	ldr.w	r5, [r3], #4
 8006598:	d402      	bmi.n	80065a0 <_printf_i+0xe8>
 800659a:	0649      	lsls	r1, r1, #25
 800659c:	bf48      	it	mi
 800659e:	b2ad      	uxthmi	r5, r5
 80065a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80065a2:	4852      	ldr	r0, [pc, #328]	@ (80066ec <_printf_i+0x234>)
 80065a4:	6033      	str	r3, [r6, #0]
 80065a6:	bf14      	ite	ne
 80065a8:	230a      	movne	r3, #10
 80065aa:	2308      	moveq	r3, #8
 80065ac:	2100      	movs	r1, #0
 80065ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065b2:	6866      	ldr	r6, [r4, #4]
 80065b4:	60a6      	str	r6, [r4, #8]
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	db05      	blt.n	80065c6 <_printf_i+0x10e>
 80065ba:	6821      	ldr	r1, [r4, #0]
 80065bc:	432e      	orrs	r6, r5
 80065be:	f021 0104 	bic.w	r1, r1, #4
 80065c2:	6021      	str	r1, [r4, #0]
 80065c4:	d04b      	beq.n	800665e <_printf_i+0x1a6>
 80065c6:	4616      	mov	r6, r2
 80065c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80065cc:	fb03 5711 	mls	r7, r3, r1, r5
 80065d0:	5dc7      	ldrb	r7, [r0, r7]
 80065d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065d6:	462f      	mov	r7, r5
 80065d8:	42bb      	cmp	r3, r7
 80065da:	460d      	mov	r5, r1
 80065dc:	d9f4      	bls.n	80065c8 <_printf_i+0x110>
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d10b      	bne.n	80065fa <_printf_i+0x142>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	07df      	lsls	r7, r3, #31
 80065e6:	d508      	bpl.n	80065fa <_printf_i+0x142>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	6861      	ldr	r1, [r4, #4]
 80065ec:	4299      	cmp	r1, r3
 80065ee:	bfde      	ittt	le
 80065f0:	2330      	movle	r3, #48	@ 0x30
 80065f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065fa:	1b92      	subs	r2, r2, r6
 80065fc:	6122      	str	r2, [r4, #16]
 80065fe:	f8cd a000 	str.w	sl, [sp]
 8006602:	464b      	mov	r3, r9
 8006604:	aa03      	add	r2, sp, #12
 8006606:	4621      	mov	r1, r4
 8006608:	4640      	mov	r0, r8
 800660a:	f7ff fee7 	bl	80063dc <_printf_common>
 800660e:	3001      	adds	r0, #1
 8006610:	d14a      	bne.n	80066a8 <_printf_i+0x1f0>
 8006612:	f04f 30ff 	mov.w	r0, #4294967295
 8006616:	b004      	add	sp, #16
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	f043 0320 	orr.w	r3, r3, #32
 8006622:	6023      	str	r3, [r4, #0]
 8006624:	4832      	ldr	r0, [pc, #200]	@ (80066f0 <_printf_i+0x238>)
 8006626:	2778      	movs	r7, #120	@ 0x78
 8006628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	6831      	ldr	r1, [r6, #0]
 8006630:	061f      	lsls	r7, r3, #24
 8006632:	f851 5b04 	ldr.w	r5, [r1], #4
 8006636:	d402      	bmi.n	800663e <_printf_i+0x186>
 8006638:	065f      	lsls	r7, r3, #25
 800663a:	bf48      	it	mi
 800663c:	b2ad      	uxthmi	r5, r5
 800663e:	6031      	str	r1, [r6, #0]
 8006640:	07d9      	lsls	r1, r3, #31
 8006642:	bf44      	itt	mi
 8006644:	f043 0320 	orrmi.w	r3, r3, #32
 8006648:	6023      	strmi	r3, [r4, #0]
 800664a:	b11d      	cbz	r5, 8006654 <_printf_i+0x19c>
 800664c:	2310      	movs	r3, #16
 800664e:	e7ad      	b.n	80065ac <_printf_i+0xf4>
 8006650:	4826      	ldr	r0, [pc, #152]	@ (80066ec <_printf_i+0x234>)
 8006652:	e7e9      	b.n	8006628 <_printf_i+0x170>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	f023 0320 	bic.w	r3, r3, #32
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	e7f6      	b.n	800664c <_printf_i+0x194>
 800665e:	4616      	mov	r6, r2
 8006660:	e7bd      	b.n	80065de <_printf_i+0x126>
 8006662:	6833      	ldr	r3, [r6, #0]
 8006664:	6825      	ldr	r5, [r4, #0]
 8006666:	6961      	ldr	r1, [r4, #20]
 8006668:	1d18      	adds	r0, r3, #4
 800666a:	6030      	str	r0, [r6, #0]
 800666c:	062e      	lsls	r6, r5, #24
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	d501      	bpl.n	8006676 <_printf_i+0x1be>
 8006672:	6019      	str	r1, [r3, #0]
 8006674:	e002      	b.n	800667c <_printf_i+0x1c4>
 8006676:	0668      	lsls	r0, r5, #25
 8006678:	d5fb      	bpl.n	8006672 <_printf_i+0x1ba>
 800667a:	8019      	strh	r1, [r3, #0]
 800667c:	2300      	movs	r3, #0
 800667e:	6123      	str	r3, [r4, #16]
 8006680:	4616      	mov	r6, r2
 8006682:	e7bc      	b.n	80065fe <_printf_i+0x146>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	6032      	str	r2, [r6, #0]
 800668a:	681e      	ldr	r6, [r3, #0]
 800668c:	6862      	ldr	r2, [r4, #4]
 800668e:	2100      	movs	r1, #0
 8006690:	4630      	mov	r0, r6
 8006692:	f7f9 fdad 	bl	80001f0 <memchr>
 8006696:	b108      	cbz	r0, 800669c <_printf_i+0x1e4>
 8006698:	1b80      	subs	r0, r0, r6
 800669a:	6060      	str	r0, [r4, #4]
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	2300      	movs	r3, #0
 80066a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a6:	e7aa      	b.n	80065fe <_printf_i+0x146>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	4632      	mov	r2, r6
 80066ac:	4649      	mov	r1, r9
 80066ae:	4640      	mov	r0, r8
 80066b0:	47d0      	blx	sl
 80066b2:	3001      	adds	r0, #1
 80066b4:	d0ad      	beq.n	8006612 <_printf_i+0x15a>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	079b      	lsls	r3, r3, #30
 80066ba:	d413      	bmi.n	80066e4 <_printf_i+0x22c>
 80066bc:	68e0      	ldr	r0, [r4, #12]
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	4298      	cmp	r0, r3
 80066c2:	bfb8      	it	lt
 80066c4:	4618      	movlt	r0, r3
 80066c6:	e7a6      	b.n	8006616 <_printf_i+0x15e>
 80066c8:	2301      	movs	r3, #1
 80066ca:	4632      	mov	r2, r6
 80066cc:	4649      	mov	r1, r9
 80066ce:	4640      	mov	r0, r8
 80066d0:	47d0      	blx	sl
 80066d2:	3001      	adds	r0, #1
 80066d4:	d09d      	beq.n	8006612 <_printf_i+0x15a>
 80066d6:	3501      	adds	r5, #1
 80066d8:	68e3      	ldr	r3, [r4, #12]
 80066da:	9903      	ldr	r1, [sp, #12]
 80066dc:	1a5b      	subs	r3, r3, r1
 80066de:	42ab      	cmp	r3, r5
 80066e0:	dcf2      	bgt.n	80066c8 <_printf_i+0x210>
 80066e2:	e7eb      	b.n	80066bc <_printf_i+0x204>
 80066e4:	2500      	movs	r5, #0
 80066e6:	f104 0619 	add.w	r6, r4, #25
 80066ea:	e7f5      	b.n	80066d8 <_printf_i+0x220>
 80066ec:	08006c1d 	.word	0x08006c1d
 80066f0:	08006c2e 	.word	0x08006c2e

080066f4 <__sflush_r>:
 80066f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	0716      	lsls	r6, r2, #28
 80066fe:	4605      	mov	r5, r0
 8006700:	460c      	mov	r4, r1
 8006702:	d454      	bmi.n	80067ae <__sflush_r+0xba>
 8006704:	684b      	ldr	r3, [r1, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	dc02      	bgt.n	8006710 <__sflush_r+0x1c>
 800670a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd48      	ble.n	80067a2 <__sflush_r+0xae>
 8006710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006712:	2e00      	cmp	r6, #0
 8006714:	d045      	beq.n	80067a2 <__sflush_r+0xae>
 8006716:	2300      	movs	r3, #0
 8006718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800671c:	682f      	ldr	r7, [r5, #0]
 800671e:	6a21      	ldr	r1, [r4, #32]
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	d030      	beq.n	8006786 <__sflush_r+0x92>
 8006724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0759      	lsls	r1, r3, #29
 800672a:	d505      	bpl.n	8006738 <__sflush_r+0x44>
 800672c:	6863      	ldr	r3, [r4, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006732:	b10b      	cbz	r3, 8006738 <__sflush_r+0x44>
 8006734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	2300      	movs	r3, #0
 800673a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800673c:	6a21      	ldr	r1, [r4, #32]
 800673e:	4628      	mov	r0, r5
 8006740:	47b0      	blx	r6
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	d106      	bne.n	8006756 <__sflush_r+0x62>
 8006748:	6829      	ldr	r1, [r5, #0]
 800674a:	291d      	cmp	r1, #29
 800674c:	d82b      	bhi.n	80067a6 <__sflush_r+0xb2>
 800674e:	4a2a      	ldr	r2, [pc, #168]	@ (80067f8 <__sflush_r+0x104>)
 8006750:	40ca      	lsrs	r2, r1
 8006752:	07d6      	lsls	r6, r2, #31
 8006754:	d527      	bpl.n	80067a6 <__sflush_r+0xb2>
 8006756:	2200      	movs	r2, #0
 8006758:	6062      	str	r2, [r4, #4]
 800675a:	04d9      	lsls	r1, r3, #19
 800675c:	6922      	ldr	r2, [r4, #16]
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	d504      	bpl.n	800676c <__sflush_r+0x78>
 8006762:	1c42      	adds	r2, r0, #1
 8006764:	d101      	bne.n	800676a <__sflush_r+0x76>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	b903      	cbnz	r3, 800676c <__sflush_r+0x78>
 800676a:	6560      	str	r0, [r4, #84]	@ 0x54
 800676c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800676e:	602f      	str	r7, [r5, #0]
 8006770:	b1b9      	cbz	r1, 80067a2 <__sflush_r+0xae>
 8006772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006776:	4299      	cmp	r1, r3
 8006778:	d002      	beq.n	8006780 <__sflush_r+0x8c>
 800677a:	4628      	mov	r0, r5
 800677c:	f7ff fbf4 	bl	8005f68 <_free_r>
 8006780:	2300      	movs	r3, #0
 8006782:	6363      	str	r3, [r4, #52]	@ 0x34
 8006784:	e00d      	b.n	80067a2 <__sflush_r+0xae>
 8006786:	2301      	movs	r3, #1
 8006788:	4628      	mov	r0, r5
 800678a:	47b0      	blx	r6
 800678c:	4602      	mov	r2, r0
 800678e:	1c50      	adds	r0, r2, #1
 8006790:	d1c9      	bne.n	8006726 <__sflush_r+0x32>
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0c6      	beq.n	8006726 <__sflush_r+0x32>
 8006798:	2b1d      	cmp	r3, #29
 800679a:	d001      	beq.n	80067a0 <__sflush_r+0xac>
 800679c:	2b16      	cmp	r3, #22
 800679e:	d11e      	bne.n	80067de <__sflush_r+0xea>
 80067a0:	602f      	str	r7, [r5, #0]
 80067a2:	2000      	movs	r0, #0
 80067a4:	e022      	b.n	80067ec <__sflush_r+0xf8>
 80067a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	e01b      	b.n	80067e6 <__sflush_r+0xf2>
 80067ae:	690f      	ldr	r7, [r1, #16]
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	d0f6      	beq.n	80067a2 <__sflush_r+0xae>
 80067b4:	0793      	lsls	r3, r2, #30
 80067b6:	680e      	ldr	r6, [r1, #0]
 80067b8:	bf08      	it	eq
 80067ba:	694b      	ldreq	r3, [r1, #20]
 80067bc:	600f      	str	r7, [r1, #0]
 80067be:	bf18      	it	ne
 80067c0:	2300      	movne	r3, #0
 80067c2:	eba6 0807 	sub.w	r8, r6, r7
 80067c6:	608b      	str	r3, [r1, #8]
 80067c8:	f1b8 0f00 	cmp.w	r8, #0
 80067cc:	dde9      	ble.n	80067a2 <__sflush_r+0xae>
 80067ce:	6a21      	ldr	r1, [r4, #32]
 80067d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067d2:	4643      	mov	r3, r8
 80067d4:	463a      	mov	r2, r7
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b0      	blx	r6
 80067da:	2800      	cmp	r0, #0
 80067dc:	dc08      	bgt.n	80067f0 <__sflush_r+0xfc>
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067e6:	81a3      	strh	r3, [r4, #12]
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f0:	4407      	add	r7, r0
 80067f2:	eba8 0800 	sub.w	r8, r8, r0
 80067f6:	e7e7      	b.n	80067c8 <__sflush_r+0xd4>
 80067f8:	20400001 	.word	0x20400001

080067fc <_fflush_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	690b      	ldr	r3, [r1, #16]
 8006800:	4605      	mov	r5, r0
 8006802:	460c      	mov	r4, r1
 8006804:	b913      	cbnz	r3, 800680c <_fflush_r+0x10>
 8006806:	2500      	movs	r5, #0
 8006808:	4628      	mov	r0, r5
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	b118      	cbz	r0, 8006816 <_fflush_r+0x1a>
 800680e:	6a03      	ldr	r3, [r0, #32]
 8006810:	b90b      	cbnz	r3, 8006816 <_fflush_r+0x1a>
 8006812:	f7ff fa43 	bl	8005c9c <__sinit>
 8006816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f3      	beq.n	8006806 <_fflush_r+0xa>
 800681e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006820:	07d0      	lsls	r0, r2, #31
 8006822:	d404      	bmi.n	800682e <_fflush_r+0x32>
 8006824:	0599      	lsls	r1, r3, #22
 8006826:	d402      	bmi.n	800682e <_fflush_r+0x32>
 8006828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800682a:	f7ff fb9a 	bl	8005f62 <__retarget_lock_acquire_recursive>
 800682e:	4628      	mov	r0, r5
 8006830:	4621      	mov	r1, r4
 8006832:	f7ff ff5f 	bl	80066f4 <__sflush_r>
 8006836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006838:	07da      	lsls	r2, r3, #31
 800683a:	4605      	mov	r5, r0
 800683c:	d4e4      	bmi.n	8006808 <_fflush_r+0xc>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	059b      	lsls	r3, r3, #22
 8006842:	d4e1      	bmi.n	8006808 <_fflush_r+0xc>
 8006844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006846:	f7ff fb8d 	bl	8005f64 <__retarget_lock_release_recursive>
 800684a:	e7dd      	b.n	8006808 <_fflush_r+0xc>

0800684c <__swbuf_r>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	460e      	mov	r6, r1
 8006850:	4614      	mov	r4, r2
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <__swbuf_r+0x12>
 8006856:	6a03      	ldr	r3, [r0, #32]
 8006858:	b90b      	cbnz	r3, 800685e <__swbuf_r+0x12>
 800685a:	f7ff fa1f 	bl	8005c9c <__sinit>
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	d501      	bpl.n	800686c <__swbuf_r+0x20>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b943      	cbnz	r3, 800687e <__swbuf_r+0x32>
 800686c:	4621      	mov	r1, r4
 800686e:	4628      	mov	r0, r5
 8006870:	f000 f82a 	bl	80068c8 <__swsetup_r>
 8006874:	b118      	cbz	r0, 800687e <__swbuf_r+0x32>
 8006876:	f04f 37ff 	mov.w	r7, #4294967295
 800687a:	4638      	mov	r0, r7
 800687c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	1a98      	subs	r0, r3, r2
 8006884:	6963      	ldr	r3, [r4, #20]
 8006886:	b2f6      	uxtb	r6, r6
 8006888:	4283      	cmp	r3, r0
 800688a:	4637      	mov	r7, r6
 800688c:	dc05      	bgt.n	800689a <__swbuf_r+0x4e>
 800688e:	4621      	mov	r1, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f7ff ffb3 	bl	80067fc <_fflush_r>
 8006896:	2800      	cmp	r0, #0
 8006898:	d1ed      	bne.n	8006876 <__swbuf_r+0x2a>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	3b01      	subs	r3, #1
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	6022      	str	r2, [r4, #0]
 80068a6:	701e      	strb	r6, [r3, #0]
 80068a8:	6962      	ldr	r2, [r4, #20]
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d004      	beq.n	80068ba <__swbuf_r+0x6e>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	07db      	lsls	r3, r3, #31
 80068b4:	d5e1      	bpl.n	800687a <__swbuf_r+0x2e>
 80068b6:	2e0a      	cmp	r6, #10
 80068b8:	d1df      	bne.n	800687a <__swbuf_r+0x2e>
 80068ba:	4621      	mov	r1, r4
 80068bc:	4628      	mov	r0, r5
 80068be:	f7ff ff9d 	bl	80067fc <_fflush_r>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0d9      	beq.n	800687a <__swbuf_r+0x2e>
 80068c6:	e7d6      	b.n	8006876 <__swbuf_r+0x2a>

080068c8 <__swsetup_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4b29      	ldr	r3, [pc, #164]	@ (8006970 <__swsetup_r+0xa8>)
 80068cc:	4605      	mov	r5, r0
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	460c      	mov	r4, r1
 80068d2:	b118      	cbz	r0, 80068dc <__swsetup_r+0x14>
 80068d4:	6a03      	ldr	r3, [r0, #32]
 80068d6:	b90b      	cbnz	r3, 80068dc <__swsetup_r+0x14>
 80068d8:	f7ff f9e0 	bl	8005c9c <__sinit>
 80068dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d422      	bmi.n	800692a <__swsetup_r+0x62>
 80068e4:	06da      	lsls	r2, r3, #27
 80068e6:	d407      	bmi.n	80068f8 <__swsetup_r+0x30>
 80068e8:	2209      	movs	r2, #9
 80068ea:	602a      	str	r2, [r5, #0]
 80068ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	e033      	b.n	8006960 <__swsetup_r+0x98>
 80068f8:	0758      	lsls	r0, r3, #29
 80068fa:	d512      	bpl.n	8006922 <__swsetup_r+0x5a>
 80068fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068fe:	b141      	cbz	r1, 8006912 <__swsetup_r+0x4a>
 8006900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006904:	4299      	cmp	r1, r3
 8006906:	d002      	beq.n	800690e <__swsetup_r+0x46>
 8006908:	4628      	mov	r0, r5
 800690a:	f7ff fb2d 	bl	8005f68 <_free_r>
 800690e:	2300      	movs	r3, #0
 8006910:	6363      	str	r3, [r4, #52]	@ 0x34
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	2300      	movs	r3, #0
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f043 0308 	orr.w	r3, r3, #8
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	b94b      	cbnz	r3, 8006942 <__swsetup_r+0x7a>
 800692e:	89a3      	ldrh	r3, [r4, #12]
 8006930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006938:	d003      	beq.n	8006942 <__swsetup_r+0x7a>
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f84f 	bl	80069e0 <__smakebuf_r>
 8006942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006946:	f013 0201 	ands.w	r2, r3, #1
 800694a:	d00a      	beq.n	8006962 <__swsetup_r+0x9a>
 800694c:	2200      	movs	r2, #0
 800694e:	60a2      	str	r2, [r4, #8]
 8006950:	6962      	ldr	r2, [r4, #20]
 8006952:	4252      	negs	r2, r2
 8006954:	61a2      	str	r2, [r4, #24]
 8006956:	6922      	ldr	r2, [r4, #16]
 8006958:	b942      	cbnz	r2, 800696c <__swsetup_r+0xa4>
 800695a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800695e:	d1c5      	bne.n	80068ec <__swsetup_r+0x24>
 8006960:	bd38      	pop	{r3, r4, r5, pc}
 8006962:	0799      	lsls	r1, r3, #30
 8006964:	bf58      	it	pl
 8006966:	6962      	ldrpl	r2, [r4, #20]
 8006968:	60a2      	str	r2, [r4, #8]
 800696a:	e7f4      	b.n	8006956 <__swsetup_r+0x8e>
 800696c:	2000      	movs	r0, #0
 800696e:	e7f7      	b.n	8006960 <__swsetup_r+0x98>
 8006970:	2000001c 	.word	0x2000001c

08006974 <_sbrk_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d06      	ldr	r5, [pc, #24]	@ (8006990 <_sbrk_r+0x1c>)
 8006978:	2300      	movs	r3, #0
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	f7fa fabe 	bl	8000f00 <_sbrk>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_sbrk_r+0x1a>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_sbrk_r+0x1a>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20001740 	.word	0x20001740

08006994 <__swhatbuf_r>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	460c      	mov	r4, r1
 8006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699c:	2900      	cmp	r1, #0
 800699e:	b096      	sub	sp, #88	@ 0x58
 80069a0:	4615      	mov	r5, r2
 80069a2:	461e      	mov	r6, r3
 80069a4:	da0d      	bge.n	80069c2 <__swhatbuf_r+0x2e>
 80069a6:	89a3      	ldrh	r3, [r4, #12]
 80069a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2340      	movne	r3, #64	@ 0x40
 80069b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069b8:	2000      	movs	r0, #0
 80069ba:	6031      	str	r1, [r6, #0]
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	b016      	add	sp, #88	@ 0x58
 80069c0:	bd70      	pop	{r4, r5, r6, pc}
 80069c2:	466a      	mov	r2, sp
 80069c4:	f000 f848 	bl	8006a58 <_fstat_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	dbec      	blt.n	80069a6 <__swhatbuf_r+0x12>
 80069cc:	9901      	ldr	r1, [sp, #4]
 80069ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069d6:	4259      	negs	r1, r3
 80069d8:	4159      	adcs	r1, r3
 80069da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069de:	e7eb      	b.n	80069b8 <__swhatbuf_r+0x24>

080069e0 <__smakebuf_r>:
 80069e0:	898b      	ldrh	r3, [r1, #12]
 80069e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e4:	079d      	lsls	r5, r3, #30
 80069e6:	4606      	mov	r6, r0
 80069e8:	460c      	mov	r4, r1
 80069ea:	d507      	bpl.n	80069fc <__smakebuf_r+0x1c>
 80069ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	2301      	movs	r3, #1
 80069f6:	6163      	str	r3, [r4, #20]
 80069f8:	b003      	add	sp, #12
 80069fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fc:	ab01      	add	r3, sp, #4
 80069fe:	466a      	mov	r2, sp
 8006a00:	f7ff ffc8 	bl	8006994 <__swhatbuf_r>
 8006a04:	9f00      	ldr	r7, [sp, #0]
 8006a06:	4605      	mov	r5, r0
 8006a08:	4639      	mov	r1, r7
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7ff fb18 	bl	8006040 <_malloc_r>
 8006a10:	b948      	cbnz	r0, 8006a26 <__smakebuf_r+0x46>
 8006a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a16:	059a      	lsls	r2, r3, #22
 8006a18:	d4ee      	bmi.n	80069f8 <__smakebuf_r+0x18>
 8006a1a:	f023 0303 	bic.w	r3, r3, #3
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	e7e2      	b.n	80069ec <__smakebuf_r+0xc>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	6020      	str	r0, [r4, #0]
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a36:	b15b      	cbz	r3, 8006a50 <__smakebuf_r+0x70>
 8006a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f000 f81d 	bl	8006a7c <_isatty_r>
 8006a42:	b128      	cbz	r0, 8006a50 <__smakebuf_r+0x70>
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	431d      	orrs	r5, r3
 8006a54:	81a5      	strh	r5, [r4, #12]
 8006a56:	e7cf      	b.n	80069f8 <__smakebuf_r+0x18>

08006a58 <_fstat_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d07      	ldr	r5, [pc, #28]	@ (8006a78 <_fstat_r+0x20>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	602b      	str	r3, [r5, #0]
 8006a66:	f7fa fa22 	bl	8000eae <_fstat>
 8006a6a:	1c43      	adds	r3, r0, #1
 8006a6c:	d102      	bne.n	8006a74 <_fstat_r+0x1c>
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	b103      	cbz	r3, 8006a74 <_fstat_r+0x1c>
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	bd38      	pop	{r3, r4, r5, pc}
 8006a76:	bf00      	nop
 8006a78:	20001740 	.word	0x20001740

08006a7c <_isatty_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4d06      	ldr	r5, [pc, #24]	@ (8006a98 <_isatty_r+0x1c>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	4604      	mov	r4, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	602b      	str	r3, [r5, #0]
 8006a88:	f7fa fa21 	bl	8000ece <_isatty>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_isatty_r+0x1a>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_isatty_r+0x1a>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20001740 	.word	0x20001740

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
