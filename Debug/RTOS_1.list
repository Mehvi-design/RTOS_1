
RTOS_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd1c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800bed0  0800bed0  0000ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3a8  0800c3a8  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c3a8  0800c3a8  0000d3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3b0  0800c3b0  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b0  0800c3b0  0000d3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3b4  0800c3b4  0000d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c3b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001754  200001d8  0800c590  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000192c  0800c590  0000e92c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002040a  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004280  00000000  00000000  0002e612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00032898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c0  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f354  00000000  00000000  00035a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f361  00000000  00000000  00064dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123bc1  00000000  00000000  0008411d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a98  00000000  00000000  001a7d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001b07bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800beb4 	.word	0x0800beb4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800beb4 	.word	0x0800beb4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8000faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2280      	movs	r2, #128	@ 0x80
 8000fb0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001f4 	.word	0x200001f4
 8000fc4:	20000294 	.word	0x20000294

08000fc8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fe0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fe4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fe8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00b      	beq.n	8001008 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff0:	e000      	b.n	8000ff4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ff2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f9      	beq.n	8000ff2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ffe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_write>:
uint16_t ADC_Val;
float voltage=0;
float Angle=0;
char msg[64];

int _write(int file, char *ptr, int len) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e009      	b.n	800103c <_write+0x26>
        ITM_SendChar(ptr[i]);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffc9 	bl	8000fc8 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf1      	blt.n	8001028 <_write+0x12>
    }
    return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <float_to_string_manual>:
void float_to_string_manual(float value, char* buffer, int precision) {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a03 	vstr	s0, [r7, #12]
 800105a:	60b8      	str	r0, [r7, #8]
 800105c:	6079      	str	r1, [r7, #4]
    if (value < 0) {
 800105e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106a:	d50a      	bpl.n	8001082 <float_to_string_manual+0x32>
        *buffer++ = '-';
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	222d      	movs	r2, #45	@ 0x2d
 8001074:	701a      	strb	r2, [r3, #0]
        value = -value;
 8001076:	edd7 7a03 	vldr	s15, [r7, #12]
 800107a:	eef1 7a67 	vneg.f32	s15, s15
 800107e:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    int int_part = (int)value;
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108a:	ee17 3a90 	vmov	r3, s15
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int frac_part = (int)((value - int_part) * pow(10, precision));
 8001090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ed97 7a03 	vldr	s14, [r7, #12]
 800109e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a2:	ee17 0a90 	vmov	r0, s15
 80010a6:	f7ff fa5f 	bl	8000568 <__aeabi_f2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fa48 	bl	8000544 <__aeabi_i2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	ec43 2b11 	vmov	d1, r2, r3
 80010bc:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 80011d0 <float_to_string_manual+0x180>
 80010c0:	f009 ff98 	bl	800aff4 <pow>
 80010c4:	ec53 2b10 	vmov	r2, r3, d0
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff faa4 	bl	8000618 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fd4e 	bl	8000b78 <__aeabi_d2iz>
 80010dc:	4603      	mov	r3, r0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Convert integer part
    char int_str[12];
    int i = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (int_part == 0) {
 80010e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d126      	bne.n	8001138 <float_to_string_manual+0xe8>
        int_str[i++] = '0';
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80010f0:	3330      	adds	r3, #48	@ 0x30
 80010f2:	443b      	add	r3, r7
 80010f4:	2230      	movs	r2, #48	@ 0x30
 80010f6:	f803 2c20 	strb.w	r2, [r3, #-32]
 80010fa:	e020      	b.n	800113e <float_to_string_manual+0xee>
    } else {
        while (int_part > 0) {
            int_str[i++] = (int_part % 10) + '0';
 80010fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <float_to_string_manual+0x188>)
 8001100:	fb83 1302 	smull	r1, r3, r3, r2
 8001104:	1099      	asrs	r1, r3, #2
 8001106:	17d3      	asrs	r3, r2, #31
 8001108:	1ac9      	subs	r1, r1, r3
 800110a:	460b      	mov	r3, r1
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	1ad1      	subs	r1, r2, r3
 8001114:	b2ca      	uxtb	r2, r1
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	1c59      	adds	r1, r3, #1
 800111a:	6279      	str	r1, [r7, #36]	@ 0x24
 800111c:	3230      	adds	r2, #48	@ 0x30
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	3330      	adds	r3, #48	@ 0x30
 8001122:	443b      	add	r3, r7
 8001124:	f803 2c20 	strb.w	r2, [r3, #-32]
            int_part /= 10;
 8001128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112a:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <float_to_string_manual+0x188>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1092      	asrs	r2, r2, #2
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (int_part > 0) {
 8001138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800113a:	2b00      	cmp	r3, #0
 800113c:	dcde      	bgt.n	80010fc <float_to_string_manual+0xac>
        }
    }

    // Reverse integer part
    for (int j = i - 1; j >= 0; j--) {
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	3b01      	subs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	e00b      	b.n	800115e <float_to_string_manual+0x10e>
        *buffer++ = int_str[j];
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	60ba      	str	r2, [r7, #8]
 800114c:	f107 0110 	add.w	r1, r7, #16
 8001150:	6a3a      	ldr	r2, [r7, #32]
 8001152:	440a      	add	r2, r1
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	701a      	strb	r2, [r3, #0]
    for (int j = i - 1; j >= 0; j--) {
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	3b01      	subs	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b00      	cmp	r3, #0
 8001162:	daf0      	bge.n	8001146 <float_to_string_manual+0xf6>
    }

    *buffer++ = '.';
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	60ba      	str	r2, [r7, #8]
 800116a:	222e      	movs	r2, #46	@ 0x2e
 800116c:	701a      	strb	r2, [r3, #0]

    // Convert fractional part
    for (int j = precision - 1; j >= 0; j--) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3b01      	subs	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	e01d      	b.n	80011b2 <float_to_string_manual+0x162>
        buffer[j] = (frac_part % 10) + '0';
 8001176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <float_to_string_manual+0x188>)
 800117a:	fb83 1302 	smull	r1, r3, r3, r2
 800117e:	1099      	asrs	r1, r3, #2
 8001180:	17d3      	asrs	r3, r2, #31
 8001182:	1ac9      	subs	r1, r1, r3
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	1ad1      	subs	r1, r2, r3
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	68b9      	ldr	r1, [r7, #8]
 8001194:	440b      	add	r3, r1
 8001196:	3230      	adds	r2, #48	@ 0x30
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
        frac_part /= 10;
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <float_to_string_manual+0x188>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1092      	asrs	r2, r2, #2
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int j = precision - 1; j >= 0; j--) {
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dade      	bge.n	8001176 <float_to_string_manual+0x126>
    }

    buffer += precision;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
    *buffer = '\0';
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	@ 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdb0      	pop	{r4, r5, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40240000 	.word	0x40240000
 80011d8:	66666667 	.word	0x66666667

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e2:	f000 fe4e 	bl	8001e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e6:	f000 f85d 	bl	80012a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011ea:	f000 f8bf 	bl	800136c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f9bd 	bl	800156c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80011f2:	f000 f961 	bl	80014b8 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011f6:	f000 f98b 	bl	8001510 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80011fa:	f000 f8e7 	bl	80013cc <MX_ADC1_Init>
//+ printf("[%lu ms] Hello, world!\r\n", HAL_GetTick());

  //sprintf(msg, "[%lu ms] Hello, world!\r\n", HAL_GetTick());
  //HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

 HAL_UART_Transmit(&hlpuart1,(uint8_t *)"\n starting...\r\n",strlen("\n starting...\n"),HAL_MAX_DELAY);
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	220e      	movs	r2, #14
 8001204:	491f      	ldr	r1, [pc, #124]	@ (8001284 <main+0xa8>)
 8001206:	4820      	ldr	r0, [pc, #128]	@ (8001288 <main+0xac>)
 8001208:	f004 fd54 	bl	8005cb4 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800120c:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <main+0xb0>)
 800120e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001212:	461d      	mov	r5, r3
 8001214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001220:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fd7e 	bl	8006d28 <osThreadCreate>
 800122c:	4603      	mov	r3, r0
 800122e:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <main+0xb4>)
 8001230:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task02_init, osPriorityNormal, 0, 128);
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <main+0xb8>)
 8001234:	f107 0420 	add.w	r4, r7, #32
 8001238:	461d      	mov	r5, r3
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f005 fd6b 	bl	8006d28 <osThreadCreate>
 8001252:	4603      	mov	r3, r0
 8001254:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <main+0xbc>)
 8001256:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityAboveNormal, 0, 128);
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <main+0xc0>)
 800125a:	1d3c      	adds	r4, r7, #4
 800125c:	461d      	mov	r5, r3
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fd5a 	bl	8006d28 <osThreadCreate>
 8001274:	4603      	mov	r3, r0
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <main+0xc4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800127a:	f005 fd4e 	bl	8006d1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127e:	bf00      	nop
 8001280:	e7fd      	b.n	800127e <main+0xa2>
 8001282:	bf00      	nop
 8001284:	0800bed0 	.word	0x0800bed0
 8001288:	20000508 	.word	0x20000508
 800128c:	0800beec 	.word	0x0800beec
 8001290:	20000a74 	.word	0x20000a74
 8001294:	0800bf14 	.word	0x0800bf14
 8001298:	20000a78 	.word	0x20000a78
 800129c:	0800bf3c 	.word	0x0800bf3c
 80012a0:	20000a7c 	.word	0x20000a7c

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b096      	sub	sp, #88	@ 0x58
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2244      	movs	r2, #68	@ 0x44
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 ff0b 	bl	80090ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012ca:	f002 fe1f 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012d4:	f000 fb24 	bl	8001920 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d8:	f002 fdfa 	bl	8003ed0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <SystemClock_Config+0xc4>)
 80012de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012e2:	4a21      	ldr	r2, [pc, #132]	@ (8001368 <SystemClock_Config+0xc4>)
 80012e4:	f023 0318 	bic.w	r3, r3, #24
 80012e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80012ec:	2314      	movs	r3, #20
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012fc:	2360      	movs	r3, #96	@ 0x60
 80012fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001304:	2301      	movs	r3, #1
 8001306:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001308:	2301      	movs	r3, #1
 800130a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800130c:	2328      	movs	r3, #40	@ 0x28
 800130e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001314:	2302      	movs	r3, #2
 8001316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001318:	2302      	movs	r3, #2
 800131a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4618      	mov	r0, r3
 8001322:	f002 fe69 	bl	8003ff8 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800132c:	f000 faf8 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2303      	movs	r3, #3
 8001336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2104      	movs	r1, #4
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fa6e 	bl	800482c <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001356:	f000 fae3 	bl	8001920 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800135a:	f003 ffb9 	bl	80052d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800135e:	bf00      	nop
 8001360:	3758      	adds	r7, #88	@ 0x58
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0a4      	sub	sp, #144	@ 0x90
 8001370:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	228c      	movs	r2, #140	@ 0x8c
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f007 fea8 	bl	80090ce <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800137e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001382:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001384:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800138c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001390:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001392:	2301      	movs	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001396:	2301      	movs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800139a:	2318      	movs	r3, #24
 800139c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80013aa:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 80013ae:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc90 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80013be:	f000 faaf 	bl	8001920 <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3790      	adds	r7, #144	@ 0x90
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	@ (80014ac <MX_ADC1_Init+0xe0>)
 80013f0:	4a2f      	ldr	r2, [pc, #188]	@ (80014b0 <MX_ADC1_Init+0xe4>)
 80013f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_ADC1_Init+0xe0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <MX_ADC1_Init+0xe0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <MX_ADC1_Init+0xe0>)
 800140e:	2204      	movs	r2, #4
 8001410:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001414:	2200      	movs	r2, #0
 8001416:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <MX_ADC1_Init+0xe0>)
 800141a:	2201      	movs	r2, #1
 800141c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001420:	2201      	movs	r2, #1
 8001422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <MX_ADC1_Init+0xe0>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <MX_ADC1_Init+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001442:	2200      	movs	r2, #0
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144e:	4817      	ldr	r0, [pc, #92]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001450:	f000 ffb8 	bl	80023c4 <HAL_ADC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800145a:	f000 fa61 	bl	8001920 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4810      	ldr	r0, [pc, #64]	@ (80014ac <MX_ADC1_Init+0xe0>)
 800146a:	f002 f8a7 	bl	80035bc <HAL_ADCEx_MultiModeConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001474:	f000 fa54 	bl	8001920 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_ADC1_Init+0xe8>)
 800147a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147c:	2306      	movs	r3, #6
 800147e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001484:	237f      	movs	r3, #127	@ 0x7f
 8001486:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001488:	2304      	movs	r3, #4
 800148a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_ADC1_Init+0xe0>)
 8001496:	f001 fabd 	bl	8002a14 <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80014a0:	f000 fa3e 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200004a0 	.word	0x200004a0
 80014b0:	50040000 	.word	0x50040000
 80014b4:	21800100 	.word	0x21800100

080014b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <MX_LPUART1_UART_Init+0x54>)
 80014c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_LPUART1_UART_Init+0x50>)
 80014f6:	f004 fb8f 	bl	8005c18 <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001500:	f000 fa0e 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000508 	.word	0x20000508
 800150c:	40008000 	.word	0x40008000

08001510 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001516:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800151a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151e:	2206      	movs	r2, #6
 8001520:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001524:	2202      	movs	r2, #2
 8001526:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152a:	2202      	movs	r2, #2
 800152c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001530:	2201      	movs	r2, #1
 8001532:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2201      	movs	r2, #1
 8001544:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2201      	movs	r2, #1
 8001550:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	f002 fb88 	bl	8003c68 <HAL_PCD_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 f9df 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000590 	.word	0x20000590

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <MX_GPIO_Init+0x120>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4a41      	ldr	r2, [pc, #260]	@ (800168c <MX_GPIO_Init+0x120>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <MX_GPIO_Init+0x120>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <MX_GPIO_Init+0x120>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <MX_GPIO_Init+0x120>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <MX_GPIO_Init+0x120>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b36      	ldr	r3, [pc, #216]	@ (800168c <MX_GPIO_Init+0x120>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a35      	ldr	r2, [pc, #212]	@ (800168c <MX_GPIO_Init+0x120>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b33      	ldr	r3, [pc, #204]	@ (800168c <MX_GPIO_Init+0x120>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b30      	ldr	r3, [pc, #192]	@ (800168c <MX_GPIO_Init+0x120>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <MX_GPIO_Init+0x120>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_GPIO_Init+0x120>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e2:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <MX_GPIO_Init+0x120>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a29      	ldr	r2, [pc, #164]	@ (800168c <MX_GPIO_Init+0x120>)
 80015e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b27      	ldr	r3, [pc, #156]	@ (800168c <MX_GPIO_Init+0x120>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80015fa:	f002 fced 	bl	8003fd8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001604:	4822      	ldr	r0, [pc, #136]	@ (8001690 <MX_GPIO_Init+0x124>)
 8001606:	f002 fafd 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2140      	movs	r1, #64	@ 0x40
 800160e:	4821      	ldr	r0, [pc, #132]	@ (8001694 <MX_GPIO_Init+0x128>)
 8001610:	f002 faf8 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001614:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800161a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800161e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	481b      	ldr	r0, [pc, #108]	@ (8001698 <MX_GPIO_Init+0x12c>)
 800162c:	f002 f958 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001630:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	4811      	ldr	r0, [pc, #68]	@ (8001690 <MX_GPIO_Init+0x124>)
 800164a:	f002 f949 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800164e:	2320      	movs	r3, #32
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	480c      	ldr	r0, [pc, #48]	@ (8001694 <MX_GPIO_Init+0x128>)
 8001662:	f002 f93d 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001666:	2340      	movs	r3, #64	@ 0x40
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_GPIO_Init+0x128>)
 800167e:	f002 f92f 	bl	80038e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	@ 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400
 8001694:	48001800 	.word	0x48001800
 8001698:	48000800 	.word	0x48000800

0800169c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	 // sprintf(msg, "[%lu ms] Hello, world!\r\n", HAL_GetTick());
	  //  HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	 HAL_UART_Transmit(&hlpuart1,(uint8_t *)"RED LED TOGGLING...\r\n",strlen("RED LED TOGGLING...\r\n"),HAL_MAX_DELAY);
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	2215      	movs	r2, #21
 80016aa:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <StartDefaultTask+0x2c>)
 80016ac:	4807      	ldr	r0, [pc, #28]	@ (80016cc <StartDefaultTask+0x30>)
 80016ae:	f004 fb01 	bl	8005cb4 <HAL_UART_Transmit>
	 // printf("[%lu ms]RED LED TOGGLING...!\r\n",HAL_GetTick());
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80016b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b6:	4806      	ldr	r0, [pc, #24]	@ (80016d0 <StartDefaultTask+0x34>)
 80016b8:	f002 fabc 	bl	8003c34 <HAL_GPIO_TogglePin>
    osDelay(100);
 80016bc:	2064      	movs	r0, #100	@ 0x64
 80016be:	f005 fb7f 	bl	8006dc0 <osDelay>
	 HAL_UART_Transmit(&hlpuart1,(uint8_t *)"RED LED TOGGLING...\r\n",strlen("RED LED TOGGLING...\r\n"),HAL_MAX_DELAY);
 80016c2:	bf00      	nop
 80016c4:	e7ee      	b.n	80016a4 <StartDefaultTask+0x8>
 80016c6:	bf00      	nop
 80016c8:	0800bf58 	.word	0x0800bf58
 80016cc:	20000508 	.word	0x20000508
 80016d0:	48000400 	.word	0x48000400

080016d4 <Task02_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_init */
void Task02_init(void const * argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //sprintf(msg, "[%lu ms] Hello, world!\r\n", HAL_GetTick());
	  //  HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	 HAL_UART_Transmit(&hlpuart1,(uint8_t *)"BLUE LED TOGGLING...\r\n",strlen("BLUE LED TOGGLING...\r\n"),HAL_MAX_DELAY);
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	2216      	movs	r2, #22
 80016e2:	4906      	ldr	r1, [pc, #24]	@ (80016fc <Task02_init+0x28>)
 80016e4:	4806      	ldr	r0, [pc, #24]	@ (8001700 <Task02_init+0x2c>)
 80016e6:	f004 fae5 	bl	8005cb4 <HAL_UART_Transmit>
	// printf("[%lu ms]BLUE LED TOGGLING...!\r\n",HAL_GetTick());

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <Task02_init+0x30>)
 80016ee:	f002 faa1 	bl	8003c34 <HAL_GPIO_TogglePin>
    osDelay(100);
 80016f2:	2064      	movs	r0, #100	@ 0x64
 80016f4:	f005 fb64 	bl	8006dc0 <osDelay>
	 HAL_UART_Transmit(&hlpuart1,(uint8_t *)"BLUE LED TOGGLING...\r\n",strlen("BLUE LED TOGGLING...\r\n"),HAL_MAX_DELAY);
 80016f8:	bf00      	nop
 80016fa:	e7ef      	b.n	80016dc <Task02_init+0x8>
 80016fc:	0800bf70 	.word	0x0800bf70
 8001700:	20000508 	.word	0x20000508
 8001704:	48000400 	.word	0x48000400

08001708 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	@ 0x40
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
	bool is_defaultTaskSuspended = false;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bool is_myTask02Suspended = false;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	float prev_voltage = 0.0f;
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8001722:	486b      	ldr	r0, [pc, #428]	@ (80018d0 <StartTask04+0x1c8>)
 8001724:	f000 ffa2 	bl	800266c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,10);
 8001728:	210a      	movs	r1, #10
 800172a:	4869      	ldr	r0, [pc, #420]	@ (80018d0 <StartTask04+0x1c8>)
 800172c:	f001 f88c 	bl	8002848 <HAL_ADC_PollForConversion>
	  ADC_Val=HAL_ADC_GetValue(&hadc1);
 8001730:	4867      	ldr	r0, [pc, #412]	@ (80018d0 <StartTask04+0x1c8>)
 8001732:	f001 f961 	bl	80029f8 <HAL_ADC_GetValue>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <StartTask04+0x1cc>)
 800173c:	801a      	strh	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc1);
 800173e:	4864      	ldr	r0, [pc, #400]	@ (80018d0 <StartTask04+0x1c8>)
 8001740:	f001 f84e 	bl	80027e0 <HAL_ADC_Stop>

	  voltage=(ADC_Val*3.3)/4095;
 8001744:	4b63      	ldr	r3, [pc, #396]	@ (80018d4 <StartTask04+0x1cc>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fefb 	bl	8000544 <__aeabi_i2d>
 800174e:	a35c      	add	r3, pc, #368	@ (adr r3, 80018c0 <StartTask04+0x1b8>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff60 	bl	8000618 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	a359      	add	r3, pc, #356	@ (adr r3, 80018c8 <StartTask04+0x1c0>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7ff f881 	bl	800086c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff fa29 	bl	8000bc8 <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	4a57      	ldr	r2, [pc, #348]	@ (80018d8 <StartTask04+0x1d0>)
 800177a:	6013      	str	r3, [r2, #0]
	  Angle=(voltage*100)/3.3;
 800177c:	4b56      	ldr	r3, [pc, #344]	@ (80018d8 <StartTask04+0x1d0>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80018dc <StartTask04+0x1d4>
 8001786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178a:	ee17 0a90 	vmov	r0, s15
 800178e:	f7fe feeb 	bl	8000568 <__aeabi_f2d>
 8001792:	a34b      	add	r3, pc, #300	@ (adr r3, 80018c0 <StartTask04+0x1b8>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f868 	bl	800086c <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fa10 	bl	8000bc8 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a4d      	ldr	r2, [pc, #308]	@ (80018e0 <StartTask04+0x1d8>)
 80017ac:	6013      	str	r3, [r2, #0]
	  if (fabs(prev_voltage - voltage) > 0.01f){
 80017ae:	4b4a      	ldr	r3, [pc, #296]	@ (80018d8 <StartTask04+0x1d0>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80017b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017bc:	eef0 7ae7 	vabs.f32	s15, s15
 80017c0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80018e4 <StartTask04+0x1dc>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	dd57      	ble.n	800187e <StartTask04+0x176>
	      if (!is_defaultTaskSuspended) {
 80017ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80017d2:	f083 0301 	eor.w	r3, r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <StartTask04+0xe4>
	          osThreadSuspend(defaultTaskHandle);
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <StartTask04+0x1e0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fb01 	bl	8006de8 <osThreadSuspend>
	          is_defaultTaskSuspended = true;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	      }

	      if (!is_myTask02Suspended) {
 80017ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80017f0:	f083 0301 	eor.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <StartTask04+0x102>
	          osThreadSuspend(myTask02Handle);
 80017fa:	4b3c      	ldr	r3, [pc, #240]	@ (80018ec <StartTask04+0x1e4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f005 faf2 	bl	8006de8 <osThreadSuspend>
	          is_myTask02Suspended = true;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	     // printf("[%lu ms]ADC VOLTAGE!= %.2f \r\n", HAL_GetTick(), voltage);
	      char msg[30];
	      char voltage_str[16];

	      float_to_string_manual(voltage, voltage_str, 2);
 800180a:	4b33      	ldr	r3, [pc, #204]	@ (80018d8 <StartTask04+0x1d0>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2102      	movs	r1, #2
 8001816:	4618      	mov	r0, r3
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	f7ff fc18 	bl	8001050 <float_to_string_manual>

	      strcpy(msg, "Voltage = ");
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	4a32      	ldr	r2, [pc, #200]	@ (80018f0 <StartTask04+0x1e8>)
 8001826:	ca07      	ldmia	r2, {r0, r1, r2}
 8001828:	c303      	stmia	r3!, {r0, r1}
 800182a:	801a      	strh	r2, [r3, #0]
 800182c:	3302      	adds	r3, #2
 800182e:	0c12      	lsrs	r2, r2, #16
 8001830:	701a      	strb	r2, [r3, #0]
	      strcat(msg, voltage_str);
 8001832:	f107 0208 	add.w	r2, r7, #8
 8001836:	f107 0318 	add.w	r3, r7, #24
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fc4e 	bl	80090de <strcat>
	      strcat(msg, " V\r\n");
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fd22 	bl	8000290 <strlen>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4413      	add	r3, r2
 8001856:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <StartTask04+0x1ec>)
 8001858:	6810      	ldr	r0, [r2, #0]
 800185a:	6018      	str	r0, [r3, #0]
 800185c:	7912      	ldrb	r2, [r2, #4]
 800185e:	711a      	strb	r2, [r3, #4]

	      HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fd13 	bl	8000290 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 0118 	add.w	r1, r7, #24
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <StartTask04+0x1f0>)
 8001878:	f004 fa1c 	bl	8005cb4 <HAL_UART_Transmit>
 800187c:	e017      	b.n	80018ae <StartTask04+0x1a6>

	  } else {
	      if (is_defaultTaskSuspended) {
 800187e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <StartTask04+0x18e>
	          osThreadResume(defaultTaskHandle);
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <StartTask04+0x1e0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f005 fab8 	bl	8006e00 <osThreadResume>
	          is_defaultTaskSuspended = false;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	      }

	      if (is_myTask02Suspended) {
 8001896:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <StartTask04+0x1a6>
	          osThreadResume(myTask02Handle);
 800189e:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <StartTask04+0x1e4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 faac 	bl	8006e00 <osThreadResume>
	          is_myTask02Suspended = false;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
//		    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);


		//  HAL_UART_Transmit(&hlpuart1,(uint8_t *)"\r\n",strlen("\r\n"),HAL_MAX_DELAY);

	  prev_voltage = voltage;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <StartTask04+0x1d0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	  osDelay(200);
 80018b4:	20c8      	movs	r0, #200	@ 0xc8
 80018b6:	f005 fa83 	bl	8006dc0 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80018ba:	e732      	b.n	8001722 <StartTask04+0x1a>
 80018bc:	f3af 8000 	nop.w
 80018c0:	66666666 	.word	0x66666666
 80018c4:	400a6666 	.word	0x400a6666
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40affe00 	.word	0x40affe00
 80018d0:	200004a0 	.word	0x200004a0
 80018d4:	20000494 	.word	0x20000494
 80018d8:	20000498 	.word	0x20000498
 80018dc:	42c80000 	.word	0x42c80000
 80018e0:	2000049c 	.word	0x2000049c
 80018e4:	3c23d70a 	.word	0x3c23d70a
 80018e8:	20000a74 	.word	0x20000a74
 80018ec:	20000a78 	.word	0x20000a78
 80018f0:	0800bf88 	.word	0x0800bf88
 80018f4:	0800bf94 	.word	0x0800bf94
 80018f8:	20000508 	.word	0x20000508

080018fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800190e:	f000 fad1 	bl	8001eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <Error_Handler+0x8>

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_MspInit+0x4c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	@ 0x60
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6593      	str	r3, [r2, #88]	@ 0x58
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	210f      	movs	r1, #15
 8001966:	f06f 0001 	mvn.w	r0, #1
 800196a:	f001 ff8f 	bl	800388c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	@ 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <HAL_ADC_MspInit+0x74>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d124      	bne.n	80019e8 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019aa:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	4a0e      	ldr	r2, [pc, #56]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_ADC_MspInit+0x78>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ce:	2308      	movs	r3, #8
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d2:	2303      	movs	r3, #3
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e4:	f001 ff7c 	bl	80038e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	@ 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	50040000 	.word	0x50040000
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0ac      	sub	sp, #176	@ 0xb0
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	228c      	movs	r2, #140	@ 0x8c
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f007 fb58 	bl	80090ce <memset>
  if(huart->Instance==LPUART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_UART_MspInit+0xb4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d13d      	bne.n	8001aa4 <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f94f 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a40:	f7ff ff6e 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <HAL_UART_MspInit+0xb8>)
 8001a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001a74:	f002 fab0 	bl	8003fd8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a78:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a92:	2308      	movs	r3, #8
 8001a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <HAL_UART_MspInit+0xbc>)
 8001aa0:	f001 ff1e 	bl	80038e0 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001aa4:	bf00      	nop
 8001aa6:	37b0      	adds	r7, #176	@ 0xb0
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40008000 	.word	0x40008000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48001800 	.word	0x48001800

08001ab8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ad8:	d154      	bne.n	8001b84 <HAL_PCD_MspInit+0xcc>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a2b      	ldr	r2, [pc, #172]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001af2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b04:	230a      	movs	r3, #10
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b12:	f001 fee5 	bl	80038e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2e:	f001 fed7 	bl	80038e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	4a15      	ldr	r2, [pc, #84]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3e:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d114      	bne.n	8001b80 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b6e:	f002 fa23 	bl	8003fb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <HAL_PCD_MspInit+0xd4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b7e:	e001      	b.n	8001b84 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001b80:	f002 fa1a 	bl	8003fb8 <HAL_PWREx_EnableVddUSB>
}
 8001b84:	bf00      	nop
 8001b86:	3728      	adds	r7, #40	@ 0x28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_InitTick+0xc8>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_InitTick+0xc8>)
 8001ba4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ba8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <HAL_InitTick+0xc8>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb6:	f107 020c 	add.w	r2, r7, #12
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 fff7 	bl	8004bb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bc6:	f002 ffdf 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8001bca:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <HAL_InitTick+0xcc>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bda:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001bdc:	4a21      	ldr	r2, [pc, #132]	@ (8001c64 <HAL_InitTick+0xd4>)
 8001bde:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001be2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001be6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bee:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c00:	4817      	ldr	r0, [pc, #92]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001c02:	f003 fd43 	bl	800568c <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d11b      	bne.n	8001c4c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c14:	4812      	ldr	r0, [pc, #72]	@ (8001c60 <HAL_InitTick+0xd0>)
 8001c16:	f003 fd9b 	bl	8005750 <HAL_TIM_Base_Start_IT>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d111      	bne.n	8001c4c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c28:	2019      	movs	r0, #25
 8001c2a:	f001 fe4b 	bl	80038c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d808      	bhi.n	8001c46 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	2019      	movs	r0, #25
 8001c3a:	f001 fe27 	bl	800388c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <HAL_InitTick+0xd8>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e002      	b.n	8001c4c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3730      	adds	r7, #48	@ 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	20000a80 	.word	0x20000a80
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	20000004 	.word	0x20000004

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <NMI_Handler+0x4>

08001c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <MemManage_Handler+0x4>

08001c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001caa:	f003 fdc1 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000a80 	.word	0x20000a80

08001cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_kill>:

int _kill(int pid, int sig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cd2:	f007 fabb 	bl	800924c <__errno>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2216      	movs	r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
  return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_exit>:

void _exit (int status)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffe7 	bl	8001cc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cfa:	bf00      	nop
 8001cfc:	e7fd      	b.n	8001cfa <_exit+0x12>

08001cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e00a      	b.n	8001d26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d10:	f3af 8000 	nop.w
 8001d14:	4601      	mov	r1, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	60ba      	str	r2, [r7, #8]
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbf0      	blt.n	8001d10 <_read+0x12>
  }

  return len;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d60:	605a      	str	r2, [r3, #4]
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_isatty>:

int _isatty(int file)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	@ (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f007 fa3c 	bl	800924c <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20050000 	.word	0x20050000
 8001e00:	00000400 	.word	0x00000400
 8001e04:	20000acc 	.word	0x20000acc
 8001e08:	20001930 	.word	0x20001930

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <SystemInit+0x20>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <SystemInit+0x20>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e34:	f7ff ffea 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e3a:	490d      	ldr	r1, [pc, #52]	@ (8001e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <LoopForever+0xe>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e40:	e002      	b.n	8001e48 <LoopCopyDataInit>

08001e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e46:	3304      	adds	r3, #4

08001e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e4c:	d3f9      	bcc.n	8001e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e50:	4c0a      	ldr	r4, [pc, #40]	@ (8001e7c <LoopForever+0x16>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e54:	e001      	b.n	8001e5a <LoopFillZerobss>

08001e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e58:	3204      	adds	r2, #4

08001e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e5c:	d3fb      	bcc.n	8001e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f007 f9fb 	bl	8009258 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e62:	f7ff f9bb 	bl	80011dc <main>

08001e66 <LoopForever>:

LoopForever:
    b LoopForever
 8001e66:	e7fe      	b.n	8001e66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e70:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e74:	0800c3b8 	.word	0x0800c3b8
  ldr r2, =_sbss
 8001e78:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e7c:	2000192c 	.word	0x2000192c

08001e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC1_2_IRQHandler>

08001e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f001 fcf2 	bl	8003876 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e92:	200f      	movs	r0, #15
 8001e94:	f7ff fe7c 	bl	8001b90 <HAL_InitTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	e001      	b.n	8001ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea4:	f7ff fd42 	bl	800192c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000ad0 	.word	0x20000ad0

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000ad0 	.word	0x20000ad0

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008

08001f3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3360      	adds	r3, #96	@ 0x60
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <LL_ADC_SetOffset+0x44>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fdc:	bf00      	nop
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	03fff000 	.word	0x03fff000

08001fec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3360      	adds	r3, #96	@ 0x60
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3360      	adds	r3, #96	@ 0x60
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	431a      	orrs	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	615a      	str	r2, [r3, #20]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800209a:	b480      	push	{r7}
 800209c:	b087      	sub	sp, #28
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3330      	adds	r3, #48	@ 0x30
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	211f      	movs	r1, #31
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	f003 011f 	and.w	r1, r3, #31
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3314      	adds	r3, #20
 8002102:	461a      	mov	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	0e5b      	lsrs	r3, r3, #25
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	0d1b      	lsrs	r3, r3, #20
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2107      	movs	r1, #7
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0d1b      	lsrs	r3, r3, #20
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	431a      	orrs	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800213c:	bf00      	nop
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0318 	and.w	r3, r3, #24
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <LL_ADC_SetChannelSingleDiff+0x44>)
 800216c:	40d9      	lsrs	r1, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	400b      	ands	r3, r1
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	0007ffff 	.word	0x0007ffff

08002190 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 031f 	and.w	r3, r3, #31
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6093      	str	r3, [r2, #8]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002200:	d101      	bne.n	8002206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002228:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002250:	d101      	bne.n	8002256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002274:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800229c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a0:	f043 0202 	orr.w	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <LL_ADC_IsEnabled+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_IsEnabled+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsDisableOngoing+0x18>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsDisableOngoing+0x1a>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002314:	f043 0204 	orr.w	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002338:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800233c:	f043 0210 	orr.w	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d101      	bne.n	8002368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002386:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800238a:	f043 0220 	orr.w	r2, r3, #32
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d101      	bne.n	80023b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e133      	b.n	8002646 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fac5 	bl	800197c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fef1 	bl	80021ec <LL_ADC_IsDeepPowerDownEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fed7 	bl	80021c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff0c 	bl	800223c <LL_ADC_IsInternalRegulatorEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fef0 	bl	8002214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002434:	4b86      	ldr	r3, [pc, #536]	@ (8002650 <HAL_ADC_Init+0x28c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a86      	ldr	r2, [pc, #536]	@ (8002654 <HAL_ADC_Init+0x290>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002448:	e002      	b.n	8002450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b01      	subs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f9      	bne.n	800244a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff feee 	bl	800223c <LL_ADC_IsInternalRegulatorEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff62 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 800248c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 80cc 	bne.w	8002634 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80c8 	bne.w	8002634 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fefb 	bl	80022b4 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d115      	bne.n	80024f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c4:	4864      	ldr	r0, [pc, #400]	@ (8002658 <HAL_ADC_Init+0x294>)
 80024c6:	f7ff fef5 	bl	80022b4 <LL_ADC_IsEnabled>
 80024ca:	4604      	mov	r4, r0
 80024cc:	4863      	ldr	r0, [pc, #396]	@ (800265c <HAL_ADC_Init+0x298>)
 80024ce:	f7ff fef1 	bl	80022b4 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	431c      	orrs	r4, r3
 80024d6:	4862      	ldr	r0, [pc, #392]	@ (8002660 <HAL_ADC_Init+0x29c>)
 80024d8:	f7ff feec 	bl	80022b4 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	4323      	orrs	r3, r4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4619      	mov	r1, r3
 80024ea:	485e      	ldr	r0, [pc, #376]	@ (8002664 <HAL_ADC_Init+0x2a0>)
 80024ec:	f7ff fd26 	bl	8001f3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e5b      	ldrb	r3, [r3, #25]
 80024f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002500:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002506:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d106      	bne.n	800252c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	045b      	lsls	r3, r3, #17
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	4b46      	ldr	r3, [pc, #280]	@ (8002668 <HAL_ADC_Init+0x2a4>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	430b      	orrs	r3, r1
 800255a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff1c 	bl	800239e <LL_ADC_INJ_IsConversionOngoing>
 8002566:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d140      	bne.n	80025f0 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13d      	bne.n	80025f0 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e1b      	ldrb	r3, [r3, #24]
 800257c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800257e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002586:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002596:	f023 0306 	bic.w	r3, r3, #6
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	69b9      	ldr	r1, [r7, #24]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d118      	bne.n	80025e0 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c4:	4311      	orrs	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025d0:	430a      	orrs	r2, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e007      	b.n	80025f0 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f023 010f 	bic.w	r1, r3, #15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002610:	e007      	b.n	8002622 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 020f 	bic.w	r2, r2, #15
 8002620:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	@ 0x58
 8002632:	e007      	b.n	8002644 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002644:	7ffb      	ldrb	r3, [r7, #31]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	50040000 	.word	0x50040000
 800265c:	50040100 	.word	0x50040100
 8002660:	50040200 	.word	0x50040200
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	4857      	ldr	r0, [pc, #348]	@ (80027d4 <HAL_ADC_Start+0x168>)
 8002676:	f7ff fd8b 	bl	8002190 <LL_ADC_GetMultimode>
 800267a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe65 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 809c 	bne.w	80027c6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_ADC_Start+0x30>
 8002698:	2302      	movs	r3, #2
 800269a:	e097      	b.n	80027cc <HAL_ADC_Start+0x160>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fe7d 	bl	80033a4 <ADC_Enable>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f040 8083 	bne.w	80027bc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Start+0x6e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Start+0x70>
 80026da:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <HAL_ADC_Start+0x170>)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d002      	beq.n	80026ea <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d106      	bne.n	8002712 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	f023 0206 	bic.w	r2, r3, #6
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002710:	e002      	b.n	8002718 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	221c      	movs	r2, #28
 800271e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2a      	ldr	r2, [pc, #168]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d002      	beq.n	8002738 <HAL_ADC_Start+0xcc>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e000      	b.n	800273a <HAL_ADC_Start+0xce>
 8002738:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_ADC_Start+0x170>)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	4293      	cmp	r3, r2
 8002740:	d008      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d002      	beq.n	8002754 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b09      	cmp	r3, #9
 8002752:	d114      	bne.n	800277e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800276a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fdc2 	bl	8002300 <LL_ADC_REG_StartConversion>
 800277c:	e025      	b.n	80027ca <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <HAL_ADC_Start+0x16c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_Start+0x12e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e000      	b.n	800279c <HAL_ADC_Start+0x130>
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_ADC_Start+0x170>)
 800279c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00f      	beq.n	80027ca <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80027ba:	e006      	b.n	80027ca <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80027c4:	e001      	b.n	80027ca <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	50040300 	.word	0x50040300
 80027d8:	50040100 	.word	0x50040100
 80027dc:	50040000 	.word	0x50040000

080027e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Stop+0x16>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e023      	b.n	800283e <HAL_ADC_Stop+0x5e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027fe:	2103      	movs	r1, #3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fd13 	bl	800322c <ADC_ConversionStop>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d111      	bne.n	8002834 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fe4d 	bl	80034b0 <ADC_Disable>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002852:	4866      	ldr	r0, [pc, #408]	@ (80029ec <HAL_ADC_PollForConversion+0x1a4>)
 8002854:	f7ff fc9c 	bl	8002190 <LL_ADC_GetMultimode>
 8002858:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b08      	cmp	r3, #8
 8002860:	d102      	bne.n	8002868 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002862:	2308      	movs	r3, #8
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e02a      	b.n	80028be <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d002      	beq.n	800287a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d111      	bne.n	800289e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288c:	f043 0220 	orr.w	r2, r3, #32
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0a4      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002898:	2304      	movs	r3, #4
 800289a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800289c:	e00f      	b.n	80028be <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800289e:	4853      	ldr	r0, [pc, #332]	@ (80029ec <HAL_ADC_PollForConversion+0x1a4>)
 80028a0:	f7ff fc84 	bl	80021ac <LL_ADC_GetMultiDMATransfer>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e093      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028ba:	2304      	movs	r3, #4
 80028bc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028be:	f7ff fb0d 	bl	8001edc <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028c4:	e021      	b.n	800290a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d01d      	beq.n	800290a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028ce:	f7ff fb05 	bl	8001edc <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <HAL_ADC_PollForConversion+0x9c>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d112      	bne.n	800290a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	f043 0204 	orr.w	r2, r3, #4
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e06b      	b.n	80029e2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0d6      	beq.n	80028c6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fba3 	bl	8002074 <LL_ADC_REG_IsTriggerSourceSWStart>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01c      	beq.n	800296e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7e5b      	ldrb	r3, [r3, #25]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d118      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b08      	cmp	r3, #8
 8002948:	d111      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_ADC_PollForConversion+0x1a8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d002      	beq.n	800297e <HAL_ADC_PollForConversion+0x136>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	e000      	b.n	8002980 <HAL_ADC_PollForConversion+0x138>
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_ADC_PollForConversion+0x1ac>)
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4293      	cmp	r3, r2
 8002986:	d008      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b05      	cmp	r3, #5
 8002992:	d002      	beq.n	800299a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b09      	cmp	r3, #9
 8002998:	d104      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e00c      	b.n	80029be <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <HAL_ADC_PollForConversion+0x1a8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x16c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_PollForConversion+0x16e>
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <HAL_ADC_PollForConversion+0x1ac>)
 80029b6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2208      	movs	r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e008      	b.n	80029e0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d103      	bne.n	80029e0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	220c      	movs	r2, #12
 80029de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	50040300 	.word	0x50040300
 80029f0:	50040100 	.word	0x50040100
 80029f4:	50040000 	.word	0x50040000

080029f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0b6      	sub	sp, #216	@ 0xd8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x22>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e3e3      	b.n	80031fe <HAL_ADC_ConfigChannel+0x7ea>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fc84 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 83c4 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d824      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	3b02      	subs	r3, #2
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d81b      	bhi.n	8002aa2 <HAL_ADC_ConfigChannel+0x8e>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_ADC_ConfigChannel+0x5c>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a99 	.word	0x08002a99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a80:	230c      	movs	r3, #12
 8002a82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a86:	e010      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a8e:	e00c      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a90:	2318      	movs	r3, #24
 8002a92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a96:	e008      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002aa8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ab8:	f7ff faef 	bl	800209a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fc45 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002ac6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fc65 	bl	800239e <LL_ADC_INJ_IsConversionOngoing>
 8002ad4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 81bf 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 81ba 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002af4:	d10f      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7ff faf6 	bl	80020f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fa9d 	bl	800204e <LL_ADC_SetSamplingTimeCommonConfig>
 8002b14:	e00e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6819      	ldr	r1, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7ff fae5 	bl	80020f2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fa8d 	bl	800204e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d00a      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6919      	ldr	r1, [r3, #16]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b66:	f7ff fa1d 	bl	8001fa4 <LL_ADC_SetOffset>
 8002b6a:	e179      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fa3a 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x184>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fa2f 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	e01e      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x1c2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fa24 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e004      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002bca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x1da>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	e018      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x20c>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e004      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f9f3 	bl	8002018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f9d7 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x24a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f9cc 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	e01e      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x288>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f9c1 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e004      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002c90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x2a0>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0e9b      	lsrs	r3, r3, #26
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	e018      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x2d2>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002cc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e004      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d106      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f990 	bl	8002018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f974 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x310>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f969 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	e01e      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x34e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff f95e 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e004      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x366>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e9b      	lsrs	r3, r3, #26
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	e014      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x390>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002d88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d96:	2320      	movs	r3, #32
 8002d98:	e004      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d106      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f931 	bl	8002018 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2103      	movs	r1, #3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f915 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x3ce>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f90a 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	e017      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x3fe>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2103      	movs	r1, #3
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f8ff 	bl	8001fec <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dfc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x416>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	e011      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x43a>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002e38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002e46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d106      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2103      	movs	r1, #3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f8dc 	bl	8002018 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fa25 	bl	80022b4 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 813f 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f7ff f962 	bl	8002148 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a8e      	ldr	r2, [pc, #568]	@ (80030c4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f040 8130 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x4a4>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e019      	b.n	8002eec <HAL_ADC_ConfigChannel+0x4d8>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e003      	b.n	8002edc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	bf94      	ite	ls
 8002ee6:	2301      	movls	r3, #1
 8002ee8:	2300      	movhi	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d079      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x4f8>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	069b      	lsls	r3, r3, #26
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f0a:	e015      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x524>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f1c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	069b      	lsls	r3, r3, #26
 8002f34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x544>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	e017      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x574>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x59a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	051b      	lsls	r3, r3, #20
 8002fac:	e018      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x5cc>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e003      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	e080      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x5ec>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ffe:	e015      	b.n	800302c <HAL_ADC_ConfigChannel+0x618>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	3301      	adds	r3, #1
 8003026:	069b      	lsls	r3, r3, #26
 8003028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <HAL_ADC_ConfigChannel+0x638>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	e017      	b.n	800307c <HAL_ADC_ConfigChannel+0x668>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	61bb      	str	r3, [r7, #24]
  return result;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e003      	b.n	8003070 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	ea42 0103 	orr.w	r1, r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x694>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	3301      	adds	r3, #1
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	3b1e      	subs	r3, #30
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	e01d      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x6d0>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	60fb      	str	r3, [r7, #12]
  return result;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e005      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x6bc>
 80030c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	3b1e      	subs	r3, #30
 80030de:	051b      	lsls	r3, r3, #20
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ea:	4619      	mov	r1, r3
 80030ec:	f7ff f801 	bl	80020f2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b44      	ldr	r3, [pc, #272]	@ (8003208 <HAL_ADC_ConfigChannel+0x7f4>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d07a      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030fc:	4843      	ldr	r0, [pc, #268]	@ (800320c <HAL_ADC_ConfigChannel+0x7f8>)
 80030fe:	f7fe ff43 	bl	8001f88 <LL_ADC_GetCommonPathInternalCh>
 8003102:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <HAL_ADC_ConfigChannel+0x7fc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d12c      	bne.n	800316a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003110:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d126      	bne.n	800316a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3c      	ldr	r2, [pc, #240]	@ (8003214 <HAL_ADC_ConfigChannel+0x800>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x71c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3b      	ldr	r2, [pc, #236]	@ (8003218 <HAL_ADC_ConfigChannel+0x804>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d15d      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003134:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003138:	4619      	mov	r1, r3
 800313a:	4834      	ldr	r0, [pc, #208]	@ (800320c <HAL_ADC_ConfigChannel+0x7f8>)
 800313c:	f7fe ff11 	bl	8001f62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003140:	4b36      	ldr	r3, [pc, #216]	@ (800321c <HAL_ADC_ConfigChannel+0x808>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	4a36      	ldr	r2, [pc, #216]	@ (8003220 <HAL_ADC_ConfigChannel+0x80c>)
 8003148:	fba2 2303 	umull	r2, r3, r2, r3
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800315a:	e002      	b.n	8003162 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	e040      	b.n	80031ec <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2d      	ldr	r2, [pc, #180]	@ (8003224 <HAL_ADC_ConfigChannel+0x810>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d118      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d112      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a23      	ldr	r2, [pc, #140]	@ (8003214 <HAL_ADC_ConfigChannel+0x800>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_ADC_ConfigChannel+0x780>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <HAL_ADC_ConfigChannel+0x804>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12d      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319c:	4619      	mov	r1, r3
 800319e:	481b      	ldr	r0, [pc, #108]	@ (800320c <HAL_ADC_ConfigChannel+0x7f8>)
 80031a0:	f7fe fedf 	bl	8001f62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a4:	e024      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_ADC_ConfigChannel+0x814>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d120      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11a      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <HAL_ADC_ConfigChannel+0x800>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d115      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ce:	4619      	mov	r1, r3
 80031d0:	480e      	ldr	r0, [pc, #56]	@ (800320c <HAL_ADC_ConfigChannel+0x7f8>)
 80031d2:	f7fe fec6 	bl	8001f62 <LL_ADC_SetCommonPathInternalCh>
 80031d6:	e00c      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80031ea:	e002      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80031fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	37d8      	adds	r7, #216	@ 0xd8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	80080000 	.word	0x80080000
 800320c:	50040300 	.word	0x50040300
 8003210:	c7520000 	.word	0xc7520000
 8003214:	50040000 	.word	0x50040000
 8003218:	50040200 	.word	0x50040200
 800321c:	20000000 	.word	0x20000000
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	cb840000 	.word	0xcb840000
 8003228:	80000001 	.word	0x80000001

0800322c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f884 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8003248:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f8a5 	bl	800239e <LL_ADC_INJ_IsConversionOngoing>
 8003254:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8098 	beq.w	8003394 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02a      	beq.n	80032c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7e5b      	ldrb	r3, [r3, #25]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d126      	bne.n	80032c8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7e1b      	ldrb	r3, [r3, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d122      	bne.n	80032c8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003286:	e014      	b.n	80032b2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4a45      	ldr	r2, [pc, #276]	@ (80033a0 <ADC_ConversionStop+0x174>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d90d      	bls.n	80032ac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f043 0210 	orr.w	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e074      	b.n	8003396 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d1e3      	bne.n	8003288 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2240      	movs	r2, #64	@ 0x40
 80032c6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d014      	beq.n	80032f8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f83c 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00c      	beq.n	80032f8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fff9 	bl	80022da <LL_ADC_IsDisableOngoing>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f818 	bl	8002328 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d014      	beq.n	8003328 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f84b 	bl	800239e <LL_ADC_INJ_IsConversionOngoing>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe ffe1 	bl	80022da <LL_ADC_IsDisableOngoing>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff f827 	bl	8002376 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d005      	beq.n	800333a <ADC_ConversionStop+0x10e>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b03      	cmp	r3, #3
 8003332:	d105      	bne.n	8003340 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003334:	230c      	movs	r3, #12
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e005      	b.n	8003346 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800333a:	2308      	movs	r3, #8
 800333c:	617b      	str	r3, [r7, #20]
        break;
 800333e:	e002      	b.n	8003346 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003340:	2304      	movs	r3, #4
 8003342:	617b      	str	r3, [r7, #20]
        break;
 8003344:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003346:	f7fe fdc9 	bl	8001edc <HAL_GetTick>
 800334a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800334c:	e01b      	b.n	8003386 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800334e:	f7fe fdc5 	bl	8001edc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b05      	cmp	r3, #5
 800335a:	d914      	bls.n	8003386 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1dc      	bne.n	800334e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	a33fffff 	.word	0xa33fffff

080033a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fe ff7d 	bl	80022b4 <LL_ADC_IsEnabled>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d169      	bne.n	8003494 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <ADC_Enable+0xfc>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00d      	beq.n	80033ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e055      	b.n	8003496 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe ff38 	bl	8002264 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033f4:	482b      	ldr	r0, [pc, #172]	@ (80034a4 <ADC_Enable+0x100>)
 80033f6:	f7fe fdc7 	bl	8001f88 <LL_ADC_GetCommonPathInternalCh>
 80033fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003404:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <ADC_Enable+0x104>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	4a28      	ldr	r2, [pc, #160]	@ (80034ac <ADC_Enable+0x108>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800341e:	e002      	b.n	8003426 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3b01      	subs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800342c:	f7fe fd56 	bl	8001edc <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003432:	e028      	b.n	8003486 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe ff3b 	bl	80022b4 <LL_ADC_IsEnabled>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe ff0b 	bl	8002264 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800344e:	f7fe fd45 	bl	8001edc <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d914      	bls.n	8003486 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d00d      	beq.n	8003486 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e007      	b.n	8003496 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d1cf      	bne.n	8003434 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	8000003f 	.word	0x8000003f
 80034a4:	50040300 	.word	0x50040300
 80034a8:	20000000 	.word	0x20000000
 80034ac:	053e2d63 	.word	0x053e2d63

080034b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe ff0c 	bl	80022da <LL_ADC_IsDisableOngoing>
 80034c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fef3 	bl	80022b4 <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d047      	beq.n	8003564 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d144      	bne.n	8003564 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030d 	and.w	r3, r3, #13
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fecd 	bl	800228c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2203      	movs	r2, #3
 80034f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034fa:	f7fe fcef 	bl	8001edc <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003500:	e029      	b.n	8003556 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e023      	b.n	8003566 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800351e:	f7fe fcdd 	bl	8001edc <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d914      	bls.n	8003556 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	f043 0210 	orr.w	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e007      	b.n	8003566 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1dc      	bne.n	800351e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <LL_ADC_IsEnabled>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <LL_ADC_IsEnabled+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_ADC_IsEnabled+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_REG_IsConversionOngoing>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d101      	bne.n	80035ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b0a1      	sub	sp, #132	@ 0x84
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e093      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035e2:	2300      	movs	r3, #0
 80035e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035e6:	2300      	movs	r3, #0
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a47      	ldr	r2, [pc, #284]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d102      	bne.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035f4:	4b46      	ldr	r3, [pc, #280]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e072      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ffb8 	bl	8003594 <LL_ADC_REG_IsConversionOngoing>
 8003624:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff ffb2 	bl	8003594 <LL_ADC_REG_IsConversionOngoing>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d154      	bne.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003636:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003638:	2b00      	cmp	r3, #0
 800363a:	d151      	bne.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800363e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02c      	beq.n	80036a2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003648:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800365a:	035b      	lsls	r3, r3, #13
 800365c:	430b      	orrs	r3, r1
 800365e:	431a      	orrs	r2, r3
 8003660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003662:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003664:	4829      	ldr	r0, [pc, #164]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003666:	f7ff ff82 	bl	800356e <LL_ADC_IsEnabled>
 800366a:	4604      	mov	r4, r0
 800366c:	4828      	ldr	r0, [pc, #160]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800366e:	f7ff ff7e 	bl	800356e <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	431c      	orrs	r4, r3
 8003676:	4828      	ldr	r0, [pc, #160]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003678:	f7ff ff79 	bl	800356e <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d137      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800368c:	f023 030f 	bic.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	6811      	ldr	r1, [r2, #0]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	6892      	ldr	r2, [r2, #8]
 8003698:	430a      	orrs	r2, r1
 800369a:	431a      	orrs	r2, r3
 800369c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800369e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036a0:	e028      	b.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ae:	4817      	ldr	r0, [pc, #92]	@ (800370c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036b0:	f7ff ff5d 	bl	800356e <LL_ADC_IsEnabled>
 80036b4:	4604      	mov	r4, r0
 80036b6:	4816      	ldr	r0, [pc, #88]	@ (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036b8:	f7ff ff59 	bl	800356e <LL_ADC_IsEnabled>
 80036bc:	4603      	mov	r3, r0
 80036be:	431c      	orrs	r4, r3
 80036c0:	4815      	ldr	r0, [pc, #84]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80036c2:	f7ff ff54 	bl	800356e <LL_ADC_IsEnabled>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4323      	orrs	r3, r4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d112      	bne.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036de:	e009      	b.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036f2:	e000      	b.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80036fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003702:	4618      	mov	r0, r3
 8003704:	3784      	adds	r7, #132	@ 0x84
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	50040000 	.word	0x50040000
 8003710:	50040100 	.word	0x50040100
 8003714:	50040300 	.word	0x50040300
 8003718:	50040200 	.word	0x50040200

0800371c <__NVIC_SetPriorityGrouping>:
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003738:	4013      	ands	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374e:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <__NVIC_SetPriorityGrouping+0x44>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	60d3      	str	r3, [r2, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <__NVIC_GetPriorityGrouping>:
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <__NVIC_GetPriorityGrouping+0x18>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f003 0307 	and.w	r3, r3, #7
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_EnableIRQ>:
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db0b      	blt.n	80037aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	4907      	ldr	r1, [pc, #28]	@ (80037b8 <__NVIC_EnableIRQ+0x38>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2001      	movs	r0, #1
 80037a2:	fa00 f202 	lsl.w	r2, r0, r2
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100

080037bc <__NVIC_SetPriority>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	6039      	str	r1, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	db0a      	blt.n	80037e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	490c      	ldr	r1, [pc, #48]	@ (8003808 <__NVIC_SetPriority+0x4c>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	440b      	add	r3, r1
 80037e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037e4:	e00a      	b.n	80037fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4908      	ldr	r1, [pc, #32]	@ (800380c <__NVIC_SetPriority+0x50>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	3b04      	subs	r3, #4
 80037f4:	0112      	lsls	r2, r2, #4
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	440b      	add	r3, r1
 80037fa:	761a      	strb	r2, [r3, #24]
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000e100 	.word	0xe000e100
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <NVIC_EncodePriority>:
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	@ 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0307 	rsb	r3, r3, #7
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf28      	it	cs
 800382e:	2304      	movcs	r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	2b06      	cmp	r3, #6
 8003838:	d902      	bls.n	8003840 <NVIC_EncodePriority+0x30>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3b03      	subs	r3, #3
 800383e:	e000      	b.n	8003842 <NVIC_EncodePriority+0x32>
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	f04f 32ff 	mov.w	r2, #4294967295
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	401a      	ands	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003858:	f04f 31ff 	mov.w	r1, #4294967295
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa01 f303 	lsl.w	r3, r1, r3
 8003862:	43d9      	mvns	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	4313      	orrs	r3, r2
}
 800386a:	4618      	mov	r0, r3
 800386c:	3724      	adds	r7, #36	@ 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff4c 	bl	800371c <__NVIC_SetPriorityGrouping>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800389e:	f7ff ff61 	bl	8003764 <__NVIC_GetPriorityGrouping>
 80038a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	6978      	ldr	r0, [r7, #20]
 80038aa:	f7ff ffb1 	bl	8003810 <NVIC_EncodePriority>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ff80 	bl	80037bc <__NVIC_SetPriority>
}
 80038bc:	bf00      	nop
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff54 	bl	8003780 <__NVIC_EnableIRQ>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ee:	e166      	b.n	8003bbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	4013      	ands	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8158 	beq.w	8003bb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d005      	beq.n	8003920 <HAL_GPIO_Init+0x40>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d130      	bne.n	8003982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003956:	2201      	movs	r2, #1
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4013      	ands	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0201 	and.w	r2, r3, #1
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d017      	beq.n	80039be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d123      	bne.n	8003a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	08da      	lsrs	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3208      	adds	r2, #8
 80039d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	220f      	movs	r2, #15
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	6939      	ldr	r1, [r7, #16]
 8003a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80b2 	beq.w	8003bb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a54:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <HAL_GPIO_Init+0x2fc>)
 8003a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a58:	4a60      	ldr	r2, [pc, #384]	@ (8003bdc <HAL_GPIO_Init+0x2fc>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a60:	4b5e      	ldr	r3, [pc, #376]	@ (8003bdc <HAL_GPIO_Init+0x2fc>)
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003be0 <HAL_GPIO_Init+0x300>)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	220f      	movs	r2, #15
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a96:	d02b      	beq.n	8003af0 <HAL_GPIO_Init+0x210>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a52      	ldr	r2, [pc, #328]	@ (8003be4 <HAL_GPIO_Init+0x304>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d025      	beq.n	8003aec <HAL_GPIO_Init+0x20c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a51      	ldr	r2, [pc, #324]	@ (8003be8 <HAL_GPIO_Init+0x308>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01f      	beq.n	8003ae8 <HAL_GPIO_Init+0x208>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	@ (8003bec <HAL_GPIO_Init+0x30c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d019      	beq.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a4f      	ldr	r2, [pc, #316]	@ (8003bf0 <HAL_GPIO_Init+0x310>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_GPIO_Init+0x200>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf4 <HAL_GPIO_Init+0x314>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00d      	beq.n	8003adc <HAL_GPIO_Init+0x1fc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf8 <HAL_GPIO_Init+0x318>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d007      	beq.n	8003ad8 <HAL_GPIO_Init+0x1f8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a4c      	ldr	r2, [pc, #304]	@ (8003bfc <HAL_GPIO_Init+0x31c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_GPIO_Init+0x1f4>
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	e00e      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	e00c      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003ad8:	2306      	movs	r3, #6
 8003ada:	e00a      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003adc:	2305      	movs	r3, #5
 8003ade:	e008      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	e006      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e004      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e002      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_GPIO_Init+0x212>
 8003af0:	2300      	movs	r3, #0
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	f002 0203 	and.w	r2, r2, #3
 8003af8:	0092      	lsls	r2, r2, #2
 8003afa:	4093      	lsls	r3, r2
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b02:	4937      	ldr	r1, [pc, #220]	@ (8003be0 <HAL_GPIO_Init+0x300>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b10:	4b3b      	ldr	r3, [pc, #236]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b34:	4a32      	ldr	r2, [pc, #200]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b3a:	4b31      	ldr	r3, [pc, #196]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b5e:	4a28      	ldr	r2, [pc, #160]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b64:	4b26      	ldr	r3, [pc, #152]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b88:	4a1d      	ldr	r2, [pc, #116]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bb2:	4a13      	ldr	r2, [pc, #76]	@ (8003c00 <HAL_GPIO_Init+0x320>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f ae91 	bne.w	80038f0 <HAL_GPIO_Init+0x10>
  }
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40010000 	.word	0x40010000
 8003be4:	48000400 	.word	0x48000400
 8003be8:	48000800 	.word	0x48000800
 8003bec:	48000c00 	.word	0x48000c00
 8003bf0:	48001000 	.word	0x48001000
 8003bf4:	48001400 	.word	0x48001400
 8003bf8:	48001800 	.word	0x48001800
 8003bfc:	48001c00 	.word	0x48001c00
 8003c00:	40010400 	.word	0x40010400

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43d9      	mvns	r1, r3
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	400b      	ands	r3, r1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e101      	b.n	8003e7e <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd ff12 	bl	8001ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2203      	movs	r2, #3
 8003c98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 fd8e 	bl	80067c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7c1a      	ldrb	r2, [r3, #16]
 8003cb4:	f88d 2000 	strb.w	r2, [sp]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cbc:	f002 fd57 	bl	800676e <USB_CoreInit>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0d5      	b.n	8003e7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 fd86 	bl	80067ea <USB_SetCurrentMode>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0c6      	b.n	8003e7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e04a      	b.n	8003d8c <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3315      	adds	r3, #21
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3314      	adds	r3, #20
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	b298      	uxth	r0, r3
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	332e      	adds	r3, #46	@ 0x2e
 8003d32:	4602      	mov	r2, r0
 8003d34:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3318      	adds	r3, #24
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d4a:	7bfa      	ldrb	r2, [r7, #15]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	331c      	adds	r3, #28
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	3320      	adds	r3, #32
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3324      	adds	r3, #36	@ 0x24
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d3af      	bcc.n	8003cf6 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e044      	b.n	8003e26 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003db2:	7bfa      	ldrb	r2, [r7, #15]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dde:	7bfa      	ldrb	r2, [r7, #15]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	791b      	ldrb	r3, [r3, #4]
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3b5      	bcc.n	8003d9c <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7c1a      	ldrb	r2, [r3, #16]
 8003e38:	f88d 2000 	strb.w	r2, [sp]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e40:	f002 fd20 	bl	8006884 <USB_DevInit>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e013      	b.n	8003e7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7b1b      	ldrb	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d102      	bne.n	8003e72 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f80a 	bl	8003e86 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fec5 	bl	8006c06 <USB_DevDisconnect>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	f043 0303 	orr.w	r3, r3, #3
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	@ (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40007000 	.word	0x40007000

08003ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1a:	d130      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1c:	4b23      	ldr	r3, [pc, #140]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f28:	d038      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f32:	4a1e      	ldr	r2, [pc, #120]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2232      	movs	r2, #50	@ 0x32
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	4a1b      	ldr	r2, [pc, #108]	@ (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f50:	e002      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f58:	4b14      	ldr	r3, [pc, #80]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f64:	d102      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f2      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f78:	d110      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00f      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d007      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f8c:	4b07      	ldr	r3, [pc, #28]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f94:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	431bde83 	.word	0x431bde83

08003fb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fc6:	6053      	str	r3, [r2, #4]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40007000 	.word	0x40007000

08003fd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	@ (8003ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003fe2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe6:	6053      	str	r3, [r2, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40007000 	.word	0x40007000

08003ff8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d102      	bne.n	800400c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f000 bc08 	b.w	800481c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400c:	4b96      	ldr	r3, [pc, #600]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004016:	4b94      	ldr	r3, [pc, #592]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80e4 	beq.w	80041f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x4c>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	f040 808b 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 8087 	bne.w	8004152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004044:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x64>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e3df      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	4b81      	ldr	r3, [pc, #516]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d004      	beq.n	8004076 <HAL_RCC_OscConfig+0x7e>
 800406c:	4b7e      	ldr	r3, [pc, #504]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004074:	e005      	b.n	8004082 <HAL_RCC_OscConfig+0x8a>
 8004076:	4b7c      	ldr	r3, [pc, #496]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004082:	4293      	cmp	r3, r2
 8004084:	d223      	bcs.n	80040ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fdc4 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e3c0      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409a:	4b73      	ldr	r3, [pc, #460]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a72      	ldr	r2, [pc, #456]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b70      	ldr	r3, [pc, #448]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	496d      	ldr	r1, [pc, #436]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	4968      	ldr	r1, [pc, #416]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	e025      	b.n	800411a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ce:	4b66      	ldr	r3, [pc, #408]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b63      	ldr	r3, [pc, #396]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4960      	ldr	r1, [pc, #384]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	495b      	ldr	r1, [pc, #364]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fd84 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e380      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411a:	f000 fc87 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b51      	ldr	r3, [pc, #324]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4950      	ldr	r1, [pc, #320]	@ (800426c <HAL_RCC_OscConfig+0x274>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	fa22 f303 	lsr.w	r3, r2, r3
 8004136:	4a4e      	ldr	r2, [pc, #312]	@ (8004270 <HAL_RCC_OscConfig+0x278>)
 8004138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800413a:	4b4e      	ldr	r3, [pc, #312]	@ (8004274 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fd26 	bl	8001b90 <HAL_InitTick>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d052      	beq.n	80041f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	e364      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d032      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a42      	ldr	r2, [pc, #264]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004166:	f7fd feb9 	bl	8001edc <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800416e:	f7fd feb5 	bl	8001edc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e34d      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004180:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418c:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a35      	ldr	r2, [pc, #212]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004192:	f043 0308 	orr.w	r3, r3, #8
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b33      	ldr	r3, [pc, #204]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4930      	ldr	r1, [pc, #192]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	492b      	ldr	r1, [pc, #172]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	e01a      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a28      	ldr	r2, [pc, #160]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fe86 	bl	8001edc <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d4:	f7fd fe82 	bl	8001edc <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e31a      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1dc>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d073      	beq.n	80042ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d005      	beq.n	8004214 <HAL_RCC_OscConfig+0x21c>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d10e      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d063      	beq.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d15f      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e2f7      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d106      	bne.n	8004244 <HAL_RCC_OscConfig+0x24c>
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e025      	b.n	8004290 <HAL_RCC_OscConfig+0x298>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800424c:	d114      	bne.n	8004278 <HAL_RCC_OscConfig+0x280>
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCC_OscConfig+0x270>)
 8004260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e013      	b.n	8004290 <HAL_RCC_OscConfig+0x298>
 8004268:	40021000 	.word	0x40021000
 800426c:	0800bfa4 	.word	0x0800bfa4
 8004270:	20000000 	.word	0x20000000
 8004274:	20000004 	.word	0x20000004
 8004278:	4ba0      	ldr	r3, [pc, #640]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a9f      	ldr	r2, [pc, #636]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b9d      	ldr	r3, [pc, #628]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a9c      	ldr	r2, [pc, #624]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004298:	f7fd fe20 	bl	8001edc <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd fe1c 	bl	8001edc <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	@ 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e2b4      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b2:	4b92      	ldr	r3, [pc, #584]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x2a8>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd fe0c 	bl	8001edc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd fe08 	bl	8001edc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e2a0      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042da:	4b88      	ldr	r3, [pc, #544]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x2d0>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d060      	beq.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x310>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d119      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d116      	bne.n	8004336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	4b7c      	ldr	r3, [pc, #496]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x328>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e27d      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	4973      	ldr	r1, [pc, #460]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004334:	e040      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d023      	beq.n	8004386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433e:	4b6f      	ldr	r3, [pc, #444]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6e      	ldr	r2, [pc, #440]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd fdc7 	bl	8001edc <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004352:	f7fd fdc3 	bl	8001edc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e25b      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004364:	4b65      	ldr	r3, [pc, #404]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004370:	4b62      	ldr	r3, [pc, #392]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	495f      	ldr	r1, [pc, #380]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004386:	4b5d      	ldr	r3, [pc, #372]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a5c      	ldr	r2, [pc, #368]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800438c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004392:	f7fd fda3 	bl	8001edc <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439a:	f7fd fd9f 	bl	8001edc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e237      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ac:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d03c      	beq.n	800443e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01c      	beq.n	8004406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043cc:	4b4b      	ldr	r3, [pc, #300]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d2:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fd fd7e 	bl	8001edc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd fd7a 	bl	8001edc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e212      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f6:	4b41      	ldr	r3, [pc, #260]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ef      	beq.n	80043e4 <HAL_RCC_OscConfig+0x3ec>
 8004404:	e01b      	b.n	800443e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004406:	4b3d      	ldr	r3, [pc, #244]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440c:	4a3b      	ldr	r2, [pc, #236]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fd fd61 	bl	8001edc <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441e:	f7fd fd5d 	bl	8001edc <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1f5      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004430:	4b32      	ldr	r3, [pc, #200]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ef      	bne.n	800441e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004450:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10d      	bne.n	8004478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445c:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	4a26      	ldr	r2, [pc, #152]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 8004462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004466:	6593      	str	r3, [r2, #88]	@ 0x58
 8004468:	4b24      	ldr	r3, [pc, #144]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004478:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d118      	bne.n	80044b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004484:	4b1e      	ldr	r3, [pc, #120]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004490:	f7fd fd24 	bl	8001edc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004498:	f7fd fd20 	bl	8001edc <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1b8      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <HAL_RCC_OscConfig+0x508>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_RCC_OscConfig+0x4d8>
 80044be:	4b0f      	ldr	r3, [pc, #60]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	4a0d      	ldr	r2, [pc, #52]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ce:	e029      	b.n	8004524 <HAL_RCC_OscConfig+0x52c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d115      	bne.n	8004504 <HAL_RCC_OscConfig+0x50c>
 80044d8:	4b08      	ldr	r3, [pc, #32]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044de:	4a07      	ldr	r2, [pc, #28]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	4a03      	ldr	r2, [pc, #12]	@ (80044fc <HAL_RCC_OscConfig+0x504>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044f8:	e014      	b.n	8004524 <HAL_RCC_OscConfig+0x52c>
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	40007000 	.word	0x40007000
 8004504:	4b9d      	ldr	r3, [pc, #628]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450a:	4a9c      	ldr	r2, [pc, #624]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004514:	4b99      	ldr	r3, [pc, #612]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	4a98      	ldr	r2, [pc, #608]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fcd6 	bl	8001edc <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004532:	e00a      	b.n	800454a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd fcd2 	bl	8001edc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e168      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454a:	4b8c      	ldr	r3, [pc, #560]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ed      	beq.n	8004534 <HAL_RCC_OscConfig+0x53c>
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd fcbf 	bl	8001edc <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fd fcbb 	bl	8001edc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e151      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004578:	4b80      	ldr	r3, [pc, #512]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ed      	bne.n	8004562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458c:	4b7b      	ldr	r3, [pc, #492]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	4a7a      	ldr	r2, [pc, #488]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03c      	beq.n	800461e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ac:	4b73      	ldr	r3, [pc, #460]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b2:	4a72      	ldr	r2, [pc, #456]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd fc8e 	bl	8001edc <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c4:	f7fd fc8a 	bl	8001edc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e122      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d6:	4b69      	ldr	r3, [pc, #420]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCC_OscConfig+0x5cc>
 80045e4:	e01b      	b.n	800461e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b65      	ldr	r3, [pc, #404]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045ec:	4a63      	ldr	r2, [pc, #396]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fc71 	bl	8001edc <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fd fc6d 	bl	8001edc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e105      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004610:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80f9 	beq.w	800481a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	2b02      	cmp	r3, #2
 800462e:	f040 80cf 	bne.w	80047d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004632:	4b52      	ldr	r3, [pc, #328]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0203 	and.w	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	429a      	cmp	r2, r3
 8004644:	d12c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	3b01      	subs	r3, #1
 8004652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d123      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d11b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d113      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	3b01      	subs	r3, #1
 800469a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d071      	beq.n	8004784 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d068      	beq.n	8004778 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a6:	4b35      	ldr	r3, [pc, #212]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046b2:	4b32      	ldr	r3, [pc, #200]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e0ac      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046c2:	4b2e      	ldr	r3, [pc, #184]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ce:	f7fd fc05 	bl	8001edc <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fd fc01 	bl	8001edc <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e099      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e8:	4b24      	ldr	r3, [pc, #144]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f4:	4b21      	ldr	r3, [pc, #132]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b21      	ldr	r3, [pc, #132]	@ (8004780 <HAL_RCC_OscConfig+0x788>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004704:	3a01      	subs	r2, #1
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800470e:	0212      	lsls	r2, r2, #8
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004716:	0852      	lsrs	r2, r2, #1
 8004718:	3a01      	subs	r2, #1
 800471a:	0552      	lsls	r2, r2, #21
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0652      	lsls	r2, r2, #25
 8004728:	4311      	orrs	r1, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800472e:	06d2      	lsls	r2, r2, #27
 8004730:	430a      	orrs	r2, r1
 8004732:	4912      	ldr	r1, [pc, #72]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a0f      	ldr	r2, [pc, #60]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004744:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800474e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004750:	f7fd fbc4 	bl	8001edc <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fbc0 	bl	8001edc <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e058      	b.n	800481c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b04      	ldr	r3, [pc, #16]	@ (800477c <HAL_RCC_OscConfig+0x784>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004776:	e050      	b.n	800481a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04f      	b.n	800481c <HAL_RCC_OscConfig+0x824>
 800477c:	40021000 	.word	0x40021000
 8004780:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d144      	bne.n	800481a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004790:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a23      	ldr	r2, [pc, #140]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800479c:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047a8:	f7fd fb98 	bl	8001edc <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fd fb94 	bl	8001edc <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e02c      	b.n	800481c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x7b8>
 80047ce:	e024      	b.n	800481a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d01f      	beq.n	8004816 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b13      	ldr	r3, [pc, #76]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fd fb7b 	bl	8001edc <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ea:	f7fd fb77 	bl	8001edc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e00f      	b.n	800481c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4905      	ldr	r1, [pc, #20]	@ (8004824 <HAL_RCC_OscConfig+0x82c>)
 800480e:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <HAL_RCC_OscConfig+0x830>)
 8004810:	4013      	ands	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
 8004814:	e001      	b.n	800481a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	feeefffc 	.word	0xfeeefffc

0800482c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0e7      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004840:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d910      	bls.n	8004870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4970      	ldr	r1, [pc, #448]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b6e      	ldr	r3, [pc, #440]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cf      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	4b66      	ldr	r3, [pc, #408]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004888:	429a      	cmp	r2, r3
 800488a:	d908      	bls.n	800489e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b63      	ldr	r3, [pc, #396]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4960      	ldr	r1, [pc, #384]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d04c      	beq.n	8004944 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d121      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0a6      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ca:	4b54      	ldr	r3, [pc, #336]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d115      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e09a      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e08e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e086      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b46      	ldr	r3, [pc, #280]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4943      	ldr	r1, [pc, #268]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fd fae2 	bl	8001edc <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd fade 	bl	8001edc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e06e      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b3a      	ldr	r3, [pc, #232]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b2e      	ldr	r3, [pc, #184]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	492b      	ldr	r1, [pc, #172]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4b29      	ldr	r3, [pc, #164]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d210      	bcs.n	80049a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 0207 	bic.w	r2, r3, #7
 8004988:	4923      	ldr	r1, [pc, #140]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCC_ClockConfig+0x1ec>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e036      	b.n	8004a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	4918      	ldr	r1, [pc, #96]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4910      	ldr	r1, [pc, #64]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e0:	f000 f824 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	490b      	ldr	r1, [pc, #44]	@ (8004a20 <HAL_RCC_ClockConfig+0x1f4>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
 80049fc:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <HAL_RCC_ClockConfig+0x1f8>)
 80049fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_ClockConfig+0x1fc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd f8c3 	bl	8001b90 <HAL_InitTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800bfa4 	.word	0x0800bfa4
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	@ 0x24
 8004a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b3b      	ldr	r3, [pc, #236]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d121      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a60:	4b34      	ldr	r3, [pc, #208]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a6c:	4b31      	ldr	r3, [pc, #196]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a88:	4a2b      	ldr	r2, [pc, #172]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d134      	bne.n	8004b24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aba:	4b1e      	ldr	r3, [pc, #120]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ad0:	e005      	b.n	8004ade <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	e005      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ada:	617b      	str	r3, [r7, #20]
      break;
 8004adc:	e002      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	617b      	str	r3, [r7, #20]
      break;
 8004ae2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae4:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	3301      	adds	r3, #1
 8004af0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004af2:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	fb03 f202 	mul.w	r2, r3, r2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	0e5b      	lsrs	r3, r3, #25
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	3301      	adds	r3, #1
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b24:	69bb      	ldr	r3, [r7, #24]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3724      	adds	r7, #36	@ 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800bfbc 	.word	0x0800bfbc
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000
 8004b84:	0800bfb4 	.word	0x0800bfb4

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b8c:	f7ff ffda 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0adb      	lsrs	r3, r3, #11
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4904      	ldr	r1, [pc, #16]	@ (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800bfb4 	.word	0x0800bfb4

08004bb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	220f      	movs	r2, #15
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0203 	and.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <HAL_RCC_GetClockConfig+0x5c>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <HAL_RCC_GetClockConfig+0x5c>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bf6:	4b07      	ldr	r3, [pc, #28]	@ (8004c14 <HAL_RCC_GetClockConfig+0x60>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0207 	and.w	r2, r3, #7
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40022000 	.word	0x40022000

08004c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c30:	f7ff f95e 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004c34:	6178      	str	r0, [r7, #20]
 8004c36:	e014      	b.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3c:	4a24      	ldr	r2, [pc, #144]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c44:	4b22      	ldr	r3, [pc, #136]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c50:	f7ff f94e 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004c54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c56:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c68:	d10b      	bne.n	8004c82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b80      	cmp	r3, #128	@ 0x80
 8004c6e:	d919      	bls.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c74:	d902      	bls.n	8004c7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c76:	2302      	movs	r3, #2
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e013      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	e010      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b80      	cmp	r3, #128	@ 0x80
 8004c86:	d902      	bls.n	8004c8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c88:	2303      	movs	r3, #3
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e00a      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b80      	cmp	r3, #128	@ 0x80
 8004c92:	d102      	bne.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c94:	2302      	movs	r3, #2
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e004      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b70      	cmp	r3, #112	@ 0x70
 8004c9e:	d101      	bne.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	4909      	ldr	r1, [pc, #36]	@ (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d001      	beq.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40022000 	.word	0x40022000

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d041      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cf8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cfc:	d02a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d02:	d824      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d08:	d008      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d0e:	d81e      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d18:	d010      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d1c:	4b86      	ldr	r3, [pc, #536]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a85      	ldr	r2, [pc, #532]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d28:	e015      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fadd 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d3a:	e00c      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3320      	adds	r3, #32
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fbc6 	bl	80054d4 <RCCEx_PLLSAI2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d4c:	e003      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	74fb      	strb	r3, [r7, #19]
      break;
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5c:	4b76      	ldr	r3, [pc, #472]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6a:	4973      	ldr	r1, [pc, #460]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d72:	e001      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d041      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d8c:	d02a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d92:	d824      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d98:	d008      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d9e:	d81e      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004da8:	d010      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004daa:	e018      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dac:	4b62      	ldr	r3, [pc, #392]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a61      	ldr	r2, [pc, #388]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004db8:	e015      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fa95 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dca:	e00c      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3320      	adds	r3, #32
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb7e 	bl	80054d4 <RCCEx_PLLSAI2_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ddc:	e003      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	74fb      	strb	r3, [r7, #19]
      break;
 8004de2:	e000      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dec:	4b52      	ldr	r3, [pc, #328]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dfa:	494f      	ldr	r1, [pc, #316]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e02:	e001      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a0 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b41      	ldr	r3, [pc, #260]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e34:	4a40      	ldr	r2, [pc, #256]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3a      	ldr	r2, [pc, #232]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e58:	f7fd f840 	bl	8001edc <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e5e:	e009      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e60:	f7fd f83c 	bl	8001edc <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d902      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	74fb      	strb	r3, [r7, #19]
        break;
 8004e72:	e005      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e74:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ef      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d15c      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e86:	4b2c      	ldr	r3, [pc, #176]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01f      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d019      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ea4:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb0:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	4a20      	ldr	r2, [pc, #128]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fc fffb 	bl	8001edc <HAL_GetTick>
 8004ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee8:	e00b      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fc fff7 	bl	8001edc <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d902      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	74fb      	strb	r3, [r7, #19]
            break;
 8004f00:	e006      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f02:	4b0d      	ldr	r3, [pc, #52]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0ec      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f16:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	4904      	ldr	r1, [pc, #16]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f2e:	e009      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
 8004f34:	e006      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f44:	7c7b      	ldrb	r3, [r7, #17]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	4aa5      	ldr	r2, [pc, #660]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f62:	4ba0      	ldr	r3, [pc, #640]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	f023 0203 	bic.w	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	499c      	ldr	r1, [pc, #624]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f84:	4b97      	ldr	r3, [pc, #604]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f8a:	f023 020c 	bic.w	r2, r3, #12
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f92:	4994      	ldr	r1, [pc, #592]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	498b      	ldr	r1, [pc, #556]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fc8:	4b86      	ldr	r3, [pc, #536]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	4983      	ldr	r1, [pc, #524]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fea:	4b7e      	ldr	r3, [pc, #504]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	497a      	ldr	r1, [pc, #488]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800500c:	4b75      	ldr	r3, [pc, #468]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005012:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501a:	4972      	ldr	r1, [pc, #456]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800502e:	4b6d      	ldr	r3, [pc, #436]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503c:	4969      	ldr	r1, [pc, #420]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005050:	4b64      	ldr	r3, [pc, #400]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800505e:	4961      	ldr	r1, [pc, #388]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005072:	4b5c      	ldr	r3, [pc, #368]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	4958      	ldr	r1, [pc, #352]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005094:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a2:	4950      	ldr	r1, [pc, #320]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050b6:	4b4b      	ldr	r3, [pc, #300]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c4:	4947      	ldr	r1, [pc, #284]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050d8:	4b42      	ldr	r3, [pc, #264]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	493f      	ldr	r1, [pc, #252]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d028      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050fa:	4b3a      	ldr	r3, [pc, #232]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4936      	ldr	r1, [pc, #216]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005118:	d106      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511a:	4b32      	ldr	r3, [pc, #200]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4a31      	ldr	r2, [pc, #196]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005124:	60d3      	str	r3, [r2, #12]
 8005126:	e011      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005130:	d10c      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	2101      	movs	r1, #1
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f8d9 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d028      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005158:	4b22      	ldr	r3, [pc, #136]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005166:	491f      	ldr	r1, [pc, #124]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005176:	d106      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005178:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800517e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005182:	60d3      	str	r3, [r2, #12]
 8005184:	e011      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800518e:	d10c      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f8aa 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d02a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051c4:	4907      	ldr	r1, [pc, #28]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d4:	d108      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d6:	4b03      	ldr	r3, [pc, #12]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4a02      	ldr	r2, [pc, #8]	@ (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e0:	60d3      	str	r3, [r2, #12]
 80051e2:	e013      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80051e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f0:	d10c      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 f879 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005208:	7cfb      	ldrb	r3, [r7, #19]
 800520a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02f      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005218:	4b2c      	ldr	r3, [pc, #176]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005226:	4929      	ldr	r1, [pc, #164]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005232:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005236:	d10d      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2102      	movs	r1, #2
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f856 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	74bb      	strb	r3, [r7, #18]
 8005252:	e011      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800525c:	d10c      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3320      	adds	r3, #32
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f935 	bl	80054d4 <RCCEx_PLLSAI2_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005284:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005294:	490d      	ldr	r1, [pc, #52]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052a8:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b8:	4904      	ldr	r1, [pc, #16]	@ (80052cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052d4:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	@ (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000

080052f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fe:	4b74      	ldr	r3, [pc, #464]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800530a:	4b71      	ldr	r3, [pc, #452]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
       ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005322:	4b6b      	ldr	r3, [pc, #428]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
       ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d047      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e044      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x86>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x62>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x74>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b5f      	ldr	r3, [pc, #380]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5a      	ldr	r3, [pc, #360]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b56      	ldr	r3, [pc, #344]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b53      	ldr	r3, [pc, #332]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053aa:	4b49      	ldr	r3, [pc, #292]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	430b      	orrs	r3, r1
 80053c0:	4943      	ldr	r1, [pc, #268]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d17c      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053cc:	4b40      	ldr	r3, [pc, #256]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3f      	ldr	r2, [pc, #252]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d8:	f7fc fd80 	bl	8001edc <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053de:	e009      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e0:	f7fc fd7c 	bl	8001edc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
        break;
 80053f2:	e005      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ef      	bne.n	80053e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15f      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540c:	4b30      	ldr	r3, [pc, #192]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005414:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	430a      	orrs	r2, r1
 8005426:	492a      	ldr	r1, [pc, #168]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
 800542c:	e027      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d112      	bne.n	800545a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005434:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0552      	lsls	r2, r2, #21
 8005450:	430a      	orrs	r2, r1
 8005452:	491f      	ldr	r1, [pc, #124]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
 8005458:	e011      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005462:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6952      	ldr	r2, [r2, #20]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0652      	lsls	r2, r2, #25
 8005476:	430a      	orrs	r2, r1
 8005478:	4915      	ldr	r1, [pc, #84]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800547e:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fc fd27 	bl	8001edc <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	e009      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005492:	f7fc fd23 	bl	8001edc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
          break;
 80054a4:	e005      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4903      	ldr	r1, [pc, #12]	@ (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054e2:	4b69      	ldr	r3, [pc, #420]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d018      	beq.n	8005520 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054ee:	4b66      	ldr	r3, [pc, #408]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0203 	and.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10d      	bne.n	800551a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
       ||
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005506:	4b60      	ldr	r3, [pc, #384]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
       ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d047      	beq.n	80055aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e044      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d018      	beq.n	800555a <RCCEx_PLLSAI2_Config+0x86>
 8005528:	2b03      	cmp	r3, #3
 800552a:	d825      	bhi.n	8005578 <RCCEx_PLLSAI2_Config+0xa4>
 800552c:	2b01      	cmp	r3, #1
 800552e:	d002      	beq.n	8005536 <RCCEx_PLLSAI2_Config+0x62>
 8005530:	2b02      	cmp	r3, #2
 8005532:	d009      	beq.n	8005548 <RCCEx_PLLSAI2_Config+0x74>
 8005534:	e020      	b.n	8005578 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005536:	4b54      	ldr	r3, [pc, #336]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11d      	bne.n	800557e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005546:	e01a      	b.n	800557e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005548:	4b4f      	ldr	r3, [pc, #316]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005558:	e013      	b.n	8005582 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800555a:	4b4b      	ldr	r3, [pc, #300]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005566:	4b48      	ldr	r3, [pc, #288]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005576:	e006      	b.n	8005586 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      break;
 800557c:	e004      	b.n	8005588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005586:	bf00      	nop
    }

    if(status == HAL_OK)
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	430b      	orrs	r3, r1
 80055a4:	4938      	ldr	r1, [pc, #224]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d166      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055b0:	4b35      	ldr	r3, [pc, #212]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a34      	ldr	r2, [pc, #208]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055bc:	f7fc fc8e 	bl	8001edc <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c2:	e009      	b.n	80055d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c4:	f7fc fc8a 	bl	8001edc <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d902      	bls.n	80055d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	73fb      	strb	r3, [r7, #15]
        break;
 80055d6:	e005      	b.n	80055e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1ef      	bne.n	80055c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d149      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d110      	bne.n	8005612 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f0:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80055f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6892      	ldr	r2, [r2, #8]
 8005600:	0211      	lsls	r1, r2, #8
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68d2      	ldr	r2, [r2, #12]
 8005606:	06d2      	lsls	r2, r2, #27
 8005608:	430a      	orrs	r2, r1
 800560a:	491f      	ldr	r1, [pc, #124]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 800560c:	4313      	orrs	r3, r2
 800560e:	614b      	str	r3, [r1, #20]
 8005610:	e011      	b.n	8005636 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005612:	4b1d      	ldr	r3, [pc, #116]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800561a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6892      	ldr	r2, [r2, #8]
 8005622:	0211      	lsls	r1, r2, #8
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6912      	ldr	r2, [r2, #16]
 8005628:	0852      	lsrs	r2, r2, #1
 800562a:	3a01      	subs	r2, #1
 800562c:	0652      	lsls	r2, r2, #25
 800562e:	430a      	orrs	r2, r1
 8005630:	4915      	ldr	r1, [pc, #84]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005636:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fc fc4b 	bl	8001edc <HAL_GetTick>
 8005646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005648:	e009      	b.n	800565e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800564a:	f7fc fc47 	bl	8001edc <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d902      	bls.n	800565e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	73fb      	strb	r3, [r7, #15]
          break;
 800565c:	e005      	b.n	800566a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0ef      	beq.n	800564a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800566a:	7bfb      	ldrb	r3, [r7, #15]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005670:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	4903      	ldr	r1, [pc, #12]	@ (8005688 <RCCEx_PLLSAI2_Config+0x1b4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e049      	b.n	8005732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f841 	bl	800573a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 f9e0 	bl	8005a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b01      	cmp	r3, #1
 8005762:	d001      	beq.n	8005768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e04f      	b.n	8005808 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a23      	ldr	r2, [pc, #140]	@ (8005814 <HAL_TIM_Base_Start_IT+0xc4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005792:	d018      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <HAL_TIM_Base_Start_IT+0xc8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	@ (800581c <HAL_TIM_Base_Start_IT+0xcc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_TIM_Base_Start_IT+0xd0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <HAL_TIM_Base_Start_IT+0xd4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x76>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <HAL_TIM_Base_Start_IT+0xd8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d115      	bne.n	80057f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4b17      	ldr	r3, [pc, #92]	@ (800582c <HAL_TIM_Base_Start_IT+0xdc>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	d015      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0xb4>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057de:	d011      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f0:	e008      	b.n	8005804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f042 0201 	orr.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e000      	b.n	8005806 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40013400 	.word	0x40013400
 8005828:	40014000 	.word	0x40014000
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0202 	mvn.w	r2, #2
 8005864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8e9 	bl	8005a52 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8db 	bl	8005a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8ec 	bl	8005a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8c3 	bl	8005a52 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8b5 	bl	8005a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8c6 	bl	8005a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d020      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01b      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0208 	mvn.w	r2, #8
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f89d 	bl	8005a52 <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f88f 	bl	8005a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8a0 	bl	8005a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	d020      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f877 	bl	8005a52 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f869 	bl	8005a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f87a 	bl	8005a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d007      	beq.n	800599c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb ffb0 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f913 	bl	8005bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00c      	beq.n	80059ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f90b 	bl	8005c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f834 	bl	8005a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f06f 0220 	mvn.w	r2, #32
 8005a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8d3 	bl	8005bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a46      	ldr	r2, [pc, #280]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d013      	beq.n	8005ad0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0x40>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a43      	ldr	r2, [pc, #268]	@ (8005bc0 <TIM_Base_SetConfig+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x40>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a42      	ldr	r2, [pc, #264]	@ (8005bc4 <TIM_Base_SetConfig+0x134>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x40>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	@ (8005bc8 <TIM_Base_SetConfig+0x138>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a40      	ldr	r2, [pc, #256]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01f      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af0:	d01b      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a32      	ldr	r2, [pc, #200]	@ (8005bc0 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d017      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a31      	ldr	r2, [pc, #196]	@ (8005bc4 <TIM_Base_SetConfig+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a30      	ldr	r2, [pc, #192]	@ (8005bc8 <TIM_Base_SetConfig+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2e      	ldr	r2, [pc, #184]	@ (8005bd0 <TIM_Base_SetConfig+0x140>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <TIM_Base_SetConfig+0x144>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd8 <TIM_Base_SetConfig+0x148>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00f      	beq.n	8005b88 <TIM_Base_SetConfig+0xf8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00b      	beq.n	8005b88 <TIM_Base_SetConfig+0xf8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <TIM_Base_SetConfig+0x140>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d007      	beq.n	8005b88 <TIM_Base_SetConfig+0xf8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a16      	ldr	r2, [pc, #88]	@ (8005bd4 <TIM_Base_SetConfig+0x144>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_Base_SetConfig+0xf8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a15      	ldr	r2, [pc, #84]	@ (8005bd8 <TIM_Base_SetConfig+0x148>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d103      	bne.n	8005b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d105      	bne.n	8005bae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f023 0201 	bic.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	611a      	str	r2, [r3, #16]
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40014400 	.word	0x40014400
 8005bd8:	40014800 	.word	0x40014800

08005bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e040      	b.n	8005cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb fedc 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	@ 0x24
 8005c44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb6a 	bl	8006338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f8af 	bl	8005dc8 <UART_SetConfig>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e01b      	b.n	8005cac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fbe9 	bl	800647c <UART_CheckIdleState>
 8005caa:	4603      	mov	r3, r0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	@ 0x28
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d177      	bne.n	8005dbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Transmit+0x24>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e070      	b.n	8005dbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2221      	movs	r2, #33	@ 0x21
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cea:	f7fc f8f7 	bl	8001edc <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d08:	d108      	bne.n	8005d1c <HAL_UART_Transmit+0x68>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e003      	b.n	8005d24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d24:	e02f      	b.n	8005d86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2180      	movs	r1, #128	@ 0x80
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fc4b 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e03b      	b.n	8005dbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d58:	b292      	uxth	r2, r2
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e007      	b.n	8005d74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1c9      	bne.n	8005d26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2140      	movs	r1, #64	@ 0x40
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fc15 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e005      	b.n	8005dbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e000      	b.n	8005dbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
  }
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dcc:	b08a      	sub	sp, #40	@ 0x28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	4ba4      	ldr	r3, [pc, #656]	@ (8006088 <UART_SetConfig+0x2c0>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a99      	ldr	r2, [pc, #612]	@ (800608c <UART_SetConfig+0x2c4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	4313      	orrs	r3, r2
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a90      	ldr	r2, [pc, #576]	@ (8006090 <UART_SetConfig+0x2c8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d126      	bne.n	8005ea0 <UART_SetConfig+0xd8>
 8005e52:	4b90      	ldr	r3, [pc, #576]	@ (8006094 <UART_SetConfig+0x2cc>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d81b      	bhi.n	8005e98 <UART_SetConfig+0xd0>
 8005e60:	a201      	add	r2, pc, #4	@ (adr r2, 8005e68 <UART_SetConfig+0xa0>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e81 	.word	0x08005e81
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e116      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005e80:	2302      	movs	r3, #2
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e112      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e10e      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e10a      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e106      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7c      	ldr	r2, [pc, #496]	@ (8006098 <UART_SetConfig+0x2d0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d138      	bne.n	8005f1c <UART_SetConfig+0x154>
 8005eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8006094 <UART_SetConfig+0x2cc>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb0:	f003 030c 	and.w	r3, r3, #12
 8005eb4:	2b0c      	cmp	r3, #12
 8005eb6:	d82d      	bhi.n	8005f14 <UART_SetConfig+0x14c>
 8005eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <UART_SetConfig+0xf8>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ef5 	.word	0x08005ef5
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005f15 	.word	0x08005f15
 8005ed0:	08005f05 	.word	0x08005f05
 8005ed4:	08005f15 	.word	0x08005f15
 8005ed8:	08005f15 	.word	0x08005f15
 8005edc:	08005f15 	.word	0x08005f15
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005f15 	.word	0x08005f15
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efa:	e0d8      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005efc:	2302      	movs	r3, #2
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f02:	e0d4      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f04:	2304      	movs	r3, #4
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e0d0      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f0c:	2308      	movs	r3, #8
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e0cc      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f14:	2310      	movs	r3, #16
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1a:	e0c8      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5e      	ldr	r2, [pc, #376]	@ (800609c <UART_SetConfig+0x2d4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d125      	bne.n	8005f72 <UART_SetConfig+0x1aa>
 8005f26:	4b5b      	ldr	r3, [pc, #364]	@ (8006094 <UART_SetConfig+0x2cc>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f30:	2b30      	cmp	r3, #48	@ 0x30
 8005f32:	d016      	beq.n	8005f62 <UART_SetConfig+0x19a>
 8005f34:	2b30      	cmp	r3, #48	@ 0x30
 8005f36:	d818      	bhi.n	8005f6a <UART_SetConfig+0x1a2>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d00a      	beq.n	8005f52 <UART_SetConfig+0x18a>
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d814      	bhi.n	8005f6a <UART_SetConfig+0x1a2>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <UART_SetConfig+0x182>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d008      	beq.n	8005f5a <UART_SetConfig+0x192>
 8005f48:	e00f      	b.n	8005f6a <UART_SetConfig+0x1a2>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f50:	e0ad      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f52:	2302      	movs	r3, #2
 8005f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f58:	e0a9      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f60:	e0a5      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f62:	2308      	movs	r3, #8
 8005f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f68:	e0a1      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f70:	e09d      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a4a      	ldr	r2, [pc, #296]	@ (80060a0 <UART_SetConfig+0x2d8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d125      	bne.n	8005fc8 <UART_SetConfig+0x200>
 8005f7c:	4b45      	ldr	r3, [pc, #276]	@ (8006094 <UART_SetConfig+0x2cc>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f88:	d016      	beq.n	8005fb8 <UART_SetConfig+0x1f0>
 8005f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f8c:	d818      	bhi.n	8005fc0 <UART_SetConfig+0x1f8>
 8005f8e:	2b80      	cmp	r3, #128	@ 0x80
 8005f90:	d00a      	beq.n	8005fa8 <UART_SetConfig+0x1e0>
 8005f92:	2b80      	cmp	r3, #128	@ 0x80
 8005f94:	d814      	bhi.n	8005fc0 <UART_SetConfig+0x1f8>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <UART_SetConfig+0x1d8>
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d008      	beq.n	8005fb0 <UART_SetConfig+0x1e8>
 8005f9e:	e00f      	b.n	8005fc0 <UART_SetConfig+0x1f8>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa6:	e082      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fae:	e07e      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e07a      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbe:	e076      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc6:	e072      	b.n	80060ae <UART_SetConfig+0x2e6>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a35      	ldr	r2, [pc, #212]	@ (80060a4 <UART_SetConfig+0x2dc>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d12a      	bne.n	8006028 <UART_SetConfig+0x260>
 8005fd2:	4b30      	ldr	r3, [pc, #192]	@ (8006094 <UART_SetConfig+0x2cc>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe0:	d01a      	beq.n	8006018 <UART_SetConfig+0x250>
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe6:	d81b      	bhi.n	8006020 <UART_SetConfig+0x258>
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fec:	d00c      	beq.n	8006008 <UART_SetConfig+0x240>
 8005fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff2:	d815      	bhi.n	8006020 <UART_SetConfig+0x258>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <UART_SetConfig+0x238>
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffc:	d008      	beq.n	8006010 <UART_SetConfig+0x248>
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x258>
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006006:	e052      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006008:	2302      	movs	r3, #2
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600e:	e04e      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006016:	e04a      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601e:	e046      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006026:	e042      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a17      	ldr	r2, [pc, #92]	@ (800608c <UART_SetConfig+0x2c4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d13a      	bne.n	80060a8 <UART_SetConfig+0x2e0>
 8006032:	4b18      	ldr	r3, [pc, #96]	@ (8006094 <UART_SetConfig+0x2cc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006038:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800603c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006040:	d01a      	beq.n	8006078 <UART_SetConfig+0x2b0>
 8006042:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006046:	d81b      	bhi.n	8006080 <UART_SetConfig+0x2b8>
 8006048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604c:	d00c      	beq.n	8006068 <UART_SetConfig+0x2a0>
 800604e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006052:	d815      	bhi.n	8006080 <UART_SetConfig+0x2b8>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <UART_SetConfig+0x298>
 8006058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605c:	d008      	beq.n	8006070 <UART_SetConfig+0x2a8>
 800605e:	e00f      	b.n	8006080 <UART_SetConfig+0x2b8>
 8006060:	2300      	movs	r3, #0
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006066:	e022      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006068:	2302      	movs	r3, #2
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606e:	e01e      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006070:	2304      	movs	r3, #4
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006076:	e01a      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006078:	2308      	movs	r3, #8
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607e:	e016      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006086:	e012      	b.n	80060ae <UART_SetConfig+0x2e6>
 8006088:	efff69f3 	.word	0xefff69f3
 800608c:	40008000 	.word	0x40008000
 8006090:	40013800 	.word	0x40013800
 8006094:	40021000 	.word	0x40021000
 8006098:	40004400 	.word	0x40004400
 800609c:	40004800 	.word	0x40004800
 80060a0:	40004c00 	.word	0x40004c00
 80060a4:	40005000 	.word	0x40005000
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006330 <UART_SetConfig+0x568>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d17a      	bne.n	80061ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d824      	bhi.n	800610a <UART_SetConfig+0x342>
 80060c0:	a201      	add	r2, pc, #4	@ (adr r2, 80060c8 <UART_SetConfig+0x300>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	080060fb 	.word	0x080060fb
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800610b 	.word	0x0800610b
 80060e8:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe fd36 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80060f0:	61f8      	str	r0, [r7, #28]
        break;
 80060f2:	e010      	b.n	8006116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006334 <UART_SetConfig+0x56c>)
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e00d      	b.n	8006116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7fe fc97 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80060fe:	61f8      	str	r0, [r7, #28]
        break;
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006106:	61fb      	str	r3, [r7, #28]
        break;
 8006108:	e005      	b.n	8006116 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80fb 	beq.w	8006314 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4413      	add	r3, r2
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	429a      	cmp	r2, r3
 800612c:	d305      	bcc.n	800613a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	429a      	cmp	r2, r3
 8006138:	d903      	bls.n	8006142 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006140:	e0e8      	b.n	8006314 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2200      	movs	r2, #0
 8006146:	461c      	mov	r4, r3
 8006148:	4615      	mov	r5, r2
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	022b      	lsls	r3, r5, #8
 8006154:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006158:	0222      	lsls	r2, r4, #8
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	6849      	ldr	r1, [r1, #4]
 800615e:	0849      	lsrs	r1, r1, #1
 8006160:	2000      	movs	r0, #0
 8006162:	4688      	mov	r8, r1
 8006164:	4681      	mov	r9, r0
 8006166:	eb12 0a08 	adds.w	sl, r2, r8
 800616a:	eb43 0b09 	adc.w	fp, r3, r9
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800617c:	4650      	mov	r0, sl
 800617e:	4659      	mov	r1, fp
 8006180:	f7fa fd72 	bl	8000c68 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4613      	mov	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006192:	d308      	bcc.n	80061a6 <UART_SetConfig+0x3de>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619a:	d204      	bcs.n	80061a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	e0b6      	b.n	8006314 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061ac:	e0b2      	b.n	8006314 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b6:	d15e      	bne.n	8006276 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d828      	bhi.n	8006212 <UART_SetConfig+0x44a>
 80061c0:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <UART_SetConfig+0x400>)
 80061c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c6:	bf00      	nop
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006203 	.word	0x08006203
 80061dc:	08006213 	.word	0x08006213
 80061e0:	08006213 	.word	0x08006213
 80061e4:	08006213 	.word	0x08006213
 80061e8:	0800620b 	.word	0x0800620b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ec:	f7fe fcb6 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e014      	b.n	800621e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fcc8 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80061f8:	61f8      	str	r0, [r7, #28]
        break;
 80061fa:	e010      	b.n	800621e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061fc:	4b4d      	ldr	r3, [pc, #308]	@ (8006334 <UART_SetConfig+0x56c>)
 80061fe:	61fb      	str	r3, [r7, #28]
        break;
 8006200:	e00d      	b.n	800621e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006202:	f7fe fc13 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006206:	61f8      	str	r0, [r7, #28]
        break;
 8006208:	e009      	b.n	800621e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620e:	61fb      	str	r3, [r7, #28]
        break;
 8006210:	e005      	b.n	800621e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800621c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d077      	beq.n	8006314 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	005a      	lsls	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d916      	bls.n	800626e <UART_SetConfig+0x4a6>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006246:	d212      	bcs.n	800626e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f023 030f 	bic.w	r3, r3, #15
 8006250:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	b29b      	uxth	r3, r3
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	b29a      	uxth	r2, r3
 800625e:	8afb      	ldrh	r3, [r7, #22]
 8006260:	4313      	orrs	r3, r2
 8006262:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	8afa      	ldrh	r2, [r7, #22]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e052      	b.n	8006314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006274:	e04e      	b.n	8006314 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006276:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800627a:	2b08      	cmp	r3, #8
 800627c:	d827      	bhi.n	80062ce <UART_SetConfig+0x506>
 800627e:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x4bc>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fe fc58 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fe fc6a 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80062b4:	61f8      	str	r0, [r7, #28]
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006334 <UART_SetConfig+0x56c>)
 80062ba:	61fb      	str	r3, [r7, #28]
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fe fbb5 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80062c2:	61f8      	str	r0, [r7, #28]
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062ca:	61fb      	str	r3, [r7, #28]
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062d8:	bf00      	nop
    }

    if (pclk != 0U)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d019      	beq.n	8006314 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	085a      	lsrs	r2, r3, #1
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b0f      	cmp	r3, #15
 80062f8:	d909      	bls.n	800630e <UART_SetConfig+0x546>
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006300:	d205      	bcs.n	800630e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
 800630c:	e002      	b.n	8006314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006320:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006324:	4618      	mov	r0, r3
 8006326:	3728      	adds	r7, #40	@ 0x28
 8006328:	46bd      	mov	sp, r7
 800632a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632e:	bf00      	nop
 8006330:	40008000 	.word	0x40008000
 8006334:	00f42400 	.word	0x00f42400

08006338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006436:	d10a      	bne.n	800644e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b098      	sub	sp, #96	@ 0x60
 8006480:	af02      	add	r7, sp, #8
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800648c:	f7fb fd26 	bl	8001edc <HAL_GetTick>
 8006490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b08      	cmp	r3, #8
 800649e:	d12e      	bne.n	80064fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a8:	2200      	movs	r2, #0
 80064aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f88c 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d021      	beq.n	80064fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e6      	bne.n	80064ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e062      	b.n	80065c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d149      	bne.n	80065a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800650c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006514:	2200      	movs	r2, #0
 8006516:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f856 	bl	80065cc <UART_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d03c      	beq.n	80065a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	623b      	str	r3, [r7, #32]
   return(result);
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800653a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006544:	633b      	str	r3, [r7, #48]	@ 0x30
 8006546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800654a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e6      	bne.n	8006526 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3308      	adds	r3, #8
 800655e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	60fb      	str	r3, [r7, #12]
   return(result);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006578:	61fa      	str	r2, [r7, #28]
 800657a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	617b      	str	r3, [r7, #20]
   return(result);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e011      	b.n	80065c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3758      	adds	r7, #88	@ 0x58
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4613      	mov	r3, r2
 80065da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065dc:	e04f      	b.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d04b      	beq.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e6:	f7fb fc79 	bl	8001edc <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d302      	bcc.n	80065fc <UART_WaitOnFlagUntilTimeout+0x30>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e04e      	b.n	800669e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d037      	beq.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b80      	cmp	r3, #128	@ 0x80
 8006612:	d034      	beq.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d031      	beq.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d110      	bne.n	800664a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2208      	movs	r2, #8
 800662e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f838 	bl	80066a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2208      	movs	r2, #8
 800663a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e029      	b.n	800669e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006658:	d111      	bne.n	800667e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f81e 	bl	80066a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e00f      	b.n	800669e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d0a0      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b095      	sub	sp, #84	@ 0x54
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3308      	adds	r3, #8
 80066e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	e853 3f00 	ldrex	r3, [r3]
 80066ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3308      	adds	r3, #8
 80066fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006700:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e5      	bne.n	80066e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006718:	2b01      	cmp	r3, #1
 800671a:	d118      	bne.n	800674e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	60bb      	str	r3, [r7, #8]
   return(result);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f023 0310 	bic.w	r3, r3, #16
 8006730:	647b      	str	r3, [r7, #68]	@ 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673a:	61bb      	str	r3, [r7, #24]
 800673c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6979      	ldr	r1, [r7, #20]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	613b      	str	r3, [r7, #16]
   return(result);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e6      	bne.n	800671c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006762:	bf00      	nop
 8006764:	3754      	adds	r7, #84	@ 0x54
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800676e:	b084      	sub	sp, #16
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	f107 001c 	add.w	r0, r7, #28
 800677c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa69 	bl	8006c64 <USB_CoreReset>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006796:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80067aa:	e005      	b.n	80067b8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c4:	b004      	add	sp, #16
 80067c6:	4770      	bx	lr

080067c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f023 0201 	bic.w	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d115      	bne.n	8006838 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006818:	200a      	movs	r0, #10
 800681a:	f7fb fb6b 	bl	8001ef4 <HAL_Delay>
      ms += 10U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	330a      	adds	r3, #10
 8006822:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fa0f 	bl	8006c48 <USB_GetMode>
 800682a:	4603      	mov	r3, r0
 800682c:	2b01      	cmp	r3, #1
 800682e:	d01e      	beq.n	800686e <USB_SetCurrentMode+0x84>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2bc7      	cmp	r3, #199	@ 0xc7
 8006834:	d9f0      	bls.n	8006818 <USB_SetCurrentMode+0x2e>
 8006836:	e01a      	b.n	800686e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d115      	bne.n	800686a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800684a:	200a      	movs	r0, #10
 800684c:	f7fb fb52 	bl	8001ef4 <HAL_Delay>
      ms += 10U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	330a      	adds	r3, #10
 8006854:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f9f6 	bl	8006c48 <USB_GetMode>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <USB_SetCurrentMode+0x84>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2bc7      	cmp	r3, #199	@ 0xc7
 8006866:	d9f0      	bls.n	800684a <USB_SetCurrentMode+0x60>
 8006868:	e001      	b.n	800686e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e005      	b.n	800687a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2bc8      	cmp	r3, #200	@ 0xc8
 8006872:	d101      	bne.n	8006878 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006884:	b084      	sub	sp, #16
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800689e:	2300      	movs	r3, #0
 80068a0:	613b      	str	r3, [r7, #16]
 80068a2:	e009      	b.n	80068b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3340      	adds	r3, #64	@ 0x40
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b0e      	cmp	r3, #14
 80068bc:	d9f2      	bls.n	80068a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11c      	bne.n	8006900 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e005      	b.n	800690c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006912:	461a      	mov	r2, r3
 8006914:	2300      	movs	r3, #0
 8006916:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006918:	2103      	movs	r1, #3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f95a 	bl	8006bd4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006920:	2110      	movs	r1, #16
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8f6 	bl	8006b14 <USB_FlushTxFifo>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f920 	bl	8006b78 <USB_FlushRxFifo>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006966:	2300      	movs	r3, #0
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	e043      	b.n	80069f4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800697e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006982:	d118      	bne.n	80069b6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e013      	b.n	80069c8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ac:	461a      	mov	r2, r3
 80069ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e008      	b.n	80069c8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d4:	461a      	mov	r2, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e6:	461a      	mov	r2, r3
 80069e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3301      	adds	r3, #1
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069f8:	461a      	mov	r2, r3
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d3b5      	bcc.n	800696c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e043      	b.n	8006a8e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a1c:	d118      	bne.n	8006a50 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e013      	b.n	8006a62 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a46:	461a      	mov	r2, r3
 8006a48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	e008      	b.n	8006a62 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2300      	movs	r3, #0
 8006a72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a80:	461a      	mov	r2, r3
 8006a82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a92:	461a      	mov	r2, r3
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d3b5      	bcc.n	8006a06 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006aba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	f043 0210 	orr.w	r2, r3, #16
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	4b10      	ldr	r3, [pc, #64]	@ (8006b10 <USB_DevInit+0x28c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ad4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f043 0208 	orr.w	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d107      	bne.n	8006b00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af8:	f043 0304 	orr.w	r3, r3, #4
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b0c:	b004      	add	sp, #16
 8006b0e:	4770      	bx	lr
 8006b10:	803c3800 	.word	0x803c3800

08006b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b2e:	d901      	bls.n	8006b34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e01b      	b.n	8006b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	daf2      	bge.n	8006b22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	019b      	lsls	r3, r3, #6
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b58:	d901      	bls.n	8006b5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e006      	b.n	8006b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f003 0320 	and.w	r3, r3, #32
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d0f0      	beq.n	8006b4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b90:	d901      	bls.n	8006b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e018      	b.n	8006bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	daf2      	bge.n	8006b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bb4:	d901      	bls.n	8006bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e006      	b.n	8006bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d0f0      	beq.n	8006ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c20:	f023 0303 	bic.w	r3, r3, #3
 8006c24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c34:	f043 0302 	orr.w	r3, r3, #2
 8006c38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0301 	and.w	r3, r3, #1
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c7c:	d901      	bls.n	8006c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e01b      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	daf2      	bge.n	8006c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ca6:	d901      	bls.n	8006cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d0f0      	beq.n	8006c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	4603      	mov	r3, r0
 8006cce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cd8:	2b84      	cmp	r3, #132	@ 0x84
 8006cda:	d005      	beq.n	8006ce8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006cdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cfc:	f3ef 8305 	mrs	r3, IPSR
 8006d00:	607b      	str	r3, [r7, #4]
  return(result);
 8006d02:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d1e:	f000 fcc1 	bl	80076a4 <vTaskStartScheduler>
  
  return osOK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d2a:	b089      	sub	sp, #36	@ 0x24
 8006d2c:	af04      	add	r7, sp, #16
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d020      	beq.n	8006d7c <osThreadCreate+0x54>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01c      	beq.n	8006d7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685c      	ldr	r4, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691e      	ldr	r6, [r3, #16]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ffb6 	bl	8006cc6 <makeFreeRtosPriority>
 8006d5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d64:	9202      	str	r2, [sp, #8]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	9100      	str	r1, [sp, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 f91b 	bl	8006fac <xTaskCreateStatic>
 8006d76:	4603      	mov	r3, r0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e01c      	b.n	8006db6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685c      	ldr	r4, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff ff98 	bl	8006cc6 <makeFreeRtosPriority>
 8006d96:	4602      	mov	r2, r0
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	9200      	str	r2, [sp, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4632      	mov	r2, r6
 8006da4:	4629      	mov	r1, r5
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f960 	bl	800706c <xTaskCreate>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006db6:	68fb      	ldr	r3, [r7, #12]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <osDelay+0x16>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	e000      	b.n	8006dd8 <osDelay+0x18>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fa97 	bl	800730c <vTaskDelay>
  
  return osOK;
 8006dde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fac1 	bl	8007378 <vTaskSuspend>
  
  return osOK;
 8006df6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8006e08:	f7ff ff75 	bl	8006cf6 <inHandlerMode>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fbd4 	bl	80075c0 <xTaskResumeFromISR>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d10b      	bne.n	8006e36 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8006e1e:	4b08      	ldr	r3, [pc, #32]	@ (8006e40 <osThreadResume+0x40>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	e002      	b.n	8006e36 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fb67 	bl	8007504 <vTaskResume>
  }
  return osOK;
 8006e36:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f103 0208 	add.w	r2, r3, #8
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f103 0208 	add.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f103 0208 	add.w	r2, r3, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b085      	sub	sp, #20
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d103      	bne.n	8006f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e00c      	b.n	8006f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e002      	b.n	8006f14 <vListInsert+0x2e>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d2f6      	bcs.n	8006f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6892      	ldr	r2, [r2, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6852      	ldr	r2, [r2, #4]
 8006f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d103      	bne.n	8006f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	1e5a      	subs	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08e      	sub	sp, #56	@ 0x38
 8006fb0:	af04      	add	r7, sp, #16
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10b      	bne.n	8006fd8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fd2:	bf00      	nop
 8006fd4:	bf00      	nop
 8006fd6:	e7fd      	b.n	8006fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10b      	bne.n	8006ff6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	61fb      	str	r3, [r7, #28]
}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	e7fd      	b.n	8006ff2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ff6:	23a0      	movs	r3, #160	@ 0xa0
 8006ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2ba0      	cmp	r3, #160	@ 0xa0
 8006ffe:	d00b      	beq.n	8007018 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	61bb      	str	r3, [r7, #24]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007018:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800701a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01e      	beq.n	800705e <xTaskCreateStatic+0xb2>
 8007020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01b      	beq.n	800705e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	2202      	movs	r2, #2
 8007034:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007038:	2300      	movs	r3, #0
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f851 	bl	80070f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007056:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007058:	f000 f8ee 	bl	8007238 <prvAddNewTaskToReadyList>
 800705c:	e001      	b.n	8007062 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007062:	697b      	ldr	r3, [r7, #20]
	}
 8007064:	4618      	mov	r0, r3
 8007066:	3728      	adds	r7, #40	@ 0x28
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08c      	sub	sp, #48	@ 0x30
 8007070:	af04      	add	r7, sp, #16
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f001 f8db 	bl	800823c <pvPortMalloc>
 8007086:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00e      	beq.n	80070ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800708e:	20a0      	movs	r0, #160	@ 0xa0
 8007090:	f001 f8d4 	bl	800823c <pvPortMalloc>
 8007094:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80070a2:	e005      	b.n	80070b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070a4:	6978      	ldr	r0, [r7, #20]
 80070a6:	f001 f997 	bl	80083d8 <vPortFree>
 80070aa:	e001      	b.n	80070b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d017      	beq.n	80070e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	2300      	movs	r3, #0
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f80f 	bl	80070f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070da:	69f8      	ldr	r0, [r7, #28]
 80070dc:	f000 f8ac 	bl	8007238 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e0:	2301      	movs	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e002      	b.n	80070ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070e6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070ec:	69bb      	ldr	r3, [r7, #24]
	}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007110:	3b01      	subs	r3, #1
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	617b      	str	r3, [r7, #20]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01f      	beq.n	8007188 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	e012      	b.n	8007174 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	4413      	add	r3, r2
 8007154:	7819      	ldrb	r1, [r3, #0]
 8007156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	3334      	adds	r3, #52	@ 0x34
 800715e:	460a      	mov	r2, r1
 8007160:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	3301      	adds	r3, #1
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d9e9      	bls.n	800714e <prvInitialiseNewTask+0x56>
 800717a:	e000      	b.n	800717e <prvInitialiseNewTask+0x86>
			{
				break;
 800717c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007186:	e003      	b.n	8007190 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	2b06      	cmp	r3, #6
 8007194:	d901      	bls.n	800719a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007196:	2306      	movs	r3, #6
 8007198:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800719e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071a4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	2200      	movs	r2, #0
 80071aa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fe67 	bl	8006e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	3318      	adds	r3, #24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fe62 	bl	8006e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	f1c3 0207 	rsb	r2, r3, #7
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	334c      	adds	r3, #76	@ 0x4c
 80071ea:	224c      	movs	r2, #76	@ 0x4c
 80071ec:	2100      	movs	r1, #0
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 ff6d 	bl	80090ce <memset>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f6:	4a0d      	ldr	r2, [pc, #52]	@ (800722c <prvInitialiseNewTask+0x134>)
 80071f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007230 <prvInitialiseNewTask+0x138>)
 80071fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	4a0c      	ldr	r2, [pc, #48]	@ (8007234 <prvInitialiseNewTask+0x13c>)
 8007204:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	68f9      	ldr	r1, [r7, #12]
 800720a:	69b8      	ldr	r0, [r7, #24]
 800720c:	f000 fdc0 	bl	8007d90 <pxPortInitialiseStack>
 8007210:	4602      	mov	r2, r0
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007222:	bf00      	nop
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	200017e0 	.word	0x200017e0
 8007230:	20001848 	.word	0x20001848
 8007234:	200018b0 	.word	0x200018b0

08007238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007240:	f000 feda 	bl	8007ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007244:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <prvAddNewTaskToReadyList+0xb8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3301      	adds	r3, #1
 800724a:	4a29      	ldr	r2, [pc, #164]	@ (80072f0 <prvAddNewTaskToReadyList+0xb8>)
 800724c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800724e:	4b29      	ldr	r3, [pc, #164]	@ (80072f4 <prvAddNewTaskToReadyList+0xbc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007256:	4a27      	ldr	r2, [pc, #156]	@ (80072f4 <prvAddNewTaskToReadyList+0xbc>)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800725c:	4b24      	ldr	r3, [pc, #144]	@ (80072f0 <prvAddNewTaskToReadyList+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d110      	bne.n	8007286 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007264:	f000 fc6a 	bl	8007b3c <prvInitialiseTaskLists>
 8007268:	e00d      	b.n	8007286 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800726a:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <prvAddNewTaskToReadyList+0xc0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007272:	4b20      	ldr	r3, [pc, #128]	@ (80072f4 <prvAddNewTaskToReadyList+0xbc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	429a      	cmp	r2, r3
 800727e:	d802      	bhi.n	8007286 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007280:	4a1c      	ldr	r2, [pc, #112]	@ (80072f4 <prvAddNewTaskToReadyList+0xbc>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007286:	4b1d      	ldr	r3, [pc, #116]	@ (80072fc <prvAddNewTaskToReadyList+0xc4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <prvAddNewTaskToReadyList+0xc4>)
 800728e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	2201      	movs	r2, #1
 8007296:	409a      	lsls	r2, r3
 8007298:	4b19      	ldr	r3, [pc, #100]	@ (8007300 <prvAddNewTaskToReadyList+0xc8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4313      	orrs	r3, r2
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <prvAddNewTaskToReadyList+0xc8>)
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4a15      	ldr	r2, [pc, #84]	@ (8007304 <prvAddNewTaskToReadyList+0xcc>)
 80072b0:	441a      	add	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	4619      	mov	r1, r3
 80072b8:	4610      	mov	r0, r2
 80072ba:	f7ff fdf0 	bl	8006e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072be:	f000 fecd 	bl	800805c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <prvAddNewTaskToReadyList+0xc0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072ca:	4b0a      	ldr	r3, [pc, #40]	@ (80072f4 <prvAddNewTaskToReadyList+0xbc>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d207      	bcs.n	80072e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007308 <prvAddNewTaskToReadyList+0xd0>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000bd4 	.word	0x20000bd4
 80072f4:	20000ad4 	.word	0x20000ad4
 80072f8:	20000be0 	.word	0x20000be0
 80072fc:	20000bf0 	.word	0x20000bf0
 8007300:	20000bdc 	.word	0x20000bdc
 8007304:	20000ad8 	.word	0x20000ad8
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d018      	beq.n	8007350 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800731e:	4b14      	ldr	r3, [pc, #80]	@ (8007370 <vTaskDelay+0x64>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <vTaskDelay+0x32>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60bb      	str	r3, [r7, #8]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800733e:	f000 fa1b 	bl	8007778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007342:	2100      	movs	r1, #0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fcbd 	bl	8007cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800734a:	f000 fa23 	bl	8007794 <xTaskResumeAll>
 800734e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007356:	4b07      	ldr	r3, [pc, #28]	@ (8007374 <vTaskDelay+0x68>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20000bfc 	.word	0x20000bfc
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007380:	f000 fe3a 	bl	8007ff8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <vTaskSuspend+0x18>
 800738a:	4b3d      	ldr	r3, [pc, #244]	@ (8007480 <vTaskSuspend+0x108>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	e000      	b.n	8007392 <vTaskSuspend+0x1a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3304      	adds	r3, #4
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fddd 	bl	8006f58 <uxListRemove>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d115      	bne.n	80073d0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a8:	4936      	ldr	r1, [pc, #216]	@ (8007484 <vTaskSuspend+0x10c>)
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	440b      	add	r3, r1
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <vTaskSuspend+0x58>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	43da      	mvns	r2, r3
 80073c6:	4b30      	ldr	r3, [pc, #192]	@ (8007488 <vTaskSuspend+0x110>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4013      	ands	r3, r2
 80073cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007488 <vTaskSuspend+0x110>)
 80073ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3318      	adds	r3, #24
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fdbb 	bl	8006f58 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4828      	ldr	r0, [pc, #160]	@ (800748c <vTaskSuspend+0x114>)
 80073ea:	f7ff fd58 	bl	8006e9e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d103      	bne.n	8007402 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007402:	f000 fe2b 	bl	800805c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007406:	4b22      	ldr	r3, [pc, #136]	@ (8007490 <vTaskSuspend+0x118>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800740e:	f000 fdf3 	bl	8007ff8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007412:	f000 fc37 	bl	8007c84 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007416:	f000 fe21 	bl	800805c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800741a:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <vTaskSuspend+0x108>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	429a      	cmp	r2, r3
 8007422:	d128      	bne.n	8007476 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8007424:	4b1a      	ldr	r3, [pc, #104]	@ (8007490 <vTaskSuspend+0x118>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d018      	beq.n	800745e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800742c:	4b19      	ldr	r3, [pc, #100]	@ (8007494 <vTaskSuspend+0x11c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <vTaskSuspend+0xd4>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	60bb      	str	r3, [r7, #8]
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	e7fd      	b.n	8007448 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800744c:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <vTaskSuspend+0x120>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800745c:	e00b      	b.n	8007476 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800745e:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <vTaskSuspend+0x114>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b0e      	ldr	r3, [pc, #56]	@ (800749c <vTaskSuspend+0x124>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d103      	bne.n	8007472 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800746a:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <vTaskSuspend+0x108>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
	}
 8007470:	e001      	b.n	8007476 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8007472:	f000 fae7 	bl	8007a44 <vTaskSwitchContext>
	}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000ad4 	.word	0x20000ad4
 8007484:	20000ad8 	.word	0x20000ad8
 8007488:	20000bdc 	.word	0x20000bdc
 800748c:	20000bc0 	.word	0x20000bc0
 8007490:	20000be0 	.word	0x20000be0
 8007494:	20000bfc 	.word	0x20000bfc
 8007498:	e000ed04 	.word	0xe000ed04
 800749c:	20000bd4 	.word	0x20000bd4

080074a0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	4a0a      	ldr	r2, [pc, #40]	@ (80074fc <prvTaskIsTaskSuspended+0x5c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d10a      	bne.n	80074ee <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074dc:	4a08      	ldr	r2, [pc, #32]	@ (8007500 <prvTaskIsTaskSuspended+0x60>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d005      	beq.n	80074ee <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ee:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000bc0 	.word	0x20000bc0
 8007500:	20000b94 	.word	0x20000b94

08007504 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <vTaskResume+0x2a>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60bb      	str	r3, [r7, #8]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800752e:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <vTaskResume+0xac>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	429a      	cmp	r2, r3
 8007536:	d037      	beq.n	80075a8 <vTaskResume+0xa4>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d034      	beq.n	80075a8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800753e:	f000 fd5b 	bl	8007ff8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff ffac 	bl	80074a0 <prvTaskIsTaskSuspended>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d02a      	beq.n	80075a4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3304      	adds	r3, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fd00 	bl	8006f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	2201      	movs	r2, #1
 800755e:	409a      	lsls	r2, r3
 8007560:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <vTaskResume+0xb0>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4313      	orrs	r3, r2
 8007566:	4a13      	ldr	r2, [pc, #76]	@ (80075b4 <vTaskResume+0xb0>)
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4a10      	ldr	r2, [pc, #64]	@ (80075b8 <vTaskResume+0xb4>)
 8007578:	441a      	add	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3304      	adds	r3, #4
 800757e:	4619      	mov	r1, r3
 8007580:	4610      	mov	r0, r2
 8007582:	f7ff fc8c 	bl	8006e9e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758a:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <vTaskResume+0xac>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	429a      	cmp	r2, r3
 8007592:	d307      	bcc.n	80075a4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007594:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <vTaskResume+0xb8>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80075a4:	f000 fd5a 	bl	800805c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000ad4 	.word	0x20000ad4
 80075b4:	20000bdc 	.word	0x20000bdc
 80075b8:	20000ad8 	.word	0x20000ad8
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	@ 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <xTaskResumeFromISR+0x2e>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	61bb      	str	r3, [r7, #24]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ee:	f000 fde3 	bl	80081b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075f2:	f3ef 8211 	mrs	r2, BASEPRI
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	617a      	str	r2, [r7, #20]
 8007608:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800760a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800760c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800760e:	6a38      	ldr	r0, [r7, #32]
 8007610:	f7ff ff46 	bl	80074a0 <prvTaskIsTaskSuspended>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d02f      	beq.n	800767a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800761a:	4b1d      	ldr	r3, [pc, #116]	@ (8007690 <xTaskResumeFromISR+0xd0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d125      	bne.n	800766e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007626:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <xTaskResumeFromISR+0xd4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d301      	bcc.n	8007634 <xTaskResumeFromISR+0x74>
					{
						xYieldRequired = pdTRUE;
 8007630:	2301      	movs	r3, #1
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	3304      	adds	r3, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fc8d 	bl	8006f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	2201      	movs	r2, #1
 8007644:	409a      	lsls	r2, r3
 8007646:	4b14      	ldr	r3, [pc, #80]	@ (8007698 <xTaskResumeFromISR+0xd8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <xTaskResumeFromISR+0xd8>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4a0f      	ldr	r2, [pc, #60]	@ (800769c <xTaskResumeFromISR+0xdc>)
 800765e:	441a      	add	r2, r3
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	3304      	adds	r3, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7ff fc19 	bl	8006e9e <vListInsertEnd>
 800766c:	e005      	b.n	800767a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	3318      	adds	r3, #24
 8007672:	4619      	mov	r1, r3
 8007674:	480a      	ldr	r0, [pc, #40]	@ (80076a0 <xTaskResumeFromISR+0xe0>)
 8007676:	f7ff fc12 	bl	8006e9e <vListInsertEnd>
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007684:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007688:	4618      	mov	r0, r3
 800768a:	3728      	adds	r7, #40	@ 0x28
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000bfc 	.word	0x20000bfc
 8007694:	20000ad4 	.word	0x20000ad4
 8007698:	20000bdc 	.word	0x20000bdc
 800769c:	20000ad8 	.word	0x20000ad8
 80076a0:	20000b94 	.word	0x20000b94

080076a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	@ 0x28
 80076a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076b2:	463a      	mov	r2, r7
 80076b4:	1d39      	adds	r1, r7, #4
 80076b6:	f107 0308 	add.w	r3, r7, #8
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7f9 fc6a 	bl	8000f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	9202      	str	r2, [sp, #8]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	460a      	mov	r2, r1
 80076d2:	4921      	ldr	r1, [pc, #132]	@ (8007758 <vTaskStartScheduler+0xb4>)
 80076d4:	4821      	ldr	r0, [pc, #132]	@ (800775c <vTaskStartScheduler+0xb8>)
 80076d6:	f7ff fc69 	bl	8006fac <xTaskCreateStatic>
 80076da:	4603      	mov	r3, r0
 80076dc:	4a20      	ldr	r2, [pc, #128]	@ (8007760 <vTaskStartScheduler+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007760 <vTaskStartScheduler+0xbc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e001      	b.n	80076f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d11b      	bne.n	8007730 <vTaskStartScheduler+0x8c>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	613b      	str	r3, [r7, #16]
}
 800770a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800770c:	4b15      	ldr	r3, [pc, #84]	@ (8007764 <vTaskStartScheduler+0xc0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	334c      	adds	r3, #76	@ 0x4c
 8007712:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <vTaskStartScheduler+0xc4>)
 8007714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007716:	4b15      	ldr	r3, [pc, #84]	@ (800776c <vTaskStartScheduler+0xc8>)
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800771e:	4b14      	ldr	r3, [pc, #80]	@ (8007770 <vTaskStartScheduler+0xcc>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007724:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <vTaskStartScheduler+0xd0>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800772a:	f000 fbc1 	bl	8007eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800772e:	e00f      	b.n	8007750 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007736:	d10b      	bne.n	8007750 <vTaskStartScheduler+0xac>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	60fb      	str	r3, [r7, #12]
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <vTaskStartScheduler+0xa8>
}
 8007750:	bf00      	nop
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	0800bf9c 	.word	0x0800bf9c
 800775c:	08007b0d 	.word	0x08007b0d
 8007760:	20000bf8 	.word	0x20000bf8
 8007764:	20000ad4 	.word	0x20000ad4
 8007768:	2000001c 	.word	0x2000001c
 800776c:	20000bf4 	.word	0x20000bf4
 8007770:	20000be0 	.word	0x20000be0
 8007774:	20000bd8 	.word	0x20000bd8

08007778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800777c:	4b04      	ldr	r3, [pc, #16]	@ (8007790 <vTaskSuspendAll+0x18>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3301      	adds	r3, #1
 8007782:	4a03      	ldr	r2, [pc, #12]	@ (8007790 <vTaskSuspendAll+0x18>)
 8007784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007786:	bf00      	nop
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000bfc 	.word	0x20000bfc

08007794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077a2:	4b42      	ldr	r3, [pc, #264]	@ (80078ac <xTaskResumeAll+0x118>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10b      	bne.n	80077c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	603b      	str	r3, [r7, #0]
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	e7fd      	b.n	80077be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077c2:	f000 fc19 	bl	8007ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077c6:	4b39      	ldr	r3, [pc, #228]	@ (80078ac <xTaskResumeAll+0x118>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4a37      	ldr	r2, [pc, #220]	@ (80078ac <xTaskResumeAll+0x118>)
 80077ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d0:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <xTaskResumeAll+0x118>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d161      	bne.n	800789c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077d8:	4b35      	ldr	r3, [pc, #212]	@ (80078b0 <xTaskResumeAll+0x11c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d05d      	beq.n	800789c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e0:	e02e      	b.n	8007840 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e2:	4b34      	ldr	r3, [pc, #208]	@ (80078b4 <xTaskResumeAll+0x120>)
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3318      	adds	r3, #24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fbb2 	bl	8006f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fbad 	bl	8006f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	2201      	movs	r2, #1
 8007804:	409a      	lsls	r2, r3
 8007806:	4b2c      	ldr	r3, [pc, #176]	@ (80078b8 <xTaskResumeAll+0x124>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4313      	orrs	r3, r2
 800780c:	4a2a      	ldr	r2, [pc, #168]	@ (80078b8 <xTaskResumeAll+0x124>)
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4a27      	ldr	r2, [pc, #156]	@ (80078bc <xTaskResumeAll+0x128>)
 800781e:	441a      	add	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7ff fb39 	bl	8006e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	4b23      	ldr	r3, [pc, #140]	@ (80078c0 <xTaskResumeAll+0x12c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800783a:	4b22      	ldr	r3, [pc, #136]	@ (80078c4 <xTaskResumeAll+0x130>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007840:	4b1c      	ldr	r3, [pc, #112]	@ (80078b4 <xTaskResumeAll+0x120>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1cc      	bne.n	80077e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800784e:	f000 fa19 	bl	8007c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007852:	4b1d      	ldr	r3, [pc, #116]	@ (80078c8 <xTaskResumeAll+0x134>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d010      	beq.n	8007880 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800785e:	f000 f837 	bl	80078d0 <xTaskIncrementTick>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007868:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <xTaskResumeAll+0x130>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3b01      	subs	r3, #1
 8007872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1f1      	bne.n	800785e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800787a:	4b13      	ldr	r3, [pc, #76]	@ (80078c8 <xTaskResumeAll+0x134>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007880:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <xTaskResumeAll+0x130>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d009      	beq.n	800789c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007888:	2301      	movs	r3, #1
 800788a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800788c:	4b0f      	ldr	r3, [pc, #60]	@ (80078cc <xTaskResumeAll+0x138>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800789c:	f000 fbde 	bl	800805c <vPortExitCritical>

	return xAlreadyYielded;
 80078a0:	68bb      	ldr	r3, [r7, #8]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000bfc 	.word	0x20000bfc
 80078b0:	20000bd4 	.word	0x20000bd4
 80078b4:	20000b94 	.word	0x20000b94
 80078b8:	20000bdc 	.word	0x20000bdc
 80078bc:	20000ad8 	.word	0x20000ad8
 80078c0:	20000ad4 	.word	0x20000ad4
 80078c4:	20000be8 	.word	0x20000be8
 80078c8:	20000be4 	.word	0x20000be4
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078da:	4b4f      	ldr	r3, [pc, #316]	@ (8007a18 <xTaskIncrementTick+0x148>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 808f 	bne.w	8007a02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e4:	4b4d      	ldr	r3, [pc, #308]	@ (8007a1c <xTaskIncrementTick+0x14c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ec:	4a4b      	ldr	r2, [pc, #300]	@ (8007a1c <xTaskIncrementTick+0x14c>)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d121      	bne.n	800793c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f8:	4b49      	ldr	r3, [pc, #292]	@ (8007a20 <xTaskIncrementTick+0x150>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <xTaskIncrementTick+0x46>
 800791a:	4b41      	ldr	r3, [pc, #260]	@ (8007a20 <xTaskIncrementTick+0x150>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	4b40      	ldr	r3, [pc, #256]	@ (8007a24 <xTaskIncrementTick+0x154>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a3e      	ldr	r2, [pc, #248]	@ (8007a20 <xTaskIncrementTick+0x150>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4a3e      	ldr	r2, [pc, #248]	@ (8007a24 <xTaskIncrementTick+0x154>)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a28 <xTaskIncrementTick+0x158>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	4a3c      	ldr	r2, [pc, #240]	@ (8007a28 <xTaskIncrementTick+0x158>)
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	f000 f9a4 	bl	8007c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800793c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	429a      	cmp	r2, r3
 8007944:	d348      	bcc.n	80079d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007946:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <xTaskIncrementTick+0x150>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007950:	4b36      	ldr	r3, [pc, #216]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	601a      	str	r2, [r3, #0]
					break;
 8007958:	e03e      	b.n	80079d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795a:	4b31      	ldr	r3, [pc, #196]	@ (8007a20 <xTaskIncrementTick+0x150>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	429a      	cmp	r2, r3
 8007970:	d203      	bcs.n	800797a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007972:	4a2e      	ldr	r2, [pc, #184]	@ (8007a2c <xTaskIncrementTick+0x15c>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007978:	e02e      	b.n	80079d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff faea 	bl	8006f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3318      	adds	r3, #24
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff fae1 	bl	8006f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	2201      	movs	r2, #1
 800799c:	409a      	lsls	r2, r3
 800799e:	4b24      	ldr	r3, [pc, #144]	@ (8007a30 <xTaskIncrementTick+0x160>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	4a22      	ldr	r2, [pc, #136]	@ (8007a30 <xTaskIncrementTick+0x160>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007a34 <xTaskIncrementTick+0x164>)
 80079b6:	441a      	add	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7ff fa6d 	bl	8006e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a38 <xTaskIncrementTick+0x168>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d3b9      	bcc.n	8007946 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d6:	e7b6      	b.n	8007946 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079d8:	4b17      	ldr	r3, [pc, #92]	@ (8007a38 <xTaskIncrementTick+0x168>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4915      	ldr	r1, [pc, #84]	@ (8007a34 <xTaskIncrementTick+0x164>)
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d901      	bls.n	80079f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <xTaskIncrementTick+0x16c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e004      	b.n	8007a0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a02:	4b0f      	ldr	r3, [pc, #60]	@ (8007a40 <xTaskIncrementTick+0x170>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3301      	adds	r3, #1
 8007a08:	4a0d      	ldr	r2, [pc, #52]	@ (8007a40 <xTaskIncrementTick+0x170>)
 8007a0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a0c:	697b      	ldr	r3, [r7, #20]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20000bfc 	.word	0x20000bfc
 8007a1c:	20000bd8 	.word	0x20000bd8
 8007a20:	20000b8c 	.word	0x20000b8c
 8007a24:	20000b90 	.word	0x20000b90
 8007a28:	20000bec 	.word	0x20000bec
 8007a2c:	20000bf4 	.word	0x20000bf4
 8007a30:	20000bdc 	.word	0x20000bdc
 8007a34:	20000ad8 	.word	0x20000ad8
 8007a38:	20000ad4 	.word	0x20000ad4
 8007a3c:	20000be8 	.word	0x20000be8
 8007a40:	20000be4 	.word	0x20000be4

08007a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007af4 <vTaskSwitchContext+0xb0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a52:	4b29      	ldr	r3, [pc, #164]	@ (8007af8 <vTaskSwitchContext+0xb4>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a58:	e045      	b.n	8007ae6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007a5a:	4b27      	ldr	r3, [pc, #156]	@ (8007af8 <vTaskSwitchContext+0xb4>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a60:	4b26      	ldr	r3, [pc, #152]	@ (8007afc <vTaskSwitchContext+0xb8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	fab3 f383 	clz	r3, r3
 8007a6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
 8007a70:	f1c3 031f 	rsb	r3, r3, #31
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	4922      	ldr	r1, [pc, #136]	@ (8007b00 <vTaskSwitchContext+0xbc>)
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
 8007a9e:	bf00      	nop
 8007aa0:	e7fd      	b.n	8007a9e <vTaskSwitchContext+0x5a>
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4a14      	ldr	r2, [pc, #80]	@ (8007b00 <vTaskSwitchContext+0xbc>)
 8007aae:	4413      	add	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <vTaskSwitchContext+0x8e>
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8007b04 <vTaskSwitchContext+0xc0>)
 8007ada:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007adc:	4b09      	ldr	r3, [pc, #36]	@ (8007b04 <vTaskSwitchContext+0xc0>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	334c      	adds	r3, #76	@ 0x4c
 8007ae2:	4a09      	ldr	r2, [pc, #36]	@ (8007b08 <vTaskSwitchContext+0xc4>)
 8007ae4:	6013      	str	r3, [r2, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000bfc 	.word	0x20000bfc
 8007af8:	20000be8 	.word	0x20000be8
 8007afc:	20000bdc 	.word	0x20000bdc
 8007b00:	20000ad8 	.word	0x20000ad8
 8007b04:	20000ad4 	.word	0x20000ad4
 8007b08:	2000001c 	.word	0x2000001c

08007b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b14:	f000 f852 	bl	8007bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <prvIdleTask+0x28>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d9f9      	bls.n	8007b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b20:	4b05      	ldr	r3, [pc, #20]	@ (8007b38 <prvIdleTask+0x2c>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b30:	e7f0      	b.n	8007b14 <prvIdleTask+0x8>
 8007b32:	bf00      	nop
 8007b34:	20000ad8 	.word	0x20000ad8
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	e00c      	b.n	8007b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a12      	ldr	r2, [pc, #72]	@ (8007b9c <prvInitialiseTaskLists+0x60>)
 8007b54:	4413      	add	r3, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f974 	bl	8006e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d9ef      	bls.n	8007b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b68:	480d      	ldr	r0, [pc, #52]	@ (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b6a:	f7ff f96b 	bl	8006e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b6e:	480d      	ldr	r0, [pc, #52]	@ (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b70:	f7ff f968 	bl	8006e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b74:	480c      	ldr	r0, [pc, #48]	@ (8007ba8 <prvInitialiseTaskLists+0x6c>)
 8007b76:	f7ff f965 	bl	8006e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b7a:	480c      	ldr	r0, [pc, #48]	@ (8007bac <prvInitialiseTaskLists+0x70>)
 8007b7c:	f7ff f962 	bl	8006e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b80:	480b      	ldr	r0, [pc, #44]	@ (8007bb0 <prvInitialiseTaskLists+0x74>)
 8007b82:	f7ff f95f 	bl	8006e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb4 <prvInitialiseTaskLists+0x78>)
 8007b88:	4a05      	ldr	r2, [pc, #20]	@ (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb8 <prvInitialiseTaskLists+0x7c>)
 8007b8e:	4a05      	ldr	r2, [pc, #20]	@ (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b90:	601a      	str	r2, [r3, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000ad8 	.word	0x20000ad8
 8007ba0:	20000b64 	.word	0x20000b64
 8007ba4:	20000b78 	.word	0x20000b78
 8007ba8:	20000b94 	.word	0x20000b94
 8007bac:	20000ba8 	.word	0x20000ba8
 8007bb0:	20000bc0 	.word	0x20000bc0
 8007bb4:	20000b8c 	.word	0x20000b8c
 8007bb8:	20000b90 	.word	0x20000b90

08007bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bc2:	e019      	b.n	8007bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bc4:	f000 fa18 	bl	8007ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc8:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <prvCheckTasksWaitingTermination+0x50>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f9bf 	bl	8006f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4a0b      	ldr	r2, [pc, #44]	@ (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007be4:	4b0b      	ldr	r3, [pc, #44]	@ (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	4a0a      	ldr	r2, [pc, #40]	@ (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bee:	f000 fa35 	bl	800805c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f810 	bl	8007c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bf8:	4b06      	ldr	r3, [pc, #24]	@ (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e1      	bne.n	8007bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000ba8 	.word	0x20000ba8
 8007c10:	20000bd4 	.word	0x20000bd4
 8007c14:	20000bbc 	.word	0x20000bbc

08007c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	334c      	adds	r3, #76	@ 0x4c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 fa7d 	bl	8009124 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d108      	bne.n	8007c46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fbcd 	bl	80083d8 <vPortFree>
				vPortFree( pxTCB );
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fbca 	bl	80083d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c44:	e019      	b.n	8007c7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d103      	bne.n	8007c58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fbc1 	bl	80083d8 <vPortFree>
	}
 8007c56:	e010      	b.n	8007c7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d00b      	beq.n	8007c7a <prvDeleteTCB+0x62>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60fb      	str	r3, [r7, #12]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <prvDeleteTCB+0x5e>
	}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007cbc <prvResetNextTaskUnblockTime+0x38>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d104      	bne.n	8007c9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c9c:	e008      	b.n	8007cb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9e:	4b07      	ldr	r3, [pc, #28]	@ (8007cbc <prvResetNextTaskUnblockTime+0x38>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a04      	ldr	r2, [pc, #16]	@ (8007cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8007cae:	6013      	str	r3, [r2, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	20000b8c 	.word	0x20000b8c
 8007cc0:	20000bf4 	.word	0x20000bf4

08007cc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cce:	4b29      	ldr	r3, [pc, #164]	@ (8007d74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd4:	4b28      	ldr	r3, [pc, #160]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f93c 	bl	8006f58 <uxListRemove>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ce6:	4b24      	ldr	r3, [pc, #144]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43da      	mvns	r2, r3
 8007cf4:	4b21      	ldr	r3, [pc, #132]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	4a20      	ldr	r2, [pc, #128]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d10a      	bne.n	8007d1c <prvAddCurrentTaskToDelayedList+0x58>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	481a      	ldr	r0, [pc, #104]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007d16:	f7ff f8c2 	bl	8006e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d1a:	e026      	b.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d24:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d209      	bcs.n	8007d48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d34:	4b13      	ldr	r3, [pc, #76]	@ (8007d84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4b0f      	ldr	r3, [pc, #60]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff f8d0 	bl	8006ee6 <vListInsert>
}
 8007d46:	e010      	b.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d48:	4b0f      	ldr	r3, [pc, #60]	@ (8007d88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7ff f8c6 	bl	8006ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d202      	bcs.n	8007d6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d64:	4a09      	ldr	r2, [pc, #36]	@ (8007d8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6013      	str	r3, [r2, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000bd8 	.word	0x20000bd8
 8007d78:	20000ad4 	.word	0x20000ad4
 8007d7c:	20000bdc 	.word	0x20000bdc
 8007d80:	20000bc0 	.word	0x20000bc0
 8007d84:	20000b90 	.word	0x20000b90
 8007d88:	20000b8c 	.word	0x20000b8c
 8007d8c:	20000bf4 	.word	0x20000bf4

08007d90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8007df4 <pxPortInitialiseStack+0x64>)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3b14      	subs	r3, #20
 8007dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3b04      	subs	r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f06f 0202 	mvn.w	r2, #2
 8007dde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3b20      	subs	r3, #32
 8007de4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007de6:	68fb      	ldr	r3, [r7, #12]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	08007df9 	.word	0x08007df9

08007df8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e02:	4b13      	ldr	r3, [pc, #76]	@ (8007e50 <prvTaskExitError+0x58>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d00b      	beq.n	8007e24 <prvTaskExitError+0x2c>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60fb      	str	r3, [r7, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <prvTaskExitError+0x28>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60bb      	str	r3, [r7, #8]
}
 8007e36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e38:	bf00      	nop
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0fc      	beq.n	8007e3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	2000000c 	.word	0x2000000c
	...

08007e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e60:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <pxCurrentTCBConst2>)
 8007e62:	6819      	ldr	r1, [r3, #0]
 8007e64:	6808      	ldr	r0, [r1, #0]
 8007e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	f380 8809 	msr	PSP, r0
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f04f 0000 	mov.w	r0, #0
 8007e76:	f380 8811 	msr	BASEPRI, r0
 8007e7a:	4770      	bx	lr
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst2>:
 8007e80:	20000ad4 	.word	0x20000ad4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e88:	4808      	ldr	r0, [pc, #32]	@ (8007eac <prvPortStartFirstTask+0x24>)
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f380 8808 	msr	MSP, r0
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8814 	msr	CONTROL, r0
 8007e9a:	b662      	cpsie	i
 8007e9c:	b661      	cpsie	f
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	df00      	svc	0
 8007ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eaa:	bf00      	nop
 8007eac:	e000ed08 	.word	0xe000ed08

08007eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007eb6:	4b47      	ldr	r3, [pc, #284]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a47      	ldr	r2, [pc, #284]	@ (8007fd8 <xPortStartScheduler+0x128>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10b      	bne.n	8007ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8007fd4 <xPortStartScheduler+0x124>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a3f      	ldr	r2, [pc, #252]	@ (8007fdc <xPortStartScheduler+0x12c>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d10b      	bne.n	8007efa <xPortStartScheduler+0x4a>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	613b      	str	r3, [r7, #16]
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <xPortStartScheduler+0x130>)
 8007efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	22ff      	movs	r2, #255	@ 0xff
 8007f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <xPortStartScheduler+0x134>)
 8007f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f22:	4b31      	ldr	r3, [pc, #196]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f24:	2207      	movs	r2, #7
 8007f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f28:	e009      	b.n	8007f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	4a2d      	ldr	r2, [pc, #180]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d0ef      	beq.n	8007f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f4a:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f1c3 0307 	rsb	r3, r3, #7
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d00b      	beq.n	8007f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	e7fd      	b.n	8007f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f78:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007f80:	4a19      	ldr	r2, [pc, #100]	@ (8007fe8 <xPortStartScheduler+0x138>)
 8007f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f8c:	4b17      	ldr	r3, [pc, #92]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a16      	ldr	r2, [pc, #88]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f98:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a13      	ldr	r2, [pc, #76]	@ (8007fec <xPortStartScheduler+0x13c>)
 8007f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fa4:	f000 f8da 	bl	800815c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	@ (8007ff0 <xPortStartScheduler+0x140>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fae:	f000 f8f9 	bl	80081a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ff4 <xPortStartScheduler+0x144>)
 8007fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007fbe:	f7ff ff63 	bl	8007e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007fc2:	f7ff fd3f 	bl	8007a44 <vTaskSwitchContext>
	prvTaskExitError();
 8007fc6:	f7ff ff17 	bl	8007df8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	e000ed00 	.word	0xe000ed00
 8007fd8:	410fc271 	.word	0x410fc271
 8007fdc:	410fc270 	.word	0x410fc270
 8007fe0:	e000e400 	.word	0xe000e400
 8007fe4:	20000c00 	.word	0x20000c00
 8007fe8:	20000c04 	.word	0x20000c04
 8007fec:	e000ed20 	.word	0xe000ed20
 8007ff0:	2000000c 	.word	0x2000000c
 8007ff4:	e000ef34 	.word	0xe000ef34

08007ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	607b      	str	r3, [r7, #4]
}
 8008010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008012:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <vPortEnterCritical+0x5c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a0e      	ldr	r2, [pc, #56]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800801c:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <vPortEnterCritical+0x5c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d110      	bne.n	8008046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008024:	4b0c      	ldr	r3, [pc, #48]	@ (8008058 <vPortEnterCritical+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <vPortEnterCritical+0x4e>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <vPortEnterCritical+0x4a>
	}
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008062:	4b12      	ldr	r3, [pc, #72]	@ (80080ac <vPortExitCritical+0x50>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <vPortExitCritical+0x26>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008082:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <vPortExitCritical+0x50>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3b01      	subs	r3, #1
 8008088:	4a08      	ldr	r2, [pc, #32]	@ (80080ac <vPortExitCritical+0x50>)
 800808a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800808c:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <vPortExitCritical+0x50>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <vPortExitCritical+0x44>
 8008094:	2300      	movs	r3, #0
 8008096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000000c 	.word	0x2000000c

080080b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080b0:	f3ef 8009 	mrs	r0, PSP
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <pxCurrentTCBConst>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	f01e 0f10 	tst.w	lr, #16
 80080c0:	bf08      	it	eq
 80080c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80080c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	6010      	str	r0, [r2, #0]
 80080cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80080d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80080d4:	f380 8811 	msr	BASEPRI, r0
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f7ff fcb0 	bl	8007a44 <vTaskSwitchContext>
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	f380 8811 	msr	BASEPRI, r0
 80080ec:	bc09      	pop	{r0, r3}
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6808      	ldr	r0, [r1, #0]
 80080f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f6:	f01e 0f10 	tst.w	lr, #16
 80080fa:	bf08      	it	eq
 80080fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008100:	f380 8809 	msr	PSP, r0
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst>:
 8008110:	20000ad4 	.word	0x20000ad4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	607b      	str	r3, [r7, #4]
}
 8008130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008132:	f7ff fbcd 	bl	80078d0 <xTaskIncrementTick>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800813c:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <SysTick_Handler+0x40>)
 800813e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008166:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <vPortSetupTimerInterrupt+0x38>)
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <vPortSetupTimerInterrupt+0x3c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <vPortSetupTimerInterrupt+0x40>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	099b      	lsrs	r3, r3, #6
 8008178:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vPortSetupTimerInterrupt+0x44>)
 800817a:	3b01      	subs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800817e:	4b04      	ldr	r3, [pc, #16]	@ (8008190 <vPortSetupTimerInterrupt+0x34>)
 8008180:	2207      	movs	r2, #7
 8008182:	601a      	str	r2, [r3, #0]
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	e000e010 	.word	0xe000e010
 8008194:	e000e018 	.word	0xe000e018
 8008198:	20000000 	.word	0x20000000
 800819c:	10624dd3 	.word	0x10624dd3
 80081a0:	e000e014 	.word	0xe000e014

080081a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081b4 <vPortEnableVFP+0x10>
 80081a8:	6801      	ldr	r1, [r0, #0]
 80081aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ae:	6001      	str	r1, [r0, #0]
 80081b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e000ed88 	.word	0xe000ed88

080081b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d915      	bls.n	80081f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ca:	4a18      	ldr	r2, [pc, #96]	@ (800822c <vPortValidateInterruptPriority+0x74>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081d4:	4b16      	ldr	r3, [pc, #88]	@ (8008230 <vPortValidateInterruptPriority+0x78>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	7afa      	ldrb	r2, [r7, #11]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20b      	bcs.n	80081f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80081f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <vPortValidateInterruptPriority+0x7c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80081fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <vPortValidateInterruptPriority+0x80>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d90b      	bls.n	800821e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	603b      	str	r3, [r7, #0]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vPortValidateInterruptPriority+0x62>
	}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	e000e3f0 	.word	0xe000e3f0
 8008230:	20000c00 	.word	0x20000c00
 8008234:	e000ed0c 	.word	0xe000ed0c
 8008238:	20000c04 	.word	0x20000c04

0800823c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008248:	f7ff fa96 	bl	8007778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800824c:	4b5c      	ldr	r3, [pc, #368]	@ (80083c0 <pvPortMalloc+0x184>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008254:	f000 f924 	bl	80084a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008258:	4b5a      	ldr	r3, [pc, #360]	@ (80083c4 <pvPortMalloc+0x188>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 8095 	bne.w	8008390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01e      	beq.n	80082aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800826c:	2208      	movs	r2, #8
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	2b00      	cmp	r3, #0
 800827c:	d015      	beq.n	80082aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <pvPortMalloc+0x6e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	617b      	str	r3, [r7, #20]
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06f      	beq.n	8008390 <pvPortMalloc+0x154>
 80082b0:	4b45      	ldr	r3, [pc, #276]	@ (80083c8 <pvPortMalloc+0x18c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d86a      	bhi.n	8008390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ba:	4b44      	ldr	r3, [pc, #272]	@ (80083cc <pvPortMalloc+0x190>)
 80082bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082be:	4b43      	ldr	r3, [pc, #268]	@ (80083cc <pvPortMalloc+0x190>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082c4:	e004      	b.n	80082d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d903      	bls.n	80082e2 <pvPortMalloc+0xa6>
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f1      	bne.n	80082c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082e2:	4b37      	ldr	r3, [pc, #220]	@ (80083c0 <pvPortMalloc+0x184>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d051      	beq.n	8008390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2208      	movs	r2, #8
 80082f2:	4413      	add	r3, r2
 80082f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	2308      	movs	r3, #8
 8008308:	005b      	lsls	r3, r3, #1
 800830a:	429a      	cmp	r2, r3
 800830c:	d920      	bls.n	8008350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800830e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4413      	add	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <pvPortMalloc+0xfc>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800834a:	69b8      	ldr	r0, [r7, #24]
 800834c:	f000 f90a 	bl	8008564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008350:	4b1d      	ldr	r3, [pc, #116]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <pvPortMalloc+0x18c>)
 800835c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800835e:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <pvPortMalloc+0x18c>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b1b      	ldr	r3, [pc, #108]	@ (80083d0 <pvPortMalloc+0x194>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d203      	bcs.n	8008372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800836a:	4b17      	ldr	r3, [pc, #92]	@ (80083c8 <pvPortMalloc+0x18c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <pvPortMalloc+0x194>)
 8008370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <pvPortMalloc+0x188>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	431a      	orrs	r2, r3
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <pvPortMalloc+0x198>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a11      	ldr	r2, [pc, #68]	@ (80083d4 <pvPortMalloc+0x198>)
 800838e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008390:	f7ff fa00 	bl	8007794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <pvPortMalloc+0x17a>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	60fb      	str	r3, [r7, #12]
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <pvPortMalloc+0x176>
	return pvReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	@ 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	200017c8 	.word	0x200017c8
 80083c4:	200017dc 	.word	0x200017dc
 80083c8:	200017cc 	.word	0x200017cc
 80083cc:	200017c0 	.word	0x200017c0
 80083d0:	200017d0 	.word	0x200017d0
 80083d4:	200017d4 	.word	0x200017d4

080083d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d04f      	beq.n	800848a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083ea:	2308      	movs	r3, #8
 80083ec:	425b      	negs	r3, r3
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4413      	add	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b25      	ldr	r3, [pc, #148]	@ (8008494 <vPortFree+0xbc>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4013      	ands	r3, r2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <vPortFree+0x46>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <vPortFree+0x66>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60bb      	str	r3, [r7, #8]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b14      	ldr	r3, [pc, #80]	@ (8008494 <vPortFree+0xbc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01e      	beq.n	800848a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11a      	bne.n	800848a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <vPortFree+0xbc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008464:	f7ff f988 	bl	8007778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <vPortFree+0xc0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4413      	add	r3, r2
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <vPortFree+0xc0>)
 8008474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f874 	bl	8008564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <vPortFree+0xc4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3301      	adds	r3, #1
 8008482:	4a06      	ldr	r2, [pc, #24]	@ (800849c <vPortFree+0xc4>)
 8008484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008486:	f7ff f985 	bl	8007794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200017dc 	.word	0x200017dc
 8008498:	200017cc 	.word	0x200017cc
 800849c:	200017d8 	.word	0x200017d8

080084a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80084aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084ac:	4b27      	ldr	r3, [pc, #156]	@ (800854c <prvHeapInit+0xac>)
 80084ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3307      	adds	r3, #7
 80084be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	4a1f      	ldr	r2, [pc, #124]	@ (800854c <prvHeapInit+0xac>)
 80084d0:	4413      	add	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008550 <prvHeapInit+0xb0>)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084de:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <prvHeapInit+0xb0>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084ec:	2208      	movs	r2, #8
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4a15      	ldr	r2, [pc, #84]	@ (8008554 <prvHeapInit+0xb4>)
 8008500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008502:	4b14      	ldr	r3, [pc, #80]	@ (8008554 <prvHeapInit+0xb4>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <prvHeapInit+0xb4>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	1ad2      	subs	r2, r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008520:	4b0c      	ldr	r3, [pc, #48]	@ (8008554 <prvHeapInit+0xb4>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <prvHeapInit+0xb8>)
 800852e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a09      	ldr	r2, [pc, #36]	@ (800855c <prvHeapInit+0xbc>)
 8008536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008538:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <prvHeapInit+0xc0>)
 800853a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800853e:	601a      	str	r2, [r3, #0]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	20000c08 	.word	0x20000c08
 8008550:	200017c0 	.word	0x200017c0
 8008554:	200017c8 	.word	0x200017c8
 8008558:	200017d0 	.word	0x200017d0
 800855c:	200017cc 	.word	0x200017cc
 8008560:	200017dc 	.word	0x200017dc

08008564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800856c:	4b28      	ldr	r3, [pc, #160]	@ (8008610 <prvInsertBlockIntoFreeList+0xac>)
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <prvInsertBlockIntoFreeList+0x14>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	429a      	cmp	r2, r3
 8008580:	d8f7      	bhi.n	8008572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d108      	bne.n	80085a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	441a      	add	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d118      	bne.n	80085ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d00d      	beq.n	80085e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e008      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e003      	b.n	80085f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	200017c0 	.word	0x200017c0
 8008614:	200017c8 	.word	0x200017c8

08008618 <__cvt>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	ec57 6b10 	vmov	r6, r7, d0
 8008620:	2f00      	cmp	r7, #0
 8008622:	460c      	mov	r4, r1
 8008624:	4619      	mov	r1, r3
 8008626:	463b      	mov	r3, r7
 8008628:	bfbb      	ittet	lt
 800862a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800862e:	461f      	movlt	r7, r3
 8008630:	2300      	movge	r3, #0
 8008632:	232d      	movlt	r3, #45	@ 0x2d
 8008634:	700b      	strb	r3, [r1, #0]
 8008636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008638:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800863c:	4691      	mov	r9, r2
 800863e:	f023 0820 	bic.w	r8, r3, #32
 8008642:	bfbc      	itt	lt
 8008644:	4632      	movlt	r2, r6
 8008646:	4616      	movlt	r6, r2
 8008648:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800864c:	d005      	beq.n	800865a <__cvt+0x42>
 800864e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008652:	d100      	bne.n	8008656 <__cvt+0x3e>
 8008654:	3401      	adds	r4, #1
 8008656:	2102      	movs	r1, #2
 8008658:	e000      	b.n	800865c <__cvt+0x44>
 800865a:	2103      	movs	r1, #3
 800865c:	ab03      	add	r3, sp, #12
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	ab02      	add	r3, sp, #8
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	ec47 6b10 	vmov	d0, r6, r7
 8008668:	4653      	mov	r3, sl
 800866a:	4622      	mov	r2, r4
 800866c:	f000 feb4 	bl	80093d8 <_dtoa_r>
 8008670:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008674:	4605      	mov	r5, r0
 8008676:	d119      	bne.n	80086ac <__cvt+0x94>
 8008678:	f019 0f01 	tst.w	r9, #1
 800867c:	d00e      	beq.n	800869c <__cvt+0x84>
 800867e:	eb00 0904 	add.w	r9, r0, r4
 8008682:	2200      	movs	r2, #0
 8008684:	2300      	movs	r3, #0
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f8 fa2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800868e:	b108      	cbz	r0, 8008694 <__cvt+0x7c>
 8008690:	f8cd 900c 	str.w	r9, [sp, #12]
 8008694:	2230      	movs	r2, #48	@ 0x30
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	454b      	cmp	r3, r9
 800869a:	d31e      	bcc.n	80086da <__cvt+0xc2>
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086a0:	1b5b      	subs	r3, r3, r5
 80086a2:	4628      	mov	r0, r5
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	b004      	add	sp, #16
 80086a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80086b0:	eb00 0904 	add.w	r9, r0, r4
 80086b4:	d1e5      	bne.n	8008682 <__cvt+0x6a>
 80086b6:	7803      	ldrb	r3, [r0, #0]
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d10a      	bne.n	80086d2 <__cvt+0xba>
 80086bc:	2200      	movs	r2, #0
 80086be:	2300      	movs	r3, #0
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 fa10 	bl	8000ae8 <__aeabi_dcmpeq>
 80086c8:	b918      	cbnz	r0, 80086d2 <__cvt+0xba>
 80086ca:	f1c4 0401 	rsb	r4, r4, #1
 80086ce:	f8ca 4000 	str.w	r4, [sl]
 80086d2:	f8da 3000 	ldr.w	r3, [sl]
 80086d6:	4499      	add	r9, r3
 80086d8:	e7d3      	b.n	8008682 <__cvt+0x6a>
 80086da:	1c59      	adds	r1, r3, #1
 80086dc:	9103      	str	r1, [sp, #12]
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	e7d9      	b.n	8008696 <__cvt+0x7e>

080086e2 <__exponent>:
 80086e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086e4:	2900      	cmp	r1, #0
 80086e6:	bfba      	itte	lt
 80086e8:	4249      	neglt	r1, r1
 80086ea:	232d      	movlt	r3, #45	@ 0x2d
 80086ec:	232b      	movge	r3, #43	@ 0x2b
 80086ee:	2909      	cmp	r1, #9
 80086f0:	7002      	strb	r2, [r0, #0]
 80086f2:	7043      	strb	r3, [r0, #1]
 80086f4:	dd29      	ble.n	800874a <__exponent+0x68>
 80086f6:	f10d 0307 	add.w	r3, sp, #7
 80086fa:	461d      	mov	r5, r3
 80086fc:	270a      	movs	r7, #10
 80086fe:	461a      	mov	r2, r3
 8008700:	fbb1 f6f7 	udiv	r6, r1, r7
 8008704:	fb07 1416 	mls	r4, r7, r6, r1
 8008708:	3430      	adds	r4, #48	@ 0x30
 800870a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800870e:	460c      	mov	r4, r1
 8008710:	2c63      	cmp	r4, #99	@ 0x63
 8008712:	f103 33ff 	add.w	r3, r3, #4294967295
 8008716:	4631      	mov	r1, r6
 8008718:	dcf1      	bgt.n	80086fe <__exponent+0x1c>
 800871a:	3130      	adds	r1, #48	@ 0x30
 800871c:	1e94      	subs	r4, r2, #2
 800871e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008722:	1c41      	adds	r1, r0, #1
 8008724:	4623      	mov	r3, r4
 8008726:	42ab      	cmp	r3, r5
 8008728:	d30a      	bcc.n	8008740 <__exponent+0x5e>
 800872a:	f10d 0309 	add.w	r3, sp, #9
 800872e:	1a9b      	subs	r3, r3, r2
 8008730:	42ac      	cmp	r4, r5
 8008732:	bf88      	it	hi
 8008734:	2300      	movhi	r3, #0
 8008736:	3302      	adds	r3, #2
 8008738:	4403      	add	r3, r0
 800873a:	1a18      	subs	r0, r3, r0
 800873c:	b003      	add	sp, #12
 800873e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008740:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008744:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008748:	e7ed      	b.n	8008726 <__exponent+0x44>
 800874a:	2330      	movs	r3, #48	@ 0x30
 800874c:	3130      	adds	r1, #48	@ 0x30
 800874e:	7083      	strb	r3, [r0, #2]
 8008750:	70c1      	strb	r1, [r0, #3]
 8008752:	1d03      	adds	r3, r0, #4
 8008754:	e7f1      	b.n	800873a <__exponent+0x58>
	...

08008758 <_printf_float>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b08d      	sub	sp, #52	@ 0x34
 800875e:	460c      	mov	r4, r1
 8008760:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008764:	4616      	mov	r6, r2
 8008766:	461f      	mov	r7, r3
 8008768:	4605      	mov	r5, r0
 800876a:	f000 fcc7 	bl	80090fc <_localeconv_r>
 800876e:	6803      	ldr	r3, [r0, #0]
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	4618      	mov	r0, r3
 8008774:	f7f7 fd8c 	bl	8000290 <strlen>
 8008778:	2300      	movs	r3, #0
 800877a:	930a      	str	r3, [sp, #40]	@ 0x28
 800877c:	f8d8 3000 	ldr.w	r3, [r8]
 8008780:	9005      	str	r0, [sp, #20]
 8008782:	3307      	adds	r3, #7
 8008784:	f023 0307 	bic.w	r3, r3, #7
 8008788:	f103 0208 	add.w	r2, r3, #8
 800878c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008790:	f8d4 b000 	ldr.w	fp, [r4]
 8008794:	f8c8 2000 	str.w	r2, [r8]
 8008798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800879c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80087a0:	9307      	str	r3, [sp, #28]
 80087a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80087a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80087aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008a20 <_printf_float+0x2c8>)
 80087b0:	f04f 32ff 	mov.w	r2, #4294967295
 80087b4:	f7f8 f9ca 	bl	8000b4c <__aeabi_dcmpun>
 80087b8:	bb70      	cbnz	r0, 8008818 <_printf_float+0xc0>
 80087ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087be:	4b98      	ldr	r3, [pc, #608]	@ (8008a20 <_printf_float+0x2c8>)
 80087c0:	f04f 32ff 	mov.w	r2, #4294967295
 80087c4:	f7f8 f9a4 	bl	8000b10 <__aeabi_dcmple>
 80087c8:	bb30      	cbnz	r0, 8008818 <_printf_float+0xc0>
 80087ca:	2200      	movs	r2, #0
 80087cc:	2300      	movs	r3, #0
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f7f8 f993 	bl	8000afc <__aeabi_dcmplt>
 80087d6:	b110      	cbz	r0, 80087de <_printf_float+0x86>
 80087d8:	232d      	movs	r3, #45	@ 0x2d
 80087da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087de:	4a91      	ldr	r2, [pc, #580]	@ (8008a24 <_printf_float+0x2cc>)
 80087e0:	4b91      	ldr	r3, [pc, #580]	@ (8008a28 <_printf_float+0x2d0>)
 80087e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087e6:	bf8c      	ite	hi
 80087e8:	4690      	movhi	r8, r2
 80087ea:	4698      	movls	r8, r3
 80087ec:	2303      	movs	r3, #3
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	f02b 0304 	bic.w	r3, fp, #4
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	f04f 0900 	mov.w	r9, #0
 80087fa:	9700      	str	r7, [sp, #0]
 80087fc:	4633      	mov	r3, r6
 80087fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008800:	4621      	mov	r1, r4
 8008802:	4628      	mov	r0, r5
 8008804:	f000 f9d2 	bl	8008bac <_printf_common>
 8008808:	3001      	adds	r0, #1
 800880a:	f040 808d 	bne.w	8008928 <_printf_float+0x1d0>
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	b00d      	add	sp, #52	@ 0x34
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f8 f994 	bl	8000b4c <__aeabi_dcmpun>
 8008824:	b140      	cbz	r0, 8008838 <_printf_float+0xe0>
 8008826:	464b      	mov	r3, r9
 8008828:	2b00      	cmp	r3, #0
 800882a:	bfbc      	itt	lt
 800882c:	232d      	movlt	r3, #45	@ 0x2d
 800882e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008832:	4a7e      	ldr	r2, [pc, #504]	@ (8008a2c <_printf_float+0x2d4>)
 8008834:	4b7e      	ldr	r3, [pc, #504]	@ (8008a30 <_printf_float+0x2d8>)
 8008836:	e7d4      	b.n	80087e2 <_printf_float+0x8a>
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800883e:	9206      	str	r2, [sp, #24]
 8008840:	1c5a      	adds	r2, r3, #1
 8008842:	d13b      	bne.n	80088bc <_printf_float+0x164>
 8008844:	2306      	movs	r3, #6
 8008846:	6063      	str	r3, [r4, #4]
 8008848:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800884c:	2300      	movs	r3, #0
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	9303      	str	r3, [sp, #12]
 8008852:	ab0a      	add	r3, sp, #40	@ 0x28
 8008854:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008858:	ab09      	add	r3, sp, #36	@ 0x24
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	6861      	ldr	r1, [r4, #4]
 800885e:	ec49 8b10 	vmov	d0, r8, r9
 8008862:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008866:	4628      	mov	r0, r5
 8008868:	f7ff fed6 	bl	8008618 <__cvt>
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008870:	2b47      	cmp	r3, #71	@ 0x47
 8008872:	4680      	mov	r8, r0
 8008874:	d129      	bne.n	80088ca <_printf_float+0x172>
 8008876:	1cc8      	adds	r0, r1, #3
 8008878:	db02      	blt.n	8008880 <_printf_float+0x128>
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	4299      	cmp	r1, r3
 800887e:	dd41      	ble.n	8008904 <_printf_float+0x1ac>
 8008880:	f1aa 0a02 	sub.w	sl, sl, #2
 8008884:	fa5f fa8a 	uxtb.w	sl, sl
 8008888:	3901      	subs	r1, #1
 800888a:	4652      	mov	r2, sl
 800888c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008890:	9109      	str	r1, [sp, #36]	@ 0x24
 8008892:	f7ff ff26 	bl	80086e2 <__exponent>
 8008896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008898:	1813      	adds	r3, r2, r0
 800889a:	2a01      	cmp	r2, #1
 800889c:	4681      	mov	r9, r0
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	dc02      	bgt.n	80088a8 <_printf_float+0x150>
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	07d2      	lsls	r2, r2, #31
 80088a6:	d501      	bpl.n	80088ac <_printf_float+0x154>
 80088a8:	3301      	adds	r3, #1
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0a2      	beq.n	80087fa <_printf_float+0xa2>
 80088b4:	232d      	movs	r3, #45	@ 0x2d
 80088b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088ba:	e79e      	b.n	80087fa <_printf_float+0xa2>
 80088bc:	9a06      	ldr	r2, [sp, #24]
 80088be:	2a47      	cmp	r2, #71	@ 0x47
 80088c0:	d1c2      	bne.n	8008848 <_printf_float+0xf0>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1c0      	bne.n	8008848 <_printf_float+0xf0>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e7bd      	b.n	8008846 <_printf_float+0xee>
 80088ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088ce:	d9db      	bls.n	8008888 <_printf_float+0x130>
 80088d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088d4:	d118      	bne.n	8008908 <_printf_float+0x1b0>
 80088d6:	2900      	cmp	r1, #0
 80088d8:	6863      	ldr	r3, [r4, #4]
 80088da:	dd0b      	ble.n	80088f4 <_printf_float+0x19c>
 80088dc:	6121      	str	r1, [r4, #16]
 80088de:	b913      	cbnz	r3, 80088e6 <_printf_float+0x18e>
 80088e0:	6822      	ldr	r2, [r4, #0]
 80088e2:	07d0      	lsls	r0, r2, #31
 80088e4:	d502      	bpl.n	80088ec <_printf_float+0x194>
 80088e6:	3301      	adds	r3, #1
 80088e8:	440b      	add	r3, r1
 80088ea:	6123      	str	r3, [r4, #16]
 80088ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088ee:	f04f 0900 	mov.w	r9, #0
 80088f2:	e7db      	b.n	80088ac <_printf_float+0x154>
 80088f4:	b913      	cbnz	r3, 80088fc <_printf_float+0x1a4>
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	07d2      	lsls	r2, r2, #31
 80088fa:	d501      	bpl.n	8008900 <_printf_float+0x1a8>
 80088fc:	3302      	adds	r3, #2
 80088fe:	e7f4      	b.n	80088ea <_printf_float+0x192>
 8008900:	2301      	movs	r3, #1
 8008902:	e7f2      	b.n	80088ea <_printf_float+0x192>
 8008904:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008908:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890a:	4299      	cmp	r1, r3
 800890c:	db05      	blt.n	800891a <_printf_float+0x1c2>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	6121      	str	r1, [r4, #16]
 8008912:	07d8      	lsls	r0, r3, #31
 8008914:	d5ea      	bpl.n	80088ec <_printf_float+0x194>
 8008916:	1c4b      	adds	r3, r1, #1
 8008918:	e7e7      	b.n	80088ea <_printf_float+0x192>
 800891a:	2900      	cmp	r1, #0
 800891c:	bfd4      	ite	le
 800891e:	f1c1 0202 	rsble	r2, r1, #2
 8008922:	2201      	movgt	r2, #1
 8008924:	4413      	add	r3, r2
 8008926:	e7e0      	b.n	80088ea <_printf_float+0x192>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	055a      	lsls	r2, r3, #21
 800892c:	d407      	bmi.n	800893e <_printf_float+0x1e6>
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	4642      	mov	r2, r8
 8008932:	4631      	mov	r1, r6
 8008934:	4628      	mov	r0, r5
 8008936:	47b8      	blx	r7
 8008938:	3001      	adds	r0, #1
 800893a:	d12b      	bne.n	8008994 <_printf_float+0x23c>
 800893c:	e767      	b.n	800880e <_printf_float+0xb6>
 800893e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008942:	f240 80dd 	bls.w	8008b00 <_printf_float+0x3a8>
 8008946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800894a:	2200      	movs	r2, #0
 800894c:	2300      	movs	r3, #0
 800894e:	f7f8 f8cb 	bl	8000ae8 <__aeabi_dcmpeq>
 8008952:	2800      	cmp	r0, #0
 8008954:	d033      	beq.n	80089be <_printf_float+0x266>
 8008956:	4a37      	ldr	r2, [pc, #220]	@ (8008a34 <_printf_float+0x2dc>)
 8008958:	2301      	movs	r3, #1
 800895a:	4631      	mov	r1, r6
 800895c:	4628      	mov	r0, r5
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	f43f af54 	beq.w	800880e <_printf_float+0xb6>
 8008966:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800896a:	4543      	cmp	r3, r8
 800896c:	db02      	blt.n	8008974 <_printf_float+0x21c>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	07d8      	lsls	r0, r3, #31
 8008972:	d50f      	bpl.n	8008994 <_printf_float+0x23c>
 8008974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af45 	beq.w	800880e <_printf_float+0xb6>
 8008984:	f04f 0900 	mov.w	r9, #0
 8008988:	f108 38ff 	add.w	r8, r8, #4294967295
 800898c:	f104 0a1a 	add.w	sl, r4, #26
 8008990:	45c8      	cmp	r8, r9
 8008992:	dc09      	bgt.n	80089a8 <_printf_float+0x250>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	079b      	lsls	r3, r3, #30
 8008998:	f100 8103 	bmi.w	8008ba2 <_printf_float+0x44a>
 800899c:	68e0      	ldr	r0, [r4, #12]
 800899e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089a0:	4298      	cmp	r0, r3
 80089a2:	bfb8      	it	lt
 80089a4:	4618      	movlt	r0, r3
 80089a6:	e734      	b.n	8008812 <_printf_float+0xba>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4652      	mov	r2, sl
 80089ac:	4631      	mov	r1, r6
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b8      	blx	r7
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f af2b 	beq.w	800880e <_printf_float+0xb6>
 80089b8:	f109 0901 	add.w	r9, r9, #1
 80089bc:	e7e8      	b.n	8008990 <_printf_float+0x238>
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc39      	bgt.n	8008a38 <_printf_float+0x2e0>
 80089c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a34 <_printf_float+0x2dc>)
 80089c6:	2301      	movs	r3, #1
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af1d 	beq.w	800880e <_printf_float+0xb6>
 80089d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80089d8:	ea59 0303 	orrs.w	r3, r9, r3
 80089dc:	d102      	bne.n	80089e4 <_printf_float+0x28c>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	07d9      	lsls	r1, r3, #31
 80089e2:	d5d7      	bpl.n	8008994 <_printf_float+0x23c>
 80089e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af0d 	beq.w	800880e <_printf_float+0xb6>
 80089f4:	f04f 0a00 	mov.w	sl, #0
 80089f8:	f104 0b1a 	add.w	fp, r4, #26
 80089fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fe:	425b      	negs	r3, r3
 8008a00:	4553      	cmp	r3, sl
 8008a02:	dc01      	bgt.n	8008a08 <_printf_float+0x2b0>
 8008a04:	464b      	mov	r3, r9
 8008a06:	e793      	b.n	8008930 <_printf_float+0x1d8>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	465a      	mov	r2, fp
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	f43f aefb 	beq.w	800880e <_printf_float+0xb6>
 8008a18:	f10a 0a01 	add.w	sl, sl, #1
 8008a1c:	e7ee      	b.n	80089fc <_printf_float+0x2a4>
 8008a1e:	bf00      	nop
 8008a20:	7fefffff 	.word	0x7fefffff
 8008a24:	0800bff0 	.word	0x0800bff0
 8008a28:	0800bfec 	.word	0x0800bfec
 8008a2c:	0800bff8 	.word	0x0800bff8
 8008a30:	0800bff4 	.word	0x0800bff4
 8008a34:	0800bffc 	.word	0x0800bffc
 8008a38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a3e:	4553      	cmp	r3, sl
 8008a40:	bfa8      	it	ge
 8008a42:	4653      	movge	r3, sl
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	4699      	mov	r9, r3
 8008a48:	dc36      	bgt.n	8008ab8 <_printf_float+0x360>
 8008a4a:	f04f 0b00 	mov.w	fp, #0
 8008a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a52:	f104 021a 	add.w	r2, r4, #26
 8008a56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a58:	9306      	str	r3, [sp, #24]
 8008a5a:	eba3 0309 	sub.w	r3, r3, r9
 8008a5e:	455b      	cmp	r3, fp
 8008a60:	dc31      	bgt.n	8008ac6 <_printf_float+0x36e>
 8008a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a64:	459a      	cmp	sl, r3
 8008a66:	dc3a      	bgt.n	8008ade <_printf_float+0x386>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07da      	lsls	r2, r3, #31
 8008a6c:	d437      	bmi.n	8008ade <_printf_float+0x386>
 8008a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a70:	ebaa 0903 	sub.w	r9, sl, r3
 8008a74:	9b06      	ldr	r3, [sp, #24]
 8008a76:	ebaa 0303 	sub.w	r3, sl, r3
 8008a7a:	4599      	cmp	r9, r3
 8008a7c:	bfa8      	it	ge
 8008a7e:	4699      	movge	r9, r3
 8008a80:	f1b9 0f00 	cmp.w	r9, #0
 8008a84:	dc33      	bgt.n	8008aee <_printf_float+0x396>
 8008a86:	f04f 0800 	mov.w	r8, #0
 8008a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a8e:	f104 0b1a 	add.w	fp, r4, #26
 8008a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a94:	ebaa 0303 	sub.w	r3, sl, r3
 8008a98:	eba3 0309 	sub.w	r3, r3, r9
 8008a9c:	4543      	cmp	r3, r8
 8008a9e:	f77f af79 	ble.w	8008994 <_printf_float+0x23c>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	465a      	mov	r2, fp
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f aeae 	beq.w	800880e <_printf_float+0xb6>
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	e7ec      	b.n	8008a92 <_printf_float+0x33a>
 8008ab8:	4642      	mov	r2, r8
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d1c2      	bne.n	8008a4a <_printf_float+0x2f2>
 8008ac4:	e6a3      	b.n	800880e <_printf_float+0xb6>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	9206      	str	r2, [sp, #24]
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f43f ae9c 	beq.w	800880e <_printf_float+0xb6>
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	f10b 0b01 	add.w	fp, fp, #1
 8008adc:	e7bb      	b.n	8008a56 <_printf_float+0x2fe>
 8008ade:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d1c0      	bne.n	8008a6e <_printf_float+0x316>
 8008aec:	e68f      	b.n	800880e <_printf_float+0xb6>
 8008aee:	9a06      	ldr	r2, [sp, #24]
 8008af0:	464b      	mov	r3, r9
 8008af2:	4442      	add	r2, r8
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	d1c3      	bne.n	8008a86 <_printf_float+0x32e>
 8008afe:	e686      	b.n	800880e <_printf_float+0xb6>
 8008b00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b04:	f1ba 0f01 	cmp.w	sl, #1
 8008b08:	dc01      	bgt.n	8008b0e <_printf_float+0x3b6>
 8008b0a:	07db      	lsls	r3, r3, #31
 8008b0c:	d536      	bpl.n	8008b7c <_printf_float+0x424>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4642      	mov	r2, r8
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f43f ae78 	beq.w	800880e <_printf_float+0xb6>
 8008b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f43f ae70 	beq.w	800880e <_printf_float+0xb6>
 8008b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b3a:	f7f7 ffd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b3e:	b9c0      	cbnz	r0, 8008b72 <_printf_float+0x41a>
 8008b40:	4653      	mov	r3, sl
 8008b42:	f108 0201 	add.w	r2, r8, #1
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	d10c      	bne.n	8008b6a <_printf_float+0x412>
 8008b50:	e65d      	b.n	800880e <_printf_float+0xb6>
 8008b52:	2301      	movs	r3, #1
 8008b54:	465a      	mov	r2, fp
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f ae56 	beq.w	800880e <_printf_float+0xb6>
 8008b62:	f108 0801 	add.w	r8, r8, #1
 8008b66:	45d0      	cmp	r8, sl
 8008b68:	dbf3      	blt.n	8008b52 <_printf_float+0x3fa>
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b70:	e6df      	b.n	8008932 <_printf_float+0x1da>
 8008b72:	f04f 0800 	mov.w	r8, #0
 8008b76:	f104 0b1a 	add.w	fp, r4, #26
 8008b7a:	e7f4      	b.n	8008b66 <_printf_float+0x40e>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4642      	mov	r2, r8
 8008b80:	e7e1      	b.n	8008b46 <_printf_float+0x3ee>
 8008b82:	2301      	movs	r3, #1
 8008b84:	464a      	mov	r2, r9
 8008b86:	4631      	mov	r1, r6
 8008b88:	4628      	mov	r0, r5
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae3e 	beq.w	800880e <_printf_float+0xb6>
 8008b92:	f108 0801 	add.w	r8, r8, #1
 8008b96:	68e3      	ldr	r3, [r4, #12]
 8008b98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b9a:	1a5b      	subs	r3, r3, r1
 8008b9c:	4543      	cmp	r3, r8
 8008b9e:	dcf0      	bgt.n	8008b82 <_printf_float+0x42a>
 8008ba0:	e6fc      	b.n	800899c <_printf_float+0x244>
 8008ba2:	f04f 0800 	mov.w	r8, #0
 8008ba6:	f104 0919 	add.w	r9, r4, #25
 8008baa:	e7f4      	b.n	8008b96 <_printf_float+0x43e>

08008bac <_printf_common>:
 8008bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	4698      	mov	r8, r3
 8008bb4:	688a      	ldr	r2, [r1, #8]
 8008bb6:	690b      	ldr	r3, [r1, #16]
 8008bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	bfb8      	it	lt
 8008bc0:	4613      	movlt	r3, r2
 8008bc2:	6033      	str	r3, [r6, #0]
 8008bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008bc8:	4607      	mov	r7, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	b10a      	cbz	r2, 8008bd2 <_printf_common+0x26>
 8008bce:	3301      	adds	r3, #1
 8008bd0:	6033      	str	r3, [r6, #0]
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	0699      	lsls	r1, r3, #26
 8008bd6:	bf42      	ittt	mi
 8008bd8:	6833      	ldrmi	r3, [r6, #0]
 8008bda:	3302      	addmi	r3, #2
 8008bdc:	6033      	strmi	r3, [r6, #0]
 8008bde:	6825      	ldr	r5, [r4, #0]
 8008be0:	f015 0506 	ands.w	r5, r5, #6
 8008be4:	d106      	bne.n	8008bf4 <_printf_common+0x48>
 8008be6:	f104 0a19 	add.w	sl, r4, #25
 8008bea:	68e3      	ldr	r3, [r4, #12]
 8008bec:	6832      	ldr	r2, [r6, #0]
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	42ab      	cmp	r3, r5
 8008bf2:	dc26      	bgt.n	8008c42 <_printf_common+0x96>
 8008bf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bf8:	6822      	ldr	r2, [r4, #0]
 8008bfa:	3b00      	subs	r3, #0
 8008bfc:	bf18      	it	ne
 8008bfe:	2301      	movne	r3, #1
 8008c00:	0692      	lsls	r2, r2, #26
 8008c02:	d42b      	bmi.n	8008c5c <_printf_common+0xb0>
 8008c04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c08:	4641      	mov	r1, r8
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	47c8      	blx	r9
 8008c0e:	3001      	adds	r0, #1
 8008c10:	d01e      	beq.n	8008c50 <_printf_common+0xa4>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	f003 0306 	and.w	r3, r3, #6
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	bf02      	ittt	eq
 8008c1e:	68e5      	ldreq	r5, [r4, #12]
 8008c20:	6833      	ldreq	r3, [r6, #0]
 8008c22:	1aed      	subeq	r5, r5, r3
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	bf0c      	ite	eq
 8008c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c2c:	2500      	movne	r5, #0
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	bfc4      	itt	gt
 8008c32:	1a9b      	subgt	r3, r3, r2
 8008c34:	18ed      	addgt	r5, r5, r3
 8008c36:	2600      	movs	r6, #0
 8008c38:	341a      	adds	r4, #26
 8008c3a:	42b5      	cmp	r5, r6
 8008c3c:	d11a      	bne.n	8008c74 <_printf_common+0xc8>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e008      	b.n	8008c54 <_printf_common+0xa8>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4652      	mov	r2, sl
 8008c46:	4641      	mov	r1, r8
 8008c48:	4638      	mov	r0, r7
 8008c4a:	47c8      	blx	r9
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d103      	bne.n	8008c58 <_printf_common+0xac>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c58:	3501      	adds	r5, #1
 8008c5a:	e7c6      	b.n	8008bea <_printf_common+0x3e>
 8008c5c:	18e1      	adds	r1, r4, r3
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	2030      	movs	r0, #48	@ 0x30
 8008c62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c66:	4422      	add	r2, r4
 8008c68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c70:	3302      	adds	r3, #2
 8008c72:	e7c7      	b.n	8008c04 <_printf_common+0x58>
 8008c74:	2301      	movs	r3, #1
 8008c76:	4622      	mov	r2, r4
 8008c78:	4641      	mov	r1, r8
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	47c8      	blx	r9
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d0e6      	beq.n	8008c50 <_printf_common+0xa4>
 8008c82:	3601      	adds	r6, #1
 8008c84:	e7d9      	b.n	8008c3a <_printf_common+0x8e>
	...

08008c88 <_printf_i>:
 8008c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	7e0f      	ldrb	r7, [r1, #24]
 8008c8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c90:	2f78      	cmp	r7, #120	@ 0x78
 8008c92:	4691      	mov	r9, r2
 8008c94:	4680      	mov	r8, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	469a      	mov	sl, r3
 8008c9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c9e:	d807      	bhi.n	8008cb0 <_printf_i+0x28>
 8008ca0:	2f62      	cmp	r7, #98	@ 0x62
 8008ca2:	d80a      	bhi.n	8008cba <_printf_i+0x32>
 8008ca4:	2f00      	cmp	r7, #0
 8008ca6:	f000 80d1 	beq.w	8008e4c <_printf_i+0x1c4>
 8008caa:	2f58      	cmp	r7, #88	@ 0x58
 8008cac:	f000 80b8 	beq.w	8008e20 <_printf_i+0x198>
 8008cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008cb8:	e03a      	b.n	8008d30 <_printf_i+0xa8>
 8008cba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008cbe:	2b15      	cmp	r3, #21
 8008cc0:	d8f6      	bhi.n	8008cb0 <_printf_i+0x28>
 8008cc2:	a101      	add	r1, pc, #4	@ (adr r1, 8008cc8 <_printf_i+0x40>)
 8008cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cc8:	08008d21 	.word	0x08008d21
 8008ccc:	08008d35 	.word	0x08008d35
 8008cd0:	08008cb1 	.word	0x08008cb1
 8008cd4:	08008cb1 	.word	0x08008cb1
 8008cd8:	08008cb1 	.word	0x08008cb1
 8008cdc:	08008cb1 	.word	0x08008cb1
 8008ce0:	08008d35 	.word	0x08008d35
 8008ce4:	08008cb1 	.word	0x08008cb1
 8008ce8:	08008cb1 	.word	0x08008cb1
 8008cec:	08008cb1 	.word	0x08008cb1
 8008cf0:	08008cb1 	.word	0x08008cb1
 8008cf4:	08008e33 	.word	0x08008e33
 8008cf8:	08008d5f 	.word	0x08008d5f
 8008cfc:	08008ded 	.word	0x08008ded
 8008d00:	08008cb1 	.word	0x08008cb1
 8008d04:	08008cb1 	.word	0x08008cb1
 8008d08:	08008e55 	.word	0x08008e55
 8008d0c:	08008cb1 	.word	0x08008cb1
 8008d10:	08008d5f 	.word	0x08008d5f
 8008d14:	08008cb1 	.word	0x08008cb1
 8008d18:	08008cb1 	.word	0x08008cb1
 8008d1c:	08008df5 	.word	0x08008df5
 8008d20:	6833      	ldr	r3, [r6, #0]
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6032      	str	r2, [r6, #0]
 8008d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008d30:	2301      	movs	r3, #1
 8008d32:	e09c      	b.n	8008e6e <_printf_i+0x1e6>
 8008d34:	6833      	ldr	r3, [r6, #0]
 8008d36:	6820      	ldr	r0, [r4, #0]
 8008d38:	1d19      	adds	r1, r3, #4
 8008d3a:	6031      	str	r1, [r6, #0]
 8008d3c:	0606      	lsls	r6, r0, #24
 8008d3e:	d501      	bpl.n	8008d44 <_printf_i+0xbc>
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	e003      	b.n	8008d4c <_printf_i+0xc4>
 8008d44:	0645      	lsls	r5, r0, #25
 8008d46:	d5fb      	bpl.n	8008d40 <_printf_i+0xb8>
 8008d48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	da03      	bge.n	8008d58 <_printf_i+0xd0>
 8008d50:	232d      	movs	r3, #45	@ 0x2d
 8008d52:	426d      	negs	r5, r5
 8008d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d58:	4858      	ldr	r0, [pc, #352]	@ (8008ebc <_printf_i+0x234>)
 8008d5a:	230a      	movs	r3, #10
 8008d5c:	e011      	b.n	8008d82 <_printf_i+0xfa>
 8008d5e:	6821      	ldr	r1, [r4, #0]
 8008d60:	6833      	ldr	r3, [r6, #0]
 8008d62:	0608      	lsls	r0, r1, #24
 8008d64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d68:	d402      	bmi.n	8008d70 <_printf_i+0xe8>
 8008d6a:	0649      	lsls	r1, r1, #25
 8008d6c:	bf48      	it	mi
 8008d6e:	b2ad      	uxthmi	r5, r5
 8008d70:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d72:	4852      	ldr	r0, [pc, #328]	@ (8008ebc <_printf_i+0x234>)
 8008d74:	6033      	str	r3, [r6, #0]
 8008d76:	bf14      	ite	ne
 8008d78:	230a      	movne	r3, #10
 8008d7a:	2308      	moveq	r3, #8
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d82:	6866      	ldr	r6, [r4, #4]
 8008d84:	60a6      	str	r6, [r4, #8]
 8008d86:	2e00      	cmp	r6, #0
 8008d88:	db05      	blt.n	8008d96 <_printf_i+0x10e>
 8008d8a:	6821      	ldr	r1, [r4, #0]
 8008d8c:	432e      	orrs	r6, r5
 8008d8e:	f021 0104 	bic.w	r1, r1, #4
 8008d92:	6021      	str	r1, [r4, #0]
 8008d94:	d04b      	beq.n	8008e2e <_printf_i+0x1a6>
 8008d96:	4616      	mov	r6, r2
 8008d98:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d9c:	fb03 5711 	mls	r7, r3, r1, r5
 8008da0:	5dc7      	ldrb	r7, [r0, r7]
 8008da2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008da6:	462f      	mov	r7, r5
 8008da8:	42bb      	cmp	r3, r7
 8008daa:	460d      	mov	r5, r1
 8008dac:	d9f4      	bls.n	8008d98 <_printf_i+0x110>
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d10b      	bne.n	8008dca <_printf_i+0x142>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	07df      	lsls	r7, r3, #31
 8008db6:	d508      	bpl.n	8008dca <_printf_i+0x142>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	6861      	ldr	r1, [r4, #4]
 8008dbc:	4299      	cmp	r1, r3
 8008dbe:	bfde      	ittt	le
 8008dc0:	2330      	movle	r3, #48	@ 0x30
 8008dc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dca:	1b92      	subs	r2, r2, r6
 8008dcc:	6122      	str	r2, [r4, #16]
 8008dce:	f8cd a000 	str.w	sl, [sp]
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	aa03      	add	r2, sp, #12
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4640      	mov	r0, r8
 8008dda:	f7ff fee7 	bl	8008bac <_printf_common>
 8008dde:	3001      	adds	r0, #1
 8008de0:	d14a      	bne.n	8008e78 <_printf_i+0x1f0>
 8008de2:	f04f 30ff 	mov.w	r0, #4294967295
 8008de6:	b004      	add	sp, #16
 8008de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	f043 0320 	orr.w	r3, r3, #32
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	4832      	ldr	r0, [pc, #200]	@ (8008ec0 <_printf_i+0x238>)
 8008df6:	2778      	movs	r7, #120	@ 0x78
 8008df8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	6831      	ldr	r1, [r6, #0]
 8008e00:	061f      	lsls	r7, r3, #24
 8008e02:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e06:	d402      	bmi.n	8008e0e <_printf_i+0x186>
 8008e08:	065f      	lsls	r7, r3, #25
 8008e0a:	bf48      	it	mi
 8008e0c:	b2ad      	uxthmi	r5, r5
 8008e0e:	6031      	str	r1, [r6, #0]
 8008e10:	07d9      	lsls	r1, r3, #31
 8008e12:	bf44      	itt	mi
 8008e14:	f043 0320 	orrmi.w	r3, r3, #32
 8008e18:	6023      	strmi	r3, [r4, #0]
 8008e1a:	b11d      	cbz	r5, 8008e24 <_printf_i+0x19c>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	e7ad      	b.n	8008d7c <_printf_i+0xf4>
 8008e20:	4826      	ldr	r0, [pc, #152]	@ (8008ebc <_printf_i+0x234>)
 8008e22:	e7e9      	b.n	8008df8 <_printf_i+0x170>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	f023 0320 	bic.w	r3, r3, #32
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	e7f6      	b.n	8008e1c <_printf_i+0x194>
 8008e2e:	4616      	mov	r6, r2
 8008e30:	e7bd      	b.n	8008dae <_printf_i+0x126>
 8008e32:	6833      	ldr	r3, [r6, #0]
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	6961      	ldr	r1, [r4, #20]
 8008e38:	1d18      	adds	r0, r3, #4
 8008e3a:	6030      	str	r0, [r6, #0]
 8008e3c:	062e      	lsls	r6, r5, #24
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	d501      	bpl.n	8008e46 <_printf_i+0x1be>
 8008e42:	6019      	str	r1, [r3, #0]
 8008e44:	e002      	b.n	8008e4c <_printf_i+0x1c4>
 8008e46:	0668      	lsls	r0, r5, #25
 8008e48:	d5fb      	bpl.n	8008e42 <_printf_i+0x1ba>
 8008e4a:	8019      	strh	r1, [r3, #0]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	4616      	mov	r6, r2
 8008e52:	e7bc      	b.n	8008dce <_printf_i+0x146>
 8008e54:	6833      	ldr	r3, [r6, #0]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	6032      	str	r2, [r6, #0]
 8008e5a:	681e      	ldr	r6, [r3, #0]
 8008e5c:	6862      	ldr	r2, [r4, #4]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7f7 f9c5 	bl	80001f0 <memchr>
 8008e66:	b108      	cbz	r0, 8008e6c <_printf_i+0x1e4>
 8008e68:	1b80      	subs	r0, r0, r6
 8008e6a:	6060      	str	r0, [r4, #4]
 8008e6c:	6863      	ldr	r3, [r4, #4]
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	2300      	movs	r3, #0
 8008e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e76:	e7aa      	b.n	8008dce <_printf_i+0x146>
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	4640      	mov	r0, r8
 8008e80:	47d0      	blx	sl
 8008e82:	3001      	adds	r0, #1
 8008e84:	d0ad      	beq.n	8008de2 <_printf_i+0x15a>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	079b      	lsls	r3, r3, #30
 8008e8a:	d413      	bmi.n	8008eb4 <_printf_i+0x22c>
 8008e8c:	68e0      	ldr	r0, [r4, #12]
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	4298      	cmp	r0, r3
 8008e92:	bfb8      	it	lt
 8008e94:	4618      	movlt	r0, r3
 8008e96:	e7a6      	b.n	8008de6 <_printf_i+0x15e>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	47d0      	blx	sl
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d09d      	beq.n	8008de2 <_printf_i+0x15a>
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	68e3      	ldr	r3, [r4, #12]
 8008eaa:	9903      	ldr	r1, [sp, #12]
 8008eac:	1a5b      	subs	r3, r3, r1
 8008eae:	42ab      	cmp	r3, r5
 8008eb0:	dcf2      	bgt.n	8008e98 <_printf_i+0x210>
 8008eb2:	e7eb      	b.n	8008e8c <_printf_i+0x204>
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	f104 0619 	add.w	r6, r4, #25
 8008eba:	e7f5      	b.n	8008ea8 <_printf_i+0x220>
 8008ebc:	0800bffe 	.word	0x0800bffe
 8008ec0:	0800c00f 	.word	0x0800c00f

08008ec4 <std>:
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	4604      	mov	r4, r0
 8008eca:	e9c0 3300 	strd	r3, r3, [r0]
 8008ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ed2:	6083      	str	r3, [r0, #8]
 8008ed4:	8181      	strh	r1, [r0, #12]
 8008ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ed8:	81c2      	strh	r2, [r0, #14]
 8008eda:	6183      	str	r3, [r0, #24]
 8008edc:	4619      	mov	r1, r3
 8008ede:	2208      	movs	r2, #8
 8008ee0:	305c      	adds	r0, #92	@ 0x5c
 8008ee2:	f000 f8f4 	bl	80090ce <memset>
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f1c <std+0x58>)
 8008ee8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <std+0x5c>)
 8008eec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <std+0x60>)
 8008ef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <std+0x64>)
 8008ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f2c <std+0x68>)
 8008ef8:	6224      	str	r4, [r4, #32]
 8008efa:	429c      	cmp	r4, r3
 8008efc:	d006      	beq.n	8008f0c <std+0x48>
 8008efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f02:	4294      	cmp	r4, r2
 8008f04:	d002      	beq.n	8008f0c <std+0x48>
 8008f06:	33d0      	adds	r3, #208	@ 0xd0
 8008f08:	429c      	cmp	r4, r3
 8008f0a:	d105      	bne.n	8008f18 <std+0x54>
 8008f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f14:	f000 b9c4 	b.w	80092a0 <__retarget_lock_init_recursive>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009049 	.word	0x08009049
 8008f20:	0800906b 	.word	0x0800906b
 8008f24:	080090a3 	.word	0x080090a3
 8008f28:	080090c7 	.word	0x080090c7
 8008f2c:	200017e0 	.word	0x200017e0

08008f30 <stdio_exit_handler>:
 8008f30:	4a02      	ldr	r2, [pc, #8]	@ (8008f3c <stdio_exit_handler+0xc>)
 8008f32:	4903      	ldr	r1, [pc, #12]	@ (8008f40 <stdio_exit_handler+0x10>)
 8008f34:	4803      	ldr	r0, [pc, #12]	@ (8008f44 <stdio_exit_handler+0x14>)
 8008f36:	f000 b869 	b.w	800900c <_fwalk_sglue>
 8008f3a:	bf00      	nop
 8008f3c:	20000010 	.word	0x20000010
 8008f40:	0800a975 	.word	0x0800a975
 8008f44:	20000020 	.word	0x20000020

08008f48 <cleanup_stdio>:
 8008f48:	6841      	ldr	r1, [r0, #4]
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <cleanup_stdio+0x34>)
 8008f4c:	4299      	cmp	r1, r3
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	4604      	mov	r4, r0
 8008f52:	d001      	beq.n	8008f58 <cleanup_stdio+0x10>
 8008f54:	f001 fd0e 	bl	800a974 <_fflush_r>
 8008f58:	68a1      	ldr	r1, [r4, #8]
 8008f5a:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <cleanup_stdio+0x38>)
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	d002      	beq.n	8008f66 <cleanup_stdio+0x1e>
 8008f60:	4620      	mov	r0, r4
 8008f62:	f001 fd07 	bl	800a974 <_fflush_r>
 8008f66:	68e1      	ldr	r1, [r4, #12]
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <cleanup_stdio+0x3c>)
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	d004      	beq.n	8008f78 <cleanup_stdio+0x30>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f74:	f001 bcfe 	b.w	800a974 <_fflush_r>
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200017e0 	.word	0x200017e0
 8008f80:	20001848 	.word	0x20001848
 8008f84:	200018b0 	.word	0x200018b0

08008f88 <global_stdio_init.part.0>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <global_stdio_init.part.0+0x30>)
 8008f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8008fbc <global_stdio_init.part.0+0x34>)
 8008f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc0 <global_stdio_init.part.0+0x38>)
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	4620      	mov	r0, r4
 8008f94:	2200      	movs	r2, #0
 8008f96:	2104      	movs	r1, #4
 8008f98:	f7ff ff94 	bl	8008ec4 <std>
 8008f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	2109      	movs	r1, #9
 8008fa4:	f7ff ff8e 	bl	8008ec4 <std>
 8008fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008fac:	2202      	movs	r2, #2
 8008fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb2:	2112      	movs	r1, #18
 8008fb4:	f7ff bf86 	b.w	8008ec4 <std>
 8008fb8:	20001918 	.word	0x20001918
 8008fbc:	200017e0 	.word	0x200017e0
 8008fc0:	08008f31 	.word	0x08008f31

08008fc4 <__sfp_lock_acquire>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	@ (8008fcc <__sfp_lock_acquire+0x8>)
 8008fc6:	f000 b96c 	b.w	80092a2 <__retarget_lock_acquire_recursive>
 8008fca:	bf00      	nop
 8008fcc:	20001921 	.word	0x20001921

08008fd0 <__sfp_lock_release>:
 8008fd0:	4801      	ldr	r0, [pc, #4]	@ (8008fd8 <__sfp_lock_release+0x8>)
 8008fd2:	f000 b967 	b.w	80092a4 <__retarget_lock_release_recursive>
 8008fd6:	bf00      	nop
 8008fd8:	20001921 	.word	0x20001921

08008fdc <__sinit>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f7ff fff0 	bl	8008fc4 <__sfp_lock_acquire>
 8008fe4:	6a23      	ldr	r3, [r4, #32]
 8008fe6:	b11b      	cbz	r3, 8008ff0 <__sinit+0x14>
 8008fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fec:	f7ff bff0 	b.w	8008fd0 <__sfp_lock_release>
 8008ff0:	4b04      	ldr	r3, [pc, #16]	@ (8009004 <__sinit+0x28>)
 8008ff2:	6223      	str	r3, [r4, #32]
 8008ff4:	4b04      	ldr	r3, [pc, #16]	@ (8009008 <__sinit+0x2c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f5      	bne.n	8008fe8 <__sinit+0xc>
 8008ffc:	f7ff ffc4 	bl	8008f88 <global_stdio_init.part.0>
 8009000:	e7f2      	b.n	8008fe8 <__sinit+0xc>
 8009002:	bf00      	nop
 8009004:	08008f49 	.word	0x08008f49
 8009008:	20001918 	.word	0x20001918

0800900c <_fwalk_sglue>:
 800900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009010:	4607      	mov	r7, r0
 8009012:	4688      	mov	r8, r1
 8009014:	4614      	mov	r4, r2
 8009016:	2600      	movs	r6, #0
 8009018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800901c:	f1b9 0901 	subs.w	r9, r9, #1
 8009020:	d505      	bpl.n	800902e <_fwalk_sglue+0x22>
 8009022:	6824      	ldr	r4, [r4, #0]
 8009024:	2c00      	cmp	r4, #0
 8009026:	d1f7      	bne.n	8009018 <_fwalk_sglue+0xc>
 8009028:	4630      	mov	r0, r6
 800902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902e:	89ab      	ldrh	r3, [r5, #12]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d907      	bls.n	8009044 <_fwalk_sglue+0x38>
 8009034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009038:	3301      	adds	r3, #1
 800903a:	d003      	beq.n	8009044 <_fwalk_sglue+0x38>
 800903c:	4629      	mov	r1, r5
 800903e:	4638      	mov	r0, r7
 8009040:	47c0      	blx	r8
 8009042:	4306      	orrs	r6, r0
 8009044:	3568      	adds	r5, #104	@ 0x68
 8009046:	e7e9      	b.n	800901c <_fwalk_sglue+0x10>

08009048 <__sread>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 f8d8 	bl	8009204 <_read_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	bfab      	itete	ge
 8009058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800905a:	89a3      	ldrhlt	r3, [r4, #12]
 800905c:	181b      	addge	r3, r3, r0
 800905e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009062:	bfac      	ite	ge
 8009064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009066:	81a3      	strhlt	r3, [r4, #12]
 8009068:	bd10      	pop	{r4, pc}

0800906a <__swrite>:
 800906a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	461f      	mov	r7, r3
 8009070:	898b      	ldrh	r3, [r1, #12]
 8009072:	05db      	lsls	r3, r3, #23
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	4616      	mov	r6, r2
 800907a:	d505      	bpl.n	8009088 <__swrite+0x1e>
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	2302      	movs	r3, #2
 8009082:	2200      	movs	r2, #0
 8009084:	f000 f8ac 	bl	80091e0 <_lseek_r>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	4628      	mov	r0, r5
 800909a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	f000 b8c3 	b.w	8009228 <_write_r>

080090a2 <__sseek>:
 80090a2:	b510      	push	{r4, lr}
 80090a4:	460c      	mov	r4, r1
 80090a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090aa:	f000 f899 	bl	80091e0 <_lseek_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	bf15      	itete	ne
 80090b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090be:	81a3      	strheq	r3, [r4, #12]
 80090c0:	bf18      	it	ne
 80090c2:	81a3      	strhne	r3, [r4, #12]
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <__sclose>:
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 b81b 	b.w	8009104 <_close_r>

080090ce <memset>:
 80090ce:	4402      	add	r2, r0
 80090d0:	4603      	mov	r3, r0
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d100      	bne.n	80090d8 <memset+0xa>
 80090d6:	4770      	bx	lr
 80090d8:	f803 1b01 	strb.w	r1, [r3], #1
 80090dc:	e7f9      	b.n	80090d2 <memset+0x4>

080090de <strcat>:
 80090de:	b510      	push	{r4, lr}
 80090e0:	4602      	mov	r2, r0
 80090e2:	7814      	ldrb	r4, [r2, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	3201      	adds	r2, #1
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	d1fa      	bne.n	80090e2 <strcat+0x4>
 80090ec:	3b01      	subs	r3, #1
 80090ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1f9      	bne.n	80090ee <strcat+0x10>
 80090fa:	bd10      	pop	{r4, pc}

080090fc <_localeconv_r>:
 80090fc:	4800      	ldr	r0, [pc, #0]	@ (8009100 <_localeconv_r+0x4>)
 80090fe:	4770      	bx	lr
 8009100:	2000015c 	.word	0x2000015c

08009104 <_close_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	@ (8009120 <_close_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f8 fe12 	bl	8001d38 <_close>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_close_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_close_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	2000191c 	.word	0x2000191c

08009124 <_reclaim_reent>:
 8009124:	4b2d      	ldr	r3, [pc, #180]	@ (80091dc <_reclaim_reent+0xb8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4283      	cmp	r3, r0
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	4604      	mov	r4, r0
 800912e:	d053      	beq.n	80091d8 <_reclaim_reent+0xb4>
 8009130:	69c3      	ldr	r3, [r0, #28]
 8009132:	b31b      	cbz	r3, 800917c <_reclaim_reent+0x58>
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	b163      	cbz	r3, 8009152 <_reclaim_reent+0x2e>
 8009138:	2500      	movs	r5, #0
 800913a:	69e3      	ldr	r3, [r4, #28]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	5959      	ldr	r1, [r3, r5]
 8009140:	b9b1      	cbnz	r1, 8009170 <_reclaim_reent+0x4c>
 8009142:	3504      	adds	r5, #4
 8009144:	2d80      	cmp	r5, #128	@ 0x80
 8009146:	d1f8      	bne.n	800913a <_reclaim_reent+0x16>
 8009148:	69e3      	ldr	r3, [r4, #28]
 800914a:	4620      	mov	r0, r4
 800914c:	68d9      	ldr	r1, [r3, #12]
 800914e:	f000 ff13 	bl	8009f78 <_free_r>
 8009152:	69e3      	ldr	r3, [r4, #28]
 8009154:	6819      	ldr	r1, [r3, #0]
 8009156:	b111      	cbz	r1, 800915e <_reclaim_reent+0x3a>
 8009158:	4620      	mov	r0, r4
 800915a:	f000 ff0d 	bl	8009f78 <_free_r>
 800915e:	69e3      	ldr	r3, [r4, #28]
 8009160:	689d      	ldr	r5, [r3, #8]
 8009162:	b15d      	cbz	r5, 800917c <_reclaim_reent+0x58>
 8009164:	4629      	mov	r1, r5
 8009166:	4620      	mov	r0, r4
 8009168:	682d      	ldr	r5, [r5, #0]
 800916a:	f000 ff05 	bl	8009f78 <_free_r>
 800916e:	e7f8      	b.n	8009162 <_reclaim_reent+0x3e>
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 ff00 	bl	8009f78 <_free_r>
 8009178:	4631      	mov	r1, r6
 800917a:	e7e1      	b.n	8009140 <_reclaim_reent+0x1c>
 800917c:	6961      	ldr	r1, [r4, #20]
 800917e:	b111      	cbz	r1, 8009186 <_reclaim_reent+0x62>
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fef9 	bl	8009f78 <_free_r>
 8009186:	69e1      	ldr	r1, [r4, #28]
 8009188:	b111      	cbz	r1, 8009190 <_reclaim_reent+0x6c>
 800918a:	4620      	mov	r0, r4
 800918c:	f000 fef4 	bl	8009f78 <_free_r>
 8009190:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009192:	b111      	cbz	r1, 800919a <_reclaim_reent+0x76>
 8009194:	4620      	mov	r0, r4
 8009196:	f000 feef 	bl	8009f78 <_free_r>
 800919a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800919c:	b111      	cbz	r1, 80091a4 <_reclaim_reent+0x80>
 800919e:	4620      	mov	r0, r4
 80091a0:	f000 feea 	bl	8009f78 <_free_r>
 80091a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80091a6:	b111      	cbz	r1, 80091ae <_reclaim_reent+0x8a>
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fee5 	bl	8009f78 <_free_r>
 80091ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80091b0:	b111      	cbz	r1, 80091b8 <_reclaim_reent+0x94>
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fee0 	bl	8009f78 <_free_r>
 80091b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80091ba:	b111      	cbz	r1, 80091c2 <_reclaim_reent+0x9e>
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fedb 	bl	8009f78 <_free_r>
 80091c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80091c4:	b111      	cbz	r1, 80091cc <_reclaim_reent+0xa8>
 80091c6:	4620      	mov	r0, r4
 80091c8:	f000 fed6 	bl	8009f78 <_free_r>
 80091cc:	6a23      	ldr	r3, [r4, #32]
 80091ce:	b11b      	cbz	r3, 80091d8 <_reclaim_reent+0xb4>
 80091d0:	4620      	mov	r0, r4
 80091d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091d6:	4718      	bx	r3
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	bf00      	nop
 80091dc:	2000001c 	.word	0x2000001c

080091e0 <_lseek_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	@ (8009200 <_lseek_r+0x20>)
 80091e4:	4604      	mov	r4, r0
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	602a      	str	r2, [r5, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f7f8 fdc9 	bl	8001d86 <_lseek>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_lseek_r+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_lseek_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	2000191c 	.word	0x2000191c

08009204 <_read_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	@ (8009224 <_read_r+0x20>)
 8009208:	4604      	mov	r4, r0
 800920a:	4608      	mov	r0, r1
 800920c:	4611      	mov	r1, r2
 800920e:	2200      	movs	r2, #0
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f7f8 fd73 	bl	8001cfe <_read>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_read_r+0x1e>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_read_r+0x1e>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	2000191c 	.word	0x2000191c

08009228 <_write_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d07      	ldr	r5, [pc, #28]	@ (8009248 <_write_r+0x20>)
 800922c:	4604      	mov	r4, r0
 800922e:	4608      	mov	r0, r1
 8009230:	4611      	mov	r1, r2
 8009232:	2200      	movs	r2, #0
 8009234:	602a      	str	r2, [r5, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	f7f7 feed 	bl	8001016 <_write>
 800923c:	1c43      	adds	r3, r0, #1
 800923e:	d102      	bne.n	8009246 <_write_r+0x1e>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b103      	cbz	r3, 8009246 <_write_r+0x1e>
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	2000191c 	.word	0x2000191c

0800924c <__errno>:
 800924c:	4b01      	ldr	r3, [pc, #4]	@ (8009254 <__errno+0x8>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	2000001c 	.word	0x2000001c

08009258 <__libc_init_array>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4d0d      	ldr	r5, [pc, #52]	@ (8009290 <__libc_init_array+0x38>)
 800925c:	4c0d      	ldr	r4, [pc, #52]	@ (8009294 <__libc_init_array+0x3c>)
 800925e:	1b64      	subs	r4, r4, r5
 8009260:	10a4      	asrs	r4, r4, #2
 8009262:	2600      	movs	r6, #0
 8009264:	42a6      	cmp	r6, r4
 8009266:	d109      	bne.n	800927c <__libc_init_array+0x24>
 8009268:	4d0b      	ldr	r5, [pc, #44]	@ (8009298 <__libc_init_array+0x40>)
 800926a:	4c0c      	ldr	r4, [pc, #48]	@ (800929c <__libc_init_array+0x44>)
 800926c:	f002 fe22 	bl	800beb4 <_init>
 8009270:	1b64      	subs	r4, r4, r5
 8009272:	10a4      	asrs	r4, r4, #2
 8009274:	2600      	movs	r6, #0
 8009276:	42a6      	cmp	r6, r4
 8009278:	d105      	bne.n	8009286 <__libc_init_array+0x2e>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009280:	4798      	blx	r3
 8009282:	3601      	adds	r6, #1
 8009284:	e7ee      	b.n	8009264 <__libc_init_array+0xc>
 8009286:	f855 3b04 	ldr.w	r3, [r5], #4
 800928a:	4798      	blx	r3
 800928c:	3601      	adds	r6, #1
 800928e:	e7f2      	b.n	8009276 <__libc_init_array+0x1e>
 8009290:	0800c3b0 	.word	0x0800c3b0
 8009294:	0800c3b0 	.word	0x0800c3b0
 8009298:	0800c3b0 	.word	0x0800c3b0
 800929c:	0800c3b4 	.word	0x0800c3b4

080092a0 <__retarget_lock_init_recursive>:
 80092a0:	4770      	bx	lr

080092a2 <__retarget_lock_acquire_recursive>:
 80092a2:	4770      	bx	lr

080092a4 <__retarget_lock_release_recursive>:
 80092a4:	4770      	bx	lr

080092a6 <memcpy>:
 80092a6:	440a      	add	r2, r1
 80092a8:	4291      	cmp	r1, r2
 80092aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ae:	d100      	bne.n	80092b2 <memcpy+0xc>
 80092b0:	4770      	bx	lr
 80092b2:	b510      	push	{r4, lr}
 80092b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092bc:	4291      	cmp	r1, r2
 80092be:	d1f9      	bne.n	80092b4 <memcpy+0xe>
 80092c0:	bd10      	pop	{r4, pc}

080092c2 <quorem>:
 80092c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c6:	6903      	ldr	r3, [r0, #16]
 80092c8:	690c      	ldr	r4, [r1, #16]
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	4607      	mov	r7, r0
 80092ce:	db7e      	blt.n	80093ce <quorem+0x10c>
 80092d0:	3c01      	subs	r4, #1
 80092d2:	f101 0814 	add.w	r8, r1, #20
 80092d6:	00a3      	lsls	r3, r4, #2
 80092d8:	f100 0514 	add.w	r5, r0, #20
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ec:	3301      	adds	r3, #1
 80092ee:	429a      	cmp	r2, r3
 80092f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80092f8:	d32e      	bcc.n	8009358 <quorem+0x96>
 80092fa:	f04f 0a00 	mov.w	sl, #0
 80092fe:	46c4      	mov	ip, r8
 8009300:	46ae      	mov	lr, r5
 8009302:	46d3      	mov	fp, sl
 8009304:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009308:	b298      	uxth	r0, r3
 800930a:	fb06 a000 	mla	r0, r6, r0, sl
 800930e:	0c02      	lsrs	r2, r0, #16
 8009310:	0c1b      	lsrs	r3, r3, #16
 8009312:	fb06 2303 	mla	r3, r6, r3, r2
 8009316:	f8de 2000 	ldr.w	r2, [lr]
 800931a:	b280      	uxth	r0, r0
 800931c:	b292      	uxth	r2, r2
 800931e:	1a12      	subs	r2, r2, r0
 8009320:	445a      	add	r2, fp
 8009322:	f8de 0000 	ldr.w	r0, [lr]
 8009326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800932a:	b29b      	uxth	r3, r3
 800932c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009330:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009334:	b292      	uxth	r2, r2
 8009336:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800933a:	45e1      	cmp	r9, ip
 800933c:	f84e 2b04 	str.w	r2, [lr], #4
 8009340:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009344:	d2de      	bcs.n	8009304 <quorem+0x42>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	58eb      	ldr	r3, [r5, r3]
 800934a:	b92b      	cbnz	r3, 8009358 <quorem+0x96>
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	3b04      	subs	r3, #4
 8009350:	429d      	cmp	r5, r3
 8009352:	461a      	mov	r2, r3
 8009354:	d32f      	bcc.n	80093b6 <quorem+0xf4>
 8009356:	613c      	str	r4, [r7, #16]
 8009358:	4638      	mov	r0, r7
 800935a:	f001 f97f 	bl	800a65c <__mcmp>
 800935e:	2800      	cmp	r0, #0
 8009360:	db25      	blt.n	80093ae <quorem+0xec>
 8009362:	4629      	mov	r1, r5
 8009364:	2000      	movs	r0, #0
 8009366:	f858 2b04 	ldr.w	r2, [r8], #4
 800936a:	f8d1 c000 	ldr.w	ip, [r1]
 800936e:	fa1f fe82 	uxth.w	lr, r2
 8009372:	fa1f f38c 	uxth.w	r3, ip
 8009376:	eba3 030e 	sub.w	r3, r3, lr
 800937a:	4403      	add	r3, r0
 800937c:	0c12      	lsrs	r2, r2, #16
 800937e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009382:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009386:	b29b      	uxth	r3, r3
 8009388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800938c:	45c1      	cmp	r9, r8
 800938e:	f841 3b04 	str.w	r3, [r1], #4
 8009392:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009396:	d2e6      	bcs.n	8009366 <quorem+0xa4>
 8009398:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800939c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093a0:	b922      	cbnz	r2, 80093ac <quorem+0xea>
 80093a2:	3b04      	subs	r3, #4
 80093a4:	429d      	cmp	r5, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	d30b      	bcc.n	80093c2 <quorem+0x100>
 80093aa:	613c      	str	r4, [r7, #16]
 80093ac:	3601      	adds	r6, #1
 80093ae:	4630      	mov	r0, r6
 80093b0:	b003      	add	sp, #12
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	3b04      	subs	r3, #4
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	d1cb      	bne.n	8009356 <quorem+0x94>
 80093be:	3c01      	subs	r4, #1
 80093c0:	e7c6      	b.n	8009350 <quorem+0x8e>
 80093c2:	6812      	ldr	r2, [r2, #0]
 80093c4:	3b04      	subs	r3, #4
 80093c6:	2a00      	cmp	r2, #0
 80093c8:	d1ef      	bne.n	80093aa <quorem+0xe8>
 80093ca:	3c01      	subs	r4, #1
 80093cc:	e7ea      	b.n	80093a4 <quorem+0xe2>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e7ee      	b.n	80093b0 <quorem+0xee>
 80093d2:	0000      	movs	r0, r0
 80093d4:	0000      	movs	r0, r0
	...

080093d8 <_dtoa_r>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	69c7      	ldr	r7, [r0, #28]
 80093de:	b097      	sub	sp, #92	@ 0x5c
 80093e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80093e4:	ec55 4b10 	vmov	r4, r5, d0
 80093e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80093ea:	9107      	str	r1, [sp, #28]
 80093ec:	4681      	mov	r9, r0
 80093ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80093f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80093f2:	b97f      	cbnz	r7, 8009414 <_dtoa_r+0x3c>
 80093f4:	2010      	movs	r0, #16
 80093f6:	f000 fe09 	bl	800a00c <malloc>
 80093fa:	4602      	mov	r2, r0
 80093fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009400:	b920      	cbnz	r0, 800940c <_dtoa_r+0x34>
 8009402:	4ba9      	ldr	r3, [pc, #676]	@ (80096a8 <_dtoa_r+0x2d0>)
 8009404:	21ef      	movs	r1, #239	@ 0xef
 8009406:	48a9      	ldr	r0, [pc, #676]	@ (80096ac <_dtoa_r+0x2d4>)
 8009408:	f001 faec 	bl	800a9e4 <__assert_func>
 800940c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009410:	6007      	str	r7, [r0, #0]
 8009412:	60c7      	str	r7, [r0, #12]
 8009414:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	b159      	cbz	r1, 8009434 <_dtoa_r+0x5c>
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	604a      	str	r2, [r1, #4]
 8009420:	2301      	movs	r3, #1
 8009422:	4093      	lsls	r3, r2
 8009424:	608b      	str	r3, [r1, #8]
 8009426:	4648      	mov	r0, r9
 8009428:	f000 fee6 	bl	800a1f8 <_Bfree>
 800942c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	1e2b      	subs	r3, r5, #0
 8009436:	bfb9      	ittee	lt
 8009438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800943c:	9305      	strlt	r3, [sp, #20]
 800943e:	2300      	movge	r3, #0
 8009440:	6033      	strge	r3, [r6, #0]
 8009442:	9f05      	ldr	r7, [sp, #20]
 8009444:	4b9a      	ldr	r3, [pc, #616]	@ (80096b0 <_dtoa_r+0x2d8>)
 8009446:	bfbc      	itt	lt
 8009448:	2201      	movlt	r2, #1
 800944a:	6032      	strlt	r2, [r6, #0]
 800944c:	43bb      	bics	r3, r7
 800944e:	d112      	bne.n	8009476 <_dtoa_r+0x9e>
 8009450:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009452:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800945c:	4323      	orrs	r3, r4
 800945e:	f000 855a 	beq.w	8009f16 <_dtoa_r+0xb3e>
 8009462:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009464:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80096c4 <_dtoa_r+0x2ec>
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 855c 	beq.w	8009f26 <_dtoa_r+0xb4e>
 800946e:	f10a 0303 	add.w	r3, sl, #3
 8009472:	f000 bd56 	b.w	8009f22 <_dtoa_r+0xb4a>
 8009476:	ed9d 7b04 	vldr	d7, [sp, #16]
 800947a:	2200      	movs	r2, #0
 800947c:	ec51 0b17 	vmov	r0, r1, d7
 8009480:	2300      	movs	r3, #0
 8009482:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009486:	f7f7 fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800948a:	4680      	mov	r8, r0
 800948c:	b158      	cbz	r0, 80094a6 <_dtoa_r+0xce>
 800948e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009490:	2301      	movs	r3, #1
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009496:	b113      	cbz	r3, 800949e <_dtoa_r+0xc6>
 8009498:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800949a:	4b86      	ldr	r3, [pc, #536]	@ (80096b4 <_dtoa_r+0x2dc>)
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80096c8 <_dtoa_r+0x2f0>
 80094a2:	f000 bd40 	b.w	8009f26 <_dtoa_r+0xb4e>
 80094a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094aa:	aa14      	add	r2, sp, #80	@ 0x50
 80094ac:	a915      	add	r1, sp, #84	@ 0x54
 80094ae:	4648      	mov	r0, r9
 80094b0:	f001 f984 	bl	800a7bc <__d2b>
 80094b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d078      	beq.n	80095b0 <_dtoa_r+0x1d8>
 80094be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80094c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80094d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80094d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80094d8:	4619      	mov	r1, r3
 80094da:	2200      	movs	r2, #0
 80094dc:	4b76      	ldr	r3, [pc, #472]	@ (80096b8 <_dtoa_r+0x2e0>)
 80094de:	f7f6 fee3 	bl	80002a8 <__aeabi_dsub>
 80094e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009690 <_dtoa_r+0x2b8>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f7 f896 	bl	8000618 <__aeabi_dmul>
 80094ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8009698 <_dtoa_r+0x2c0>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f6 fedb 	bl	80002ac <__adddf3>
 80094f6:	4604      	mov	r4, r0
 80094f8:	4630      	mov	r0, r6
 80094fa:	460d      	mov	r5, r1
 80094fc:	f7f7 f822 	bl	8000544 <__aeabi_i2d>
 8009500:	a367      	add	r3, pc, #412	@ (adr r3, 80096a0 <_dtoa_r+0x2c8>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f7f7 f887 	bl	8000618 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4620      	mov	r0, r4
 8009510:	4629      	mov	r1, r5
 8009512:	f7f6 fecb 	bl	80002ac <__adddf3>
 8009516:	4604      	mov	r4, r0
 8009518:	460d      	mov	r5, r1
 800951a:	f7f7 fb2d 	bl	8000b78 <__aeabi_d2iz>
 800951e:	2200      	movs	r2, #0
 8009520:	4607      	mov	r7, r0
 8009522:	2300      	movs	r3, #0
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 fae8 	bl	8000afc <__aeabi_dcmplt>
 800952c:	b140      	cbz	r0, 8009540 <_dtoa_r+0x168>
 800952e:	4638      	mov	r0, r7
 8009530:	f7f7 f808 	bl	8000544 <__aeabi_i2d>
 8009534:	4622      	mov	r2, r4
 8009536:	462b      	mov	r3, r5
 8009538:	f7f7 fad6 	bl	8000ae8 <__aeabi_dcmpeq>
 800953c:	b900      	cbnz	r0, 8009540 <_dtoa_r+0x168>
 800953e:	3f01      	subs	r7, #1
 8009540:	2f16      	cmp	r7, #22
 8009542:	d852      	bhi.n	80095ea <_dtoa_r+0x212>
 8009544:	4b5d      	ldr	r3, [pc, #372]	@ (80096bc <_dtoa_r+0x2e4>)
 8009546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009552:	f7f7 fad3 	bl	8000afc <__aeabi_dcmplt>
 8009556:	2800      	cmp	r0, #0
 8009558:	d049      	beq.n	80095ee <_dtoa_r+0x216>
 800955a:	3f01      	subs	r7, #1
 800955c:	2300      	movs	r3, #0
 800955e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009560:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009562:	1b9b      	subs	r3, r3, r6
 8009564:	1e5a      	subs	r2, r3, #1
 8009566:	bf45      	ittet	mi
 8009568:	f1c3 0301 	rsbmi	r3, r3, #1
 800956c:	9300      	strmi	r3, [sp, #0]
 800956e:	2300      	movpl	r3, #0
 8009570:	2300      	movmi	r3, #0
 8009572:	9206      	str	r2, [sp, #24]
 8009574:	bf54      	ite	pl
 8009576:	9300      	strpl	r3, [sp, #0]
 8009578:	9306      	strmi	r3, [sp, #24]
 800957a:	2f00      	cmp	r7, #0
 800957c:	db39      	blt.n	80095f2 <_dtoa_r+0x21a>
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	970d      	str	r7, [sp, #52]	@ 0x34
 8009582:	443b      	add	r3, r7
 8009584:	9306      	str	r3, [sp, #24]
 8009586:	2300      	movs	r3, #0
 8009588:	9308      	str	r3, [sp, #32]
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b09      	cmp	r3, #9
 800958e:	d863      	bhi.n	8009658 <_dtoa_r+0x280>
 8009590:	2b05      	cmp	r3, #5
 8009592:	bfc4      	itt	gt
 8009594:	3b04      	subgt	r3, #4
 8009596:	9307      	strgt	r3, [sp, #28]
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	f1a3 0302 	sub.w	r3, r3, #2
 800959e:	bfcc      	ite	gt
 80095a0:	2400      	movgt	r4, #0
 80095a2:	2401      	movle	r4, #1
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d863      	bhi.n	8009670 <_dtoa_r+0x298>
 80095a8:	e8df f003 	tbb	[pc, r3]
 80095ac:	2b375452 	.word	0x2b375452
 80095b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095b4:	441e      	add	r6, r3
 80095b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	bfc1      	itttt	gt
 80095be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095c2:	409f      	lslgt	r7, r3
 80095c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80095c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80095cc:	bfd6      	itet	le
 80095ce:	f1c3 0320 	rsble	r3, r3, #32
 80095d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80095d6:	fa04 f003 	lslle.w	r0, r4, r3
 80095da:	f7f6 ffa3 	bl	8000524 <__aeabi_ui2d>
 80095de:	2201      	movs	r2, #1
 80095e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80095e4:	3e01      	subs	r6, #1
 80095e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80095e8:	e776      	b.n	80094d8 <_dtoa_r+0x100>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7b7      	b.n	800955e <_dtoa_r+0x186>
 80095ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80095f0:	e7b6      	b.n	8009560 <_dtoa_r+0x188>
 80095f2:	9b00      	ldr	r3, [sp, #0]
 80095f4:	1bdb      	subs	r3, r3, r7
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	427b      	negs	r3, r7
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	2300      	movs	r3, #0
 80095fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009600:	e7c3      	b.n	800958a <_dtoa_r+0x1b2>
 8009602:	2301      	movs	r3, #1
 8009604:	9309      	str	r3, [sp, #36]	@ 0x24
 8009606:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009608:	eb07 0b03 	add.w	fp, r7, r3
 800960c:	f10b 0301 	add.w	r3, fp, #1
 8009610:	2b01      	cmp	r3, #1
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	bfb8      	it	lt
 8009616:	2301      	movlt	r3, #1
 8009618:	e006      	b.n	8009628 <_dtoa_r+0x250>
 800961a:	2301      	movs	r3, #1
 800961c:	9309      	str	r3, [sp, #36]	@ 0x24
 800961e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009620:	2b00      	cmp	r3, #0
 8009622:	dd28      	ble.n	8009676 <_dtoa_r+0x29e>
 8009624:	469b      	mov	fp, r3
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800962c:	2100      	movs	r1, #0
 800962e:	2204      	movs	r2, #4
 8009630:	f102 0514 	add.w	r5, r2, #20
 8009634:	429d      	cmp	r5, r3
 8009636:	d926      	bls.n	8009686 <_dtoa_r+0x2ae>
 8009638:	6041      	str	r1, [r0, #4]
 800963a:	4648      	mov	r0, r9
 800963c:	f000 fd9c 	bl	800a178 <_Balloc>
 8009640:	4682      	mov	sl, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d142      	bne.n	80096cc <_dtoa_r+0x2f4>
 8009646:	4b1e      	ldr	r3, [pc, #120]	@ (80096c0 <_dtoa_r+0x2e8>)
 8009648:	4602      	mov	r2, r0
 800964a:	f240 11af 	movw	r1, #431	@ 0x1af
 800964e:	e6da      	b.n	8009406 <_dtoa_r+0x2e>
 8009650:	2300      	movs	r3, #0
 8009652:	e7e3      	b.n	800961c <_dtoa_r+0x244>
 8009654:	2300      	movs	r3, #0
 8009656:	e7d5      	b.n	8009604 <_dtoa_r+0x22c>
 8009658:	2401      	movs	r4, #1
 800965a:	2300      	movs	r3, #0
 800965c:	9307      	str	r3, [sp, #28]
 800965e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009660:	f04f 3bff 	mov.w	fp, #4294967295
 8009664:	2200      	movs	r2, #0
 8009666:	f8cd b00c 	str.w	fp, [sp, #12]
 800966a:	2312      	movs	r3, #18
 800966c:	920c      	str	r2, [sp, #48]	@ 0x30
 800966e:	e7db      	b.n	8009628 <_dtoa_r+0x250>
 8009670:	2301      	movs	r3, #1
 8009672:	9309      	str	r3, [sp, #36]	@ 0x24
 8009674:	e7f4      	b.n	8009660 <_dtoa_r+0x288>
 8009676:	f04f 0b01 	mov.w	fp, #1
 800967a:	f8cd b00c 	str.w	fp, [sp, #12]
 800967e:	465b      	mov	r3, fp
 8009680:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009684:	e7d0      	b.n	8009628 <_dtoa_r+0x250>
 8009686:	3101      	adds	r1, #1
 8009688:	0052      	lsls	r2, r2, #1
 800968a:	e7d1      	b.n	8009630 <_dtoa_r+0x258>
 800968c:	f3af 8000 	nop.w
 8009690:	636f4361 	.word	0x636f4361
 8009694:	3fd287a7 	.word	0x3fd287a7
 8009698:	8b60c8b3 	.word	0x8b60c8b3
 800969c:	3fc68a28 	.word	0x3fc68a28
 80096a0:	509f79fb 	.word	0x509f79fb
 80096a4:	3fd34413 	.word	0x3fd34413
 80096a8:	0800c02d 	.word	0x0800c02d
 80096ac:	0800c044 	.word	0x0800c044
 80096b0:	7ff00000 	.word	0x7ff00000
 80096b4:	0800bffd 	.word	0x0800bffd
 80096b8:	3ff80000 	.word	0x3ff80000
 80096bc:	0800c198 	.word	0x0800c198
 80096c0:	0800c09c 	.word	0x0800c09c
 80096c4:	0800c029 	.word	0x0800c029
 80096c8:	0800bffc 	.word	0x0800bffc
 80096cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096d0:	6018      	str	r0, [r3, #0]
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	2b0e      	cmp	r3, #14
 80096d6:	f200 80a1 	bhi.w	800981c <_dtoa_r+0x444>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	f000 809e 	beq.w	800981c <_dtoa_r+0x444>
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	dd33      	ble.n	800974c <_dtoa_r+0x374>
 80096e4:	4b9c      	ldr	r3, [pc, #624]	@ (8009958 <_dtoa_r+0x580>)
 80096e6:	f007 020f 	and.w	r2, r7, #15
 80096ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ee:	ed93 7b00 	vldr	d7, [r3]
 80096f2:	05f8      	lsls	r0, r7, #23
 80096f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80096f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096fc:	d516      	bpl.n	800972c <_dtoa_r+0x354>
 80096fe:	4b97      	ldr	r3, [pc, #604]	@ (800995c <_dtoa_r+0x584>)
 8009700:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009708:	f7f7 f8b0 	bl	800086c <__aeabi_ddiv>
 800970c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009710:	f004 040f 	and.w	r4, r4, #15
 8009714:	2603      	movs	r6, #3
 8009716:	4d91      	ldr	r5, [pc, #580]	@ (800995c <_dtoa_r+0x584>)
 8009718:	b954      	cbnz	r4, 8009730 <_dtoa_r+0x358>
 800971a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800971e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009722:	f7f7 f8a3 	bl	800086c <__aeabi_ddiv>
 8009726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972a:	e028      	b.n	800977e <_dtoa_r+0x3a6>
 800972c:	2602      	movs	r6, #2
 800972e:	e7f2      	b.n	8009716 <_dtoa_r+0x33e>
 8009730:	07e1      	lsls	r1, r4, #31
 8009732:	d508      	bpl.n	8009746 <_dtoa_r+0x36e>
 8009734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800973c:	f7f6 ff6c 	bl	8000618 <__aeabi_dmul>
 8009740:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009744:	3601      	adds	r6, #1
 8009746:	1064      	asrs	r4, r4, #1
 8009748:	3508      	adds	r5, #8
 800974a:	e7e5      	b.n	8009718 <_dtoa_r+0x340>
 800974c:	f000 80af 	beq.w	80098ae <_dtoa_r+0x4d6>
 8009750:	427c      	negs	r4, r7
 8009752:	4b81      	ldr	r3, [pc, #516]	@ (8009958 <_dtoa_r+0x580>)
 8009754:	4d81      	ldr	r5, [pc, #516]	@ (800995c <_dtoa_r+0x584>)
 8009756:	f004 020f 	and.w	r2, r4, #15
 800975a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009766:	f7f6 ff57 	bl	8000618 <__aeabi_dmul>
 800976a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800976e:	1124      	asrs	r4, r4, #4
 8009770:	2300      	movs	r3, #0
 8009772:	2602      	movs	r6, #2
 8009774:	2c00      	cmp	r4, #0
 8009776:	f040 808f 	bne.w	8009898 <_dtoa_r+0x4c0>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1d3      	bne.n	8009726 <_dtoa_r+0x34e>
 800977e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009780:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8094 	beq.w	80098b2 <_dtoa_r+0x4da>
 800978a:	4b75      	ldr	r3, [pc, #468]	@ (8009960 <_dtoa_r+0x588>)
 800978c:	2200      	movs	r2, #0
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f7 f9b3 	bl	8000afc <__aeabi_dcmplt>
 8009796:	2800      	cmp	r0, #0
 8009798:	f000 808b 	beq.w	80098b2 <_dtoa_r+0x4da>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 8087 	beq.w	80098b2 <_dtoa_r+0x4da>
 80097a4:	f1bb 0f00 	cmp.w	fp, #0
 80097a8:	dd34      	ble.n	8009814 <_dtoa_r+0x43c>
 80097aa:	4620      	mov	r0, r4
 80097ac:	4b6d      	ldr	r3, [pc, #436]	@ (8009964 <_dtoa_r+0x58c>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f6 ff31 	bl	8000618 <__aeabi_dmul>
 80097b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80097be:	3601      	adds	r6, #1
 80097c0:	465c      	mov	r4, fp
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7f6 febe 	bl	8000544 <__aeabi_i2d>
 80097c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097cc:	f7f6 ff24 	bl	8000618 <__aeabi_dmul>
 80097d0:	4b65      	ldr	r3, [pc, #404]	@ (8009968 <_dtoa_r+0x590>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	f7f6 fd6a 	bl	80002ac <__adddf3>
 80097d8:	4605      	mov	r5, r0
 80097da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80097de:	2c00      	cmp	r4, #0
 80097e0:	d16a      	bne.n	80098b8 <_dtoa_r+0x4e0>
 80097e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097e6:	4b61      	ldr	r3, [pc, #388]	@ (800996c <_dtoa_r+0x594>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	f7f6 fd5d 	bl	80002a8 <__aeabi_dsub>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097f6:	462a      	mov	r2, r5
 80097f8:	4633      	mov	r3, r6
 80097fa:	f7f7 f99d 	bl	8000b38 <__aeabi_dcmpgt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8298 	bne.w	8009d34 <_dtoa_r+0x95c>
 8009804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009808:	462a      	mov	r2, r5
 800980a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800980e:	f7f7 f975 	bl	8000afc <__aeabi_dcmplt>
 8009812:	bb38      	cbnz	r0, 8009864 <_dtoa_r+0x48c>
 8009814:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800981c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800981e:	2b00      	cmp	r3, #0
 8009820:	f2c0 8157 	blt.w	8009ad2 <_dtoa_r+0x6fa>
 8009824:	2f0e      	cmp	r7, #14
 8009826:	f300 8154 	bgt.w	8009ad2 <_dtoa_r+0x6fa>
 800982a:	4b4b      	ldr	r3, [pc, #300]	@ (8009958 <_dtoa_r+0x580>)
 800982c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009830:	ed93 7b00 	vldr	d7, [r3]
 8009834:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009836:	2b00      	cmp	r3, #0
 8009838:	ed8d 7b00 	vstr	d7, [sp]
 800983c:	f280 80e5 	bge.w	8009a0a <_dtoa_r+0x632>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f300 80e1 	bgt.w	8009a0a <_dtoa_r+0x632>
 8009848:	d10c      	bne.n	8009864 <_dtoa_r+0x48c>
 800984a:	4b48      	ldr	r3, [pc, #288]	@ (800996c <_dtoa_r+0x594>)
 800984c:	2200      	movs	r2, #0
 800984e:	ec51 0b17 	vmov	r0, r1, d7
 8009852:	f7f6 fee1 	bl	8000618 <__aeabi_dmul>
 8009856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800985a:	f7f7 f963 	bl	8000b24 <__aeabi_dcmpge>
 800985e:	2800      	cmp	r0, #0
 8009860:	f000 8266 	beq.w	8009d30 <_dtoa_r+0x958>
 8009864:	2400      	movs	r4, #0
 8009866:	4625      	mov	r5, r4
 8009868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800986a:	4656      	mov	r6, sl
 800986c:	ea6f 0803 	mvn.w	r8, r3
 8009870:	2700      	movs	r7, #0
 8009872:	4621      	mov	r1, r4
 8009874:	4648      	mov	r0, r9
 8009876:	f000 fcbf 	bl	800a1f8 <_Bfree>
 800987a:	2d00      	cmp	r5, #0
 800987c:	f000 80bd 	beq.w	80099fa <_dtoa_r+0x622>
 8009880:	b12f      	cbz	r7, 800988e <_dtoa_r+0x4b6>
 8009882:	42af      	cmp	r7, r5
 8009884:	d003      	beq.n	800988e <_dtoa_r+0x4b6>
 8009886:	4639      	mov	r1, r7
 8009888:	4648      	mov	r0, r9
 800988a:	f000 fcb5 	bl	800a1f8 <_Bfree>
 800988e:	4629      	mov	r1, r5
 8009890:	4648      	mov	r0, r9
 8009892:	f000 fcb1 	bl	800a1f8 <_Bfree>
 8009896:	e0b0      	b.n	80099fa <_dtoa_r+0x622>
 8009898:	07e2      	lsls	r2, r4, #31
 800989a:	d505      	bpl.n	80098a8 <_dtoa_r+0x4d0>
 800989c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098a0:	f7f6 feba 	bl	8000618 <__aeabi_dmul>
 80098a4:	3601      	adds	r6, #1
 80098a6:	2301      	movs	r3, #1
 80098a8:	1064      	asrs	r4, r4, #1
 80098aa:	3508      	adds	r5, #8
 80098ac:	e762      	b.n	8009774 <_dtoa_r+0x39c>
 80098ae:	2602      	movs	r6, #2
 80098b0:	e765      	b.n	800977e <_dtoa_r+0x3a6>
 80098b2:	9c03      	ldr	r4, [sp, #12]
 80098b4:	46b8      	mov	r8, r7
 80098b6:	e784      	b.n	80097c2 <_dtoa_r+0x3ea>
 80098b8:	4b27      	ldr	r3, [pc, #156]	@ (8009958 <_dtoa_r+0x580>)
 80098ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098c4:	4454      	add	r4, sl
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d054      	beq.n	8009974 <_dtoa_r+0x59c>
 80098ca:	4929      	ldr	r1, [pc, #164]	@ (8009970 <_dtoa_r+0x598>)
 80098cc:	2000      	movs	r0, #0
 80098ce:	f7f6 ffcd 	bl	800086c <__aeabi_ddiv>
 80098d2:	4633      	mov	r3, r6
 80098d4:	462a      	mov	r2, r5
 80098d6:	f7f6 fce7 	bl	80002a8 <__aeabi_dsub>
 80098da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098de:	4656      	mov	r6, sl
 80098e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098e4:	f7f7 f948 	bl	8000b78 <__aeabi_d2iz>
 80098e8:	4605      	mov	r5, r0
 80098ea:	f7f6 fe2b 	bl	8000544 <__aeabi_i2d>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f6:	f7f6 fcd7 	bl	80002a8 <__aeabi_dsub>
 80098fa:	3530      	adds	r5, #48	@ 0x30
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009904:	f806 5b01 	strb.w	r5, [r6], #1
 8009908:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800990c:	f7f7 f8f6 	bl	8000afc <__aeabi_dcmplt>
 8009910:	2800      	cmp	r0, #0
 8009912:	d172      	bne.n	80099fa <_dtoa_r+0x622>
 8009914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009918:	4911      	ldr	r1, [pc, #68]	@ (8009960 <_dtoa_r+0x588>)
 800991a:	2000      	movs	r0, #0
 800991c:	f7f6 fcc4 	bl	80002a8 <__aeabi_dsub>
 8009920:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009924:	f7f7 f8ea 	bl	8000afc <__aeabi_dcmplt>
 8009928:	2800      	cmp	r0, #0
 800992a:	f040 80b4 	bne.w	8009a96 <_dtoa_r+0x6be>
 800992e:	42a6      	cmp	r6, r4
 8009930:	f43f af70 	beq.w	8009814 <_dtoa_r+0x43c>
 8009934:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009938:	4b0a      	ldr	r3, [pc, #40]	@ (8009964 <_dtoa_r+0x58c>)
 800993a:	2200      	movs	r2, #0
 800993c:	f7f6 fe6c 	bl	8000618 <__aeabi_dmul>
 8009940:	4b08      	ldr	r3, [pc, #32]	@ (8009964 <_dtoa_r+0x58c>)
 8009942:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009946:	2200      	movs	r2, #0
 8009948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800994c:	f7f6 fe64 	bl	8000618 <__aeabi_dmul>
 8009950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009954:	e7c4      	b.n	80098e0 <_dtoa_r+0x508>
 8009956:	bf00      	nop
 8009958:	0800c198 	.word	0x0800c198
 800995c:	0800c170 	.word	0x0800c170
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	40240000 	.word	0x40240000
 8009968:	401c0000 	.word	0x401c0000
 800996c:	40140000 	.word	0x40140000
 8009970:	3fe00000 	.word	0x3fe00000
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	f7f6 fe4e 	bl	8000618 <__aeabi_dmul>
 800997c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009980:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009982:	4656      	mov	r6, sl
 8009984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009988:	f7f7 f8f6 	bl	8000b78 <__aeabi_d2iz>
 800998c:	4605      	mov	r5, r0
 800998e:	f7f6 fdd9 	bl	8000544 <__aeabi_i2d>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800999a:	f7f6 fc85 	bl	80002a8 <__aeabi_dsub>
 800999e:	3530      	adds	r5, #48	@ 0x30
 80099a0:	f806 5b01 	strb.w	r5, [r6], #1
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	d124      	bne.n	80099fe <_dtoa_r+0x626>
 80099b4:	4baf      	ldr	r3, [pc, #700]	@ (8009c74 <_dtoa_r+0x89c>)
 80099b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80099ba:	f7f6 fc77 	bl	80002ac <__adddf3>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099c6:	f7f7 f8b7 	bl	8000b38 <__aeabi_dcmpgt>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d163      	bne.n	8009a96 <_dtoa_r+0x6be>
 80099ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099d2:	49a8      	ldr	r1, [pc, #672]	@ (8009c74 <_dtoa_r+0x89c>)
 80099d4:	2000      	movs	r0, #0
 80099d6:	f7f6 fc67 	bl	80002a8 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e2:	f7f7 f88b 	bl	8000afc <__aeabi_dcmplt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f af14 	beq.w	8009814 <_dtoa_r+0x43c>
 80099ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099ee:	1e73      	subs	r3, r6, #1
 80099f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099f6:	2b30      	cmp	r3, #48	@ 0x30
 80099f8:	d0f8      	beq.n	80099ec <_dtoa_r+0x614>
 80099fa:	4647      	mov	r7, r8
 80099fc:	e03b      	b.n	8009a76 <_dtoa_r+0x69e>
 80099fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009c78 <_dtoa_r+0x8a0>)
 8009a00:	f7f6 fe0a 	bl	8000618 <__aeabi_dmul>
 8009a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a08:	e7bc      	b.n	8009984 <_dtoa_r+0x5ac>
 8009a0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a0e:	4656      	mov	r6, sl
 8009a10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 ff28 	bl	800086c <__aeabi_ddiv>
 8009a1c:	f7f7 f8ac 	bl	8000b78 <__aeabi_d2iz>
 8009a20:	4680      	mov	r8, r0
 8009a22:	f7f6 fd8f 	bl	8000544 <__aeabi_i2d>
 8009a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2a:	f7f6 fdf5 	bl	8000618 <__aeabi_dmul>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a3a:	f7f6 fc35 	bl	80002a8 <__aeabi_dsub>
 8009a3e:	f806 4b01 	strb.w	r4, [r6], #1
 8009a42:	9d03      	ldr	r5, [sp, #12]
 8009a44:	eba6 040a 	sub.w	r4, r6, sl
 8009a48:	42a5      	cmp	r5, r4
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	d133      	bne.n	8009ab8 <_dtoa_r+0x6e0>
 8009a50:	f7f6 fc2c 	bl	80002ac <__adddf3>
 8009a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	f7f7 f86c 	bl	8000b38 <__aeabi_dcmpgt>
 8009a60:	b9c0      	cbnz	r0, 8009a94 <_dtoa_r+0x6bc>
 8009a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a66:	4620      	mov	r0, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7f7 f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a6e:	b110      	cbz	r0, 8009a76 <_dtoa_r+0x69e>
 8009a70:	f018 0f01 	tst.w	r8, #1
 8009a74:	d10e      	bne.n	8009a94 <_dtoa_r+0x6bc>
 8009a76:	9902      	ldr	r1, [sp, #8]
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f000 fbbd 	bl	800a1f8 <_Bfree>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	7033      	strb	r3, [r6, #0]
 8009a82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a84:	3701      	adds	r7, #1
 8009a86:	601f      	str	r7, [r3, #0]
 8009a88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 824b 	beq.w	8009f26 <_dtoa_r+0xb4e>
 8009a90:	601e      	str	r6, [r3, #0]
 8009a92:	e248      	b.n	8009f26 <_dtoa_r+0xb4e>
 8009a94:	46b8      	mov	r8, r7
 8009a96:	4633      	mov	r3, r6
 8009a98:	461e      	mov	r6, r3
 8009a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a9e:	2a39      	cmp	r2, #57	@ 0x39
 8009aa0:	d106      	bne.n	8009ab0 <_dtoa_r+0x6d8>
 8009aa2:	459a      	cmp	sl, r3
 8009aa4:	d1f8      	bne.n	8009a98 <_dtoa_r+0x6c0>
 8009aa6:	2230      	movs	r2, #48	@ 0x30
 8009aa8:	f108 0801 	add.w	r8, r8, #1
 8009aac:	f88a 2000 	strb.w	r2, [sl]
 8009ab0:	781a      	ldrb	r2, [r3, #0]
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e7a0      	b.n	80099fa <_dtoa_r+0x622>
 8009ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8009c78 <_dtoa_r+0x8a0>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	f7f6 fdac 	bl	8000618 <__aeabi_dmul>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	460d      	mov	r5, r1
 8009ac8:	f7f7 f80e 	bl	8000ae8 <__aeabi_dcmpeq>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d09f      	beq.n	8009a10 <_dtoa_r+0x638>
 8009ad0:	e7d1      	b.n	8009a76 <_dtoa_r+0x69e>
 8009ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	f000 80ea 	beq.w	8009cae <_dtoa_r+0x8d6>
 8009ada:	9a07      	ldr	r2, [sp, #28]
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	f300 80cd 	bgt.w	8009c7c <_dtoa_r+0x8a4>
 8009ae2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009ae4:	2a00      	cmp	r2, #0
 8009ae6:	f000 80c1 	beq.w	8009c6c <_dtoa_r+0x894>
 8009aea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009aee:	9c08      	ldr	r4, [sp, #32]
 8009af0:	9e00      	ldr	r6, [sp, #0]
 8009af2:	9a00      	ldr	r2, [sp, #0]
 8009af4:	441a      	add	r2, r3
 8009af6:	9200      	str	r2, [sp, #0]
 8009af8:	9a06      	ldr	r2, [sp, #24]
 8009afa:	2101      	movs	r1, #1
 8009afc:	441a      	add	r2, r3
 8009afe:	4648      	mov	r0, r9
 8009b00:	9206      	str	r2, [sp, #24]
 8009b02:	f000 fc2d 	bl	800a360 <__i2b>
 8009b06:	4605      	mov	r5, r0
 8009b08:	b166      	cbz	r6, 8009b24 <_dtoa_r+0x74c>
 8009b0a:	9b06      	ldr	r3, [sp, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd09      	ble.n	8009b24 <_dtoa_r+0x74c>
 8009b10:	42b3      	cmp	r3, r6
 8009b12:	9a00      	ldr	r2, [sp, #0]
 8009b14:	bfa8      	it	ge
 8009b16:	4633      	movge	r3, r6
 8009b18:	1ad2      	subs	r2, r2, r3
 8009b1a:	9200      	str	r2, [sp, #0]
 8009b1c:	9a06      	ldr	r2, [sp, #24]
 8009b1e:	1af6      	subs	r6, r6, r3
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	9306      	str	r3, [sp, #24]
 8009b24:	9b08      	ldr	r3, [sp, #32]
 8009b26:	b30b      	cbz	r3, 8009b6c <_dtoa_r+0x794>
 8009b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 80c6 	beq.w	8009cbc <_dtoa_r+0x8e4>
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	f000 80c0 	beq.w	8009cb6 <_dtoa_r+0x8de>
 8009b36:	4629      	mov	r1, r5
 8009b38:	4622      	mov	r2, r4
 8009b3a:	4648      	mov	r0, r9
 8009b3c:	f000 fcc8 	bl	800a4d0 <__pow5mult>
 8009b40:	9a02      	ldr	r2, [sp, #8]
 8009b42:	4601      	mov	r1, r0
 8009b44:	4605      	mov	r5, r0
 8009b46:	4648      	mov	r0, r9
 8009b48:	f000 fc20 	bl	800a38c <__multiply>
 8009b4c:	9902      	ldr	r1, [sp, #8]
 8009b4e:	4680      	mov	r8, r0
 8009b50:	4648      	mov	r0, r9
 8009b52:	f000 fb51 	bl	800a1f8 <_Bfree>
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	1b1b      	subs	r3, r3, r4
 8009b5a:	9308      	str	r3, [sp, #32]
 8009b5c:	f000 80b1 	beq.w	8009cc2 <_dtoa_r+0x8ea>
 8009b60:	9a08      	ldr	r2, [sp, #32]
 8009b62:	4641      	mov	r1, r8
 8009b64:	4648      	mov	r0, r9
 8009b66:	f000 fcb3 	bl	800a4d0 <__pow5mult>
 8009b6a:	9002      	str	r0, [sp, #8]
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f000 fbf6 	bl	800a360 <__i2b>
 8009b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b76:	4604      	mov	r4, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 81d8 	beq.w	8009f2e <_dtoa_r+0xb56>
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4601      	mov	r1, r0
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fca4 	bl	800a4d0 <__pow5mult>
 8009b88:	9b07      	ldr	r3, [sp, #28]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	f300 809f 	bgt.w	8009cd0 <_dtoa_r+0x8f8>
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f040 8097 	bne.w	8009cc8 <_dtoa_r+0x8f0>
 8009b9a:	9b05      	ldr	r3, [sp, #20]
 8009b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f040 8093 	bne.w	8009ccc <_dtoa_r+0x8f4>
 8009ba6:	9b05      	ldr	r3, [sp, #20]
 8009ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bac:	0d1b      	lsrs	r3, r3, #20
 8009bae:	051b      	lsls	r3, r3, #20
 8009bb0:	b133      	cbz	r3, 8009bc0 <_dtoa_r+0x7e8>
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	9b06      	ldr	r3, [sp, #24]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	9306      	str	r3, [sp, #24]
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	9308      	str	r3, [sp, #32]
 8009bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 81b8 	beq.w	8009f3a <_dtoa_r+0xb62>
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bd0:	6918      	ldr	r0, [r3, #16]
 8009bd2:	f000 fb79 	bl	800a2c8 <__hi0bits>
 8009bd6:	f1c0 0020 	rsb	r0, r0, #32
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	4418      	add	r0, r3
 8009bde:	f010 001f 	ands.w	r0, r0, #31
 8009be2:	f000 8082 	beq.w	8009cea <_dtoa_r+0x912>
 8009be6:	f1c0 0320 	rsb	r3, r0, #32
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	dd73      	ble.n	8009cd6 <_dtoa_r+0x8fe>
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	f1c0 001c 	rsb	r0, r0, #28
 8009bf4:	4403      	add	r3, r0
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	9b06      	ldr	r3, [sp, #24]
 8009bfa:	4403      	add	r3, r0
 8009bfc:	4406      	add	r6, r0
 8009bfe:	9306      	str	r3, [sp, #24]
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dd05      	ble.n	8009c12 <_dtoa_r+0x83a>
 8009c06:	9902      	ldr	r1, [sp, #8]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	f000 fcba 	bl	800a584 <__lshift>
 8009c10:	9002      	str	r0, [sp, #8]
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dd05      	ble.n	8009c24 <_dtoa_r+0x84c>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4648      	mov	r0, r9
 8009c1e:	f000 fcb1 	bl	800a584 <__lshift>
 8009c22:	4604      	mov	r4, r0
 8009c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d061      	beq.n	8009cee <_dtoa_r+0x916>
 8009c2a:	9802      	ldr	r0, [sp, #8]
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f000 fd15 	bl	800a65c <__mcmp>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	da5b      	bge.n	8009cee <_dtoa_r+0x916>
 8009c36:	2300      	movs	r3, #0
 8009c38:	9902      	ldr	r1, [sp, #8]
 8009c3a:	220a      	movs	r2, #10
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	f000 fafd 	bl	800a23c <__multadd>
 8009c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 8177 	beq.w	8009f3e <_dtoa_r+0xb66>
 8009c50:	4629      	mov	r1, r5
 8009c52:	2300      	movs	r3, #0
 8009c54:	220a      	movs	r2, #10
 8009c56:	4648      	mov	r0, r9
 8009c58:	f000 faf0 	bl	800a23c <__multadd>
 8009c5c:	f1bb 0f00 	cmp.w	fp, #0
 8009c60:	4605      	mov	r5, r0
 8009c62:	dc6f      	bgt.n	8009d44 <_dtoa_r+0x96c>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	dc49      	bgt.n	8009cfe <_dtoa_r+0x926>
 8009c6a:	e06b      	b.n	8009d44 <_dtoa_r+0x96c>
 8009c6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c72:	e73c      	b.n	8009aee <_dtoa_r+0x716>
 8009c74:	3fe00000 	.word	0x3fe00000
 8009c78:	40240000 	.word	0x40240000
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	1e5c      	subs	r4, r3, #1
 8009c80:	9b08      	ldr	r3, [sp, #32]
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	db09      	blt.n	8009c9a <_dtoa_r+0x8c2>
 8009c86:	1b1c      	subs	r4, r3, r4
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f6bf af30 	bge.w	8009af0 <_dtoa_r+0x718>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	9a03      	ldr	r2, [sp, #12]
 8009c94:	1a9e      	subs	r6, r3, r2
 8009c96:	2300      	movs	r3, #0
 8009c98:	e72b      	b.n	8009af2 <_dtoa_r+0x71a>
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c9e:	9408      	str	r4, [sp, #32]
 8009ca0:	1ae3      	subs	r3, r4, r3
 8009ca2:	441a      	add	r2, r3
 8009ca4:	9e00      	ldr	r6, [sp, #0]
 8009ca6:	9b03      	ldr	r3, [sp, #12]
 8009ca8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009caa:	2400      	movs	r4, #0
 8009cac:	e721      	b.n	8009af2 <_dtoa_r+0x71a>
 8009cae:	9c08      	ldr	r4, [sp, #32]
 8009cb0:	9e00      	ldr	r6, [sp, #0]
 8009cb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009cb4:	e728      	b.n	8009b08 <_dtoa_r+0x730>
 8009cb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009cba:	e751      	b.n	8009b60 <_dtoa_r+0x788>
 8009cbc:	9a08      	ldr	r2, [sp, #32]
 8009cbe:	9902      	ldr	r1, [sp, #8]
 8009cc0:	e750      	b.n	8009b64 <_dtoa_r+0x78c>
 8009cc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009cc6:	e751      	b.n	8009b6c <_dtoa_r+0x794>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e779      	b.n	8009bc0 <_dtoa_r+0x7e8>
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	e777      	b.n	8009bc0 <_dtoa_r+0x7e8>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9308      	str	r3, [sp, #32]
 8009cd4:	e779      	b.n	8009bca <_dtoa_r+0x7f2>
 8009cd6:	d093      	beq.n	8009c00 <_dtoa_r+0x828>
 8009cd8:	9a00      	ldr	r2, [sp, #0]
 8009cda:	331c      	adds	r3, #28
 8009cdc:	441a      	add	r2, r3
 8009cde:	9200      	str	r2, [sp, #0]
 8009ce0:	9a06      	ldr	r2, [sp, #24]
 8009ce2:	441a      	add	r2, r3
 8009ce4:	441e      	add	r6, r3
 8009ce6:	9206      	str	r2, [sp, #24]
 8009ce8:	e78a      	b.n	8009c00 <_dtoa_r+0x828>
 8009cea:	4603      	mov	r3, r0
 8009cec:	e7f4      	b.n	8009cd8 <_dtoa_r+0x900>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	46b8      	mov	r8, r7
 8009cf4:	dc20      	bgt.n	8009d38 <_dtoa_r+0x960>
 8009cf6:	469b      	mov	fp, r3
 8009cf8:	9b07      	ldr	r3, [sp, #28]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	dd1e      	ble.n	8009d3c <_dtoa_r+0x964>
 8009cfe:	f1bb 0f00 	cmp.w	fp, #0
 8009d02:	f47f adb1 	bne.w	8009868 <_dtoa_r+0x490>
 8009d06:	4621      	mov	r1, r4
 8009d08:	465b      	mov	r3, fp
 8009d0a:	2205      	movs	r2, #5
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f000 fa95 	bl	800a23c <__multadd>
 8009d12:	4601      	mov	r1, r0
 8009d14:	4604      	mov	r4, r0
 8009d16:	9802      	ldr	r0, [sp, #8]
 8009d18:	f000 fca0 	bl	800a65c <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f77f ada3 	ble.w	8009868 <_dtoa_r+0x490>
 8009d22:	4656      	mov	r6, sl
 8009d24:	2331      	movs	r3, #49	@ 0x31
 8009d26:	f806 3b01 	strb.w	r3, [r6], #1
 8009d2a:	f108 0801 	add.w	r8, r8, #1
 8009d2e:	e59f      	b.n	8009870 <_dtoa_r+0x498>
 8009d30:	9c03      	ldr	r4, [sp, #12]
 8009d32:	46b8      	mov	r8, r7
 8009d34:	4625      	mov	r5, r4
 8009d36:	e7f4      	b.n	8009d22 <_dtoa_r+0x94a>
 8009d38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 8101 	beq.w	8009f46 <_dtoa_r+0xb6e>
 8009d44:	2e00      	cmp	r6, #0
 8009d46:	dd05      	ble.n	8009d54 <_dtoa_r+0x97c>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	4648      	mov	r0, r9
 8009d4e:	f000 fc19 	bl	800a584 <__lshift>
 8009d52:	4605      	mov	r5, r0
 8009d54:	9b08      	ldr	r3, [sp, #32]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d05c      	beq.n	8009e14 <_dtoa_r+0xa3c>
 8009d5a:	6869      	ldr	r1, [r5, #4]
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	f000 fa0b 	bl	800a178 <_Balloc>
 8009d62:	4606      	mov	r6, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <_dtoa_r+0x99a>
 8009d66:	4b82      	ldr	r3, [pc, #520]	@ (8009f70 <_dtoa_r+0xb98>)
 8009d68:	4602      	mov	r2, r0
 8009d6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d6e:	f7ff bb4a 	b.w	8009406 <_dtoa_r+0x2e>
 8009d72:	692a      	ldr	r2, [r5, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	0092      	lsls	r2, r2, #2
 8009d78:	f105 010c 	add.w	r1, r5, #12
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f7ff fa92 	bl	80092a6 <memcpy>
 8009d82:	2201      	movs	r2, #1
 8009d84:	4631      	mov	r1, r6
 8009d86:	4648      	mov	r0, r9
 8009d88:	f000 fbfc 	bl	800a584 <__lshift>
 8009d8c:	f10a 0301 	add.w	r3, sl, #1
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	eb0a 030b 	add.w	r3, sl, fp
 8009d96:	9308      	str	r3, [sp, #32]
 8009d98:	9b04      	ldr	r3, [sp, #16]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
 8009d9e:	462f      	mov	r7, r5
 8009da0:	9306      	str	r3, [sp, #24]
 8009da2:	4605      	mov	r5, r0
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	9802      	ldr	r0, [sp, #8]
 8009da8:	4621      	mov	r1, r4
 8009daa:	f103 3bff 	add.w	fp, r3, #4294967295
 8009dae:	f7ff fa88 	bl	80092c2 <quorem>
 8009db2:	4603      	mov	r3, r0
 8009db4:	3330      	adds	r3, #48	@ 0x30
 8009db6:	9003      	str	r0, [sp, #12]
 8009db8:	4639      	mov	r1, r7
 8009dba:	9802      	ldr	r0, [sp, #8]
 8009dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbe:	f000 fc4d 	bl	800a65c <__mcmp>
 8009dc2:	462a      	mov	r2, r5
 8009dc4:	9004      	str	r0, [sp, #16]
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fc63 	bl	800a694 <__mdiff>
 8009dce:	68c2      	ldr	r2, [r0, #12]
 8009dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	bb02      	cbnz	r2, 8009e18 <_dtoa_r+0xa40>
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	9802      	ldr	r0, [sp, #8]
 8009dda:	f000 fc3f 	bl	800a65c <__mcmp>
 8009dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de0:	4602      	mov	r2, r0
 8009de2:	4631      	mov	r1, r6
 8009de4:	4648      	mov	r0, r9
 8009de6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dea:	f000 fa05 	bl	800a1f8 <_Bfree>
 8009dee:	9b07      	ldr	r3, [sp, #28]
 8009df0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009df2:	9e00      	ldr	r6, [sp, #0]
 8009df4:	ea42 0103 	orr.w	r1, r2, r3
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	4319      	orrs	r1, r3
 8009dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfe:	d10d      	bne.n	8009e1c <_dtoa_r+0xa44>
 8009e00:	2b39      	cmp	r3, #57	@ 0x39
 8009e02:	d027      	beq.n	8009e54 <_dtoa_r+0xa7c>
 8009e04:	9a04      	ldr	r2, [sp, #16]
 8009e06:	2a00      	cmp	r2, #0
 8009e08:	dd01      	ble.n	8009e0e <_dtoa_r+0xa36>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	3331      	adds	r3, #49	@ 0x31
 8009e0e:	f88b 3000 	strb.w	r3, [fp]
 8009e12:	e52e      	b.n	8009872 <_dtoa_r+0x49a>
 8009e14:	4628      	mov	r0, r5
 8009e16:	e7b9      	b.n	8009d8c <_dtoa_r+0x9b4>
 8009e18:	2201      	movs	r2, #1
 8009e1a:	e7e2      	b.n	8009de2 <_dtoa_r+0xa0a>
 8009e1c:	9904      	ldr	r1, [sp, #16]
 8009e1e:	2900      	cmp	r1, #0
 8009e20:	db04      	blt.n	8009e2c <_dtoa_r+0xa54>
 8009e22:	9807      	ldr	r0, [sp, #28]
 8009e24:	4301      	orrs	r1, r0
 8009e26:	9806      	ldr	r0, [sp, #24]
 8009e28:	4301      	orrs	r1, r0
 8009e2a:	d120      	bne.n	8009e6e <_dtoa_r+0xa96>
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	ddee      	ble.n	8009e0e <_dtoa_r+0xa36>
 8009e30:	9902      	ldr	r1, [sp, #8]
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	4648      	mov	r0, r9
 8009e38:	f000 fba4 	bl	800a584 <__lshift>
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	9002      	str	r0, [sp, #8]
 8009e40:	f000 fc0c 	bl	800a65c <__mcmp>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	dc02      	bgt.n	8009e50 <_dtoa_r+0xa78>
 8009e4a:	d1e0      	bne.n	8009e0e <_dtoa_r+0xa36>
 8009e4c:	07da      	lsls	r2, r3, #31
 8009e4e:	d5de      	bpl.n	8009e0e <_dtoa_r+0xa36>
 8009e50:	2b39      	cmp	r3, #57	@ 0x39
 8009e52:	d1da      	bne.n	8009e0a <_dtoa_r+0xa32>
 8009e54:	2339      	movs	r3, #57	@ 0x39
 8009e56:	f88b 3000 	strb.w	r3, [fp]
 8009e5a:	4633      	mov	r3, r6
 8009e5c:	461e      	mov	r6, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e64:	2a39      	cmp	r2, #57	@ 0x39
 8009e66:	d04e      	beq.n	8009f06 <_dtoa_r+0xb2e>
 8009e68:	3201      	adds	r2, #1
 8009e6a:	701a      	strb	r2, [r3, #0]
 8009e6c:	e501      	b.n	8009872 <_dtoa_r+0x49a>
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	dd03      	ble.n	8009e7a <_dtoa_r+0xaa2>
 8009e72:	2b39      	cmp	r3, #57	@ 0x39
 8009e74:	d0ee      	beq.n	8009e54 <_dtoa_r+0xa7c>
 8009e76:	3301      	adds	r3, #1
 8009e78:	e7c9      	b.n	8009e0e <_dtoa_r+0xa36>
 8009e7a:	9a00      	ldr	r2, [sp, #0]
 8009e7c:	9908      	ldr	r1, [sp, #32]
 8009e7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e82:	428a      	cmp	r2, r1
 8009e84:	d028      	beq.n	8009ed8 <_dtoa_r+0xb00>
 8009e86:	9902      	ldr	r1, [sp, #8]
 8009e88:	2300      	movs	r3, #0
 8009e8a:	220a      	movs	r2, #10
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	f000 f9d5 	bl	800a23c <__multadd>
 8009e92:	42af      	cmp	r7, r5
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 020a 	mov.w	r2, #10
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	d107      	bne.n	8009eb4 <_dtoa_r+0xadc>
 8009ea4:	f000 f9ca 	bl	800a23c <__multadd>
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	4605      	mov	r5, r0
 8009eac:	9b00      	ldr	r3, [sp, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	e777      	b.n	8009da4 <_dtoa_r+0x9cc>
 8009eb4:	f000 f9c2 	bl	800a23c <__multadd>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4607      	mov	r7, r0
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	220a      	movs	r2, #10
 8009ec0:	4648      	mov	r0, r9
 8009ec2:	f000 f9bb 	bl	800a23c <__multadd>
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	e7f0      	b.n	8009eac <_dtoa_r+0xad4>
 8009eca:	f1bb 0f00 	cmp.w	fp, #0
 8009ece:	bfcc      	ite	gt
 8009ed0:	465e      	movgt	r6, fp
 8009ed2:	2601      	movle	r6, #1
 8009ed4:	4456      	add	r6, sl
 8009ed6:	2700      	movs	r7, #0
 8009ed8:	9902      	ldr	r1, [sp, #8]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f000 fb50 	bl	800a584 <__lshift>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	9002      	str	r0, [sp, #8]
 8009ee8:	f000 fbb8 	bl	800a65c <__mcmp>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	dcb4      	bgt.n	8009e5a <_dtoa_r+0xa82>
 8009ef0:	d102      	bne.n	8009ef8 <_dtoa_r+0xb20>
 8009ef2:	9b00      	ldr	r3, [sp, #0]
 8009ef4:	07db      	lsls	r3, r3, #31
 8009ef6:	d4b0      	bmi.n	8009e5a <_dtoa_r+0xa82>
 8009ef8:	4633      	mov	r3, r6
 8009efa:	461e      	mov	r6, r3
 8009efc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f00:	2a30      	cmp	r2, #48	@ 0x30
 8009f02:	d0fa      	beq.n	8009efa <_dtoa_r+0xb22>
 8009f04:	e4b5      	b.n	8009872 <_dtoa_r+0x49a>
 8009f06:	459a      	cmp	sl, r3
 8009f08:	d1a8      	bne.n	8009e5c <_dtoa_r+0xa84>
 8009f0a:	2331      	movs	r3, #49	@ 0x31
 8009f0c:	f108 0801 	add.w	r8, r8, #1
 8009f10:	f88a 3000 	strb.w	r3, [sl]
 8009f14:	e4ad      	b.n	8009872 <_dtoa_r+0x49a>
 8009f16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009f74 <_dtoa_r+0xb9c>
 8009f1c:	b11b      	cbz	r3, 8009f26 <_dtoa_r+0xb4e>
 8009f1e:	f10a 0308 	add.w	r3, sl, #8
 8009f22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	4650      	mov	r0, sl
 8009f28:	b017      	add	sp, #92	@ 0x5c
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	9b07      	ldr	r3, [sp, #28]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	f77f ae2e 	ble.w	8009b92 <_dtoa_r+0x7ba>
 8009f36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f38:	9308      	str	r3, [sp, #32]
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	e64d      	b.n	8009bda <_dtoa_r+0x802>
 8009f3e:	f1bb 0f00 	cmp.w	fp, #0
 8009f42:	f77f aed9 	ble.w	8009cf8 <_dtoa_r+0x920>
 8009f46:	4656      	mov	r6, sl
 8009f48:	9802      	ldr	r0, [sp, #8]
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	f7ff f9b9 	bl	80092c2 <quorem>
 8009f50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f54:	f806 3b01 	strb.w	r3, [r6], #1
 8009f58:	eba6 020a 	sub.w	r2, r6, sl
 8009f5c:	4593      	cmp	fp, r2
 8009f5e:	ddb4      	ble.n	8009eca <_dtoa_r+0xaf2>
 8009f60:	9902      	ldr	r1, [sp, #8]
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	4648      	mov	r0, r9
 8009f68:	f000 f968 	bl	800a23c <__multadd>
 8009f6c:	9002      	str	r0, [sp, #8]
 8009f6e:	e7eb      	b.n	8009f48 <_dtoa_r+0xb70>
 8009f70:	0800c09c 	.word	0x0800c09c
 8009f74:	0800c020 	.word	0x0800c020

08009f78 <_free_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	d041      	beq.n	800a004 <_free_r+0x8c>
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f0c      	subs	r4, r1, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	18e4      	addlt	r4, r4, r3
 8009f8c:	f000 f8e8 	bl	800a160 <__malloc_lock>
 8009f90:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <_free_r+0x90>)
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	b933      	cbnz	r3, 8009fa4 <_free_r+0x2c>
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6014      	str	r4, [r2, #0]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa0:	f000 b8e4 	b.w	800a16c <__malloc_unlock>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d908      	bls.n	8009fba <_free_r+0x42>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	1821      	adds	r1, r4, r0
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf01      	itttt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	1809      	addeq	r1, r1, r0
 8009fb6:	6021      	streq	r1, [r4, #0]
 8009fb8:	e7ed      	b.n	8009f96 <_free_r+0x1e>
 8009fba:	461a      	mov	r2, r3
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_free_r+0x4c>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d9fa      	bls.n	8009fba <_free_r+0x42>
 8009fc4:	6811      	ldr	r1, [r2, #0]
 8009fc6:	1850      	adds	r0, r2, r1
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d10b      	bne.n	8009fe4 <_free_r+0x6c>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	4401      	add	r1, r0
 8009fd0:	1850      	adds	r0, r2, r1
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	d1e0      	bne.n	8009f9a <_free_r+0x22>
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	6053      	str	r3, [r2, #4]
 8009fde:	4408      	add	r0, r1
 8009fe0:	6010      	str	r0, [r2, #0]
 8009fe2:	e7da      	b.n	8009f9a <_free_r+0x22>
 8009fe4:	d902      	bls.n	8009fec <_free_r+0x74>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	e7d6      	b.n	8009f9a <_free_r+0x22>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf04      	itt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	6063      	str	r3, [r4, #4]
 8009ffa:	bf04      	itt	eq
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	6054      	str	r4, [r2, #4]
 800a002:	e7ca      	b.n	8009f9a <_free_r+0x22>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	20001928 	.word	0x20001928

0800a00c <malloc>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <malloc+0xc>)
 800a00e:	4601      	mov	r1, r0
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	f000 b825 	b.w	800a060 <_malloc_r>
 800a016:	bf00      	nop
 800a018:	2000001c 	.word	0x2000001c

0800a01c <sbrk_aligned>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4e0f      	ldr	r6, [pc, #60]	@ (800a05c <sbrk_aligned+0x40>)
 800a020:	460c      	mov	r4, r1
 800a022:	6831      	ldr	r1, [r6, #0]
 800a024:	4605      	mov	r5, r0
 800a026:	b911      	cbnz	r1, 800a02e <sbrk_aligned+0x12>
 800a028:	f000 fccc 	bl	800a9c4 <_sbrk_r>
 800a02c:	6030      	str	r0, [r6, #0]
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f000 fcc7 	bl	800a9c4 <_sbrk_r>
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	d103      	bne.n	800a042 <sbrk_aligned+0x26>
 800a03a:	f04f 34ff 	mov.w	r4, #4294967295
 800a03e:	4620      	mov	r0, r4
 800a040:	bd70      	pop	{r4, r5, r6, pc}
 800a042:	1cc4      	adds	r4, r0, #3
 800a044:	f024 0403 	bic.w	r4, r4, #3
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d0f8      	beq.n	800a03e <sbrk_aligned+0x22>
 800a04c:	1a21      	subs	r1, r4, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fcb8 	bl	800a9c4 <_sbrk_r>
 800a054:	3001      	adds	r0, #1
 800a056:	d1f2      	bne.n	800a03e <sbrk_aligned+0x22>
 800a058:	e7ef      	b.n	800a03a <sbrk_aligned+0x1e>
 800a05a:	bf00      	nop
 800a05c:	20001924 	.word	0x20001924

0800a060 <_malloc_r>:
 800a060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a064:	1ccd      	adds	r5, r1, #3
 800a066:	f025 0503 	bic.w	r5, r5, #3
 800a06a:	3508      	adds	r5, #8
 800a06c:	2d0c      	cmp	r5, #12
 800a06e:	bf38      	it	cc
 800a070:	250c      	movcc	r5, #12
 800a072:	2d00      	cmp	r5, #0
 800a074:	4606      	mov	r6, r0
 800a076:	db01      	blt.n	800a07c <_malloc_r+0x1c>
 800a078:	42a9      	cmp	r1, r5
 800a07a:	d904      	bls.n	800a086 <_malloc_r+0x26>
 800a07c:	230c      	movs	r3, #12
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	2000      	movs	r0, #0
 800a082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a15c <_malloc_r+0xfc>
 800a08a:	f000 f869 	bl	800a160 <__malloc_lock>
 800a08e:	f8d8 3000 	ldr.w	r3, [r8]
 800a092:	461c      	mov	r4, r3
 800a094:	bb44      	cbnz	r4, 800a0e8 <_malloc_r+0x88>
 800a096:	4629      	mov	r1, r5
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffbf 	bl	800a01c <sbrk_aligned>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	d158      	bne.n	800a156 <_malloc_r+0xf6>
 800a0a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a0a8:	4627      	mov	r7, r4
 800a0aa:	2f00      	cmp	r7, #0
 800a0ac:	d143      	bne.n	800a136 <_malloc_r+0xd6>
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	d04b      	beq.n	800a14a <_malloc_r+0xea>
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	eb04 0903 	add.w	r9, r4, r3
 800a0bc:	f000 fc82 	bl	800a9c4 <_sbrk_r>
 800a0c0:	4581      	cmp	r9, r0
 800a0c2:	d142      	bne.n	800a14a <_malloc_r+0xea>
 800a0c4:	6821      	ldr	r1, [r4, #0]
 800a0c6:	1a6d      	subs	r5, r5, r1
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff ffa6 	bl	800a01c <sbrk_aligned>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d03a      	beq.n	800a14a <_malloc_r+0xea>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	442b      	add	r3, r5
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	f8d8 3000 	ldr.w	r3, [r8]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	bb62      	cbnz	r2, 800a13c <_malloc_r+0xdc>
 800a0e2:	f8c8 7000 	str.w	r7, [r8]
 800a0e6:	e00f      	b.n	800a108 <_malloc_r+0xa8>
 800a0e8:	6822      	ldr	r2, [r4, #0]
 800a0ea:	1b52      	subs	r2, r2, r5
 800a0ec:	d420      	bmi.n	800a130 <_malloc_r+0xd0>
 800a0ee:	2a0b      	cmp	r2, #11
 800a0f0:	d917      	bls.n	800a122 <_malloc_r+0xc2>
 800a0f2:	1961      	adds	r1, r4, r5
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	6025      	str	r5, [r4, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	6059      	strne	r1, [r3, #4]
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	bf08      	it	eq
 800a100:	f8c8 1000 	streq.w	r1, [r8]
 800a104:	5162      	str	r2, [r4, r5]
 800a106:	604b      	str	r3, [r1, #4]
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f82f 	bl	800a16c <__malloc_unlock>
 800a10e:	f104 000b 	add.w	r0, r4, #11
 800a112:	1d23      	adds	r3, r4, #4
 800a114:	f020 0007 	bic.w	r0, r0, #7
 800a118:	1ac2      	subs	r2, r0, r3
 800a11a:	bf1c      	itt	ne
 800a11c:	1a1b      	subne	r3, r3, r0
 800a11e:	50a3      	strne	r3, [r4, r2]
 800a120:	e7af      	b.n	800a082 <_malloc_r+0x22>
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	42a3      	cmp	r3, r4
 800a126:	bf0c      	ite	eq
 800a128:	f8c8 2000 	streq.w	r2, [r8]
 800a12c:	605a      	strne	r2, [r3, #4]
 800a12e:	e7eb      	b.n	800a108 <_malloc_r+0xa8>
 800a130:	4623      	mov	r3, r4
 800a132:	6864      	ldr	r4, [r4, #4]
 800a134:	e7ae      	b.n	800a094 <_malloc_r+0x34>
 800a136:	463c      	mov	r4, r7
 800a138:	687f      	ldr	r7, [r7, #4]
 800a13a:	e7b6      	b.n	800a0aa <_malloc_r+0x4a>
 800a13c:	461a      	mov	r2, r3
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	42a3      	cmp	r3, r4
 800a142:	d1fb      	bne.n	800a13c <_malloc_r+0xdc>
 800a144:	2300      	movs	r3, #0
 800a146:	6053      	str	r3, [r2, #4]
 800a148:	e7de      	b.n	800a108 <_malloc_r+0xa8>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	4630      	mov	r0, r6
 800a150:	f000 f80c 	bl	800a16c <__malloc_unlock>
 800a154:	e794      	b.n	800a080 <_malloc_r+0x20>
 800a156:	6005      	str	r5, [r0, #0]
 800a158:	e7d6      	b.n	800a108 <_malloc_r+0xa8>
 800a15a:	bf00      	nop
 800a15c:	20001928 	.word	0x20001928

0800a160 <__malloc_lock>:
 800a160:	4801      	ldr	r0, [pc, #4]	@ (800a168 <__malloc_lock+0x8>)
 800a162:	f7ff b89e 	b.w	80092a2 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20001920 	.word	0x20001920

0800a16c <__malloc_unlock>:
 800a16c:	4801      	ldr	r0, [pc, #4]	@ (800a174 <__malloc_unlock+0x8>)
 800a16e:	f7ff b899 	b.w	80092a4 <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20001920 	.word	0x20001920

0800a178 <_Balloc>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	69c6      	ldr	r6, [r0, #28]
 800a17c:	4604      	mov	r4, r0
 800a17e:	460d      	mov	r5, r1
 800a180:	b976      	cbnz	r6, 800a1a0 <_Balloc+0x28>
 800a182:	2010      	movs	r0, #16
 800a184:	f7ff ff42 	bl	800a00c <malloc>
 800a188:	4602      	mov	r2, r0
 800a18a:	61e0      	str	r0, [r4, #28]
 800a18c:	b920      	cbnz	r0, 800a198 <_Balloc+0x20>
 800a18e:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <_Balloc+0x78>)
 800a190:	4818      	ldr	r0, [pc, #96]	@ (800a1f4 <_Balloc+0x7c>)
 800a192:	216b      	movs	r1, #107	@ 0x6b
 800a194:	f000 fc26 	bl	800a9e4 <__assert_func>
 800a198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a19c:	6006      	str	r6, [r0, #0]
 800a19e:	60c6      	str	r6, [r0, #12]
 800a1a0:	69e6      	ldr	r6, [r4, #28]
 800a1a2:	68f3      	ldr	r3, [r6, #12]
 800a1a4:	b183      	cbz	r3, 800a1c8 <_Balloc+0x50>
 800a1a6:	69e3      	ldr	r3, [r4, #28]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ae:	b9b8      	cbnz	r0, 800a1e0 <_Balloc+0x68>
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a1b6:	1d72      	adds	r2, r6, #5
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fc30 	bl	800aa20 <_calloc_r>
 800a1c0:	b160      	cbz	r0, 800a1dc <_Balloc+0x64>
 800a1c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1c6:	e00e      	b.n	800a1e6 <_Balloc+0x6e>
 800a1c8:	2221      	movs	r2, #33	@ 0x21
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fc27 	bl	800aa20 <_calloc_r>
 800a1d2:	69e3      	ldr	r3, [r4, #28]
 800a1d4:	60f0      	str	r0, [r6, #12]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e4      	bne.n	800a1a6 <_Balloc+0x2e>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ec:	e7f7      	b.n	800a1de <_Balloc+0x66>
 800a1ee:	bf00      	nop
 800a1f0:	0800c02d 	.word	0x0800c02d
 800a1f4:	0800c0ad 	.word	0x0800c0ad

0800a1f8 <_Bfree>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	69c6      	ldr	r6, [r0, #28]
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b976      	cbnz	r6, 800a220 <_Bfree+0x28>
 800a202:	2010      	movs	r0, #16
 800a204:	f7ff ff02 	bl	800a00c <malloc>
 800a208:	4602      	mov	r2, r0
 800a20a:	61e8      	str	r0, [r5, #28]
 800a20c:	b920      	cbnz	r0, 800a218 <_Bfree+0x20>
 800a20e:	4b09      	ldr	r3, [pc, #36]	@ (800a234 <_Bfree+0x3c>)
 800a210:	4809      	ldr	r0, [pc, #36]	@ (800a238 <_Bfree+0x40>)
 800a212:	218f      	movs	r1, #143	@ 0x8f
 800a214:	f000 fbe6 	bl	800a9e4 <__assert_func>
 800a218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a21c:	6006      	str	r6, [r0, #0]
 800a21e:	60c6      	str	r6, [r0, #12]
 800a220:	b13c      	cbz	r4, 800a232 <_Bfree+0x3a>
 800a222:	69eb      	ldr	r3, [r5, #28]
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a22c:	6021      	str	r1, [r4, #0]
 800a22e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a232:	bd70      	pop	{r4, r5, r6, pc}
 800a234:	0800c02d 	.word	0x0800c02d
 800a238:	0800c0ad 	.word	0x0800c0ad

0800a23c <__multadd>:
 800a23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a240:	690d      	ldr	r5, [r1, #16]
 800a242:	4607      	mov	r7, r0
 800a244:	460c      	mov	r4, r1
 800a246:	461e      	mov	r6, r3
 800a248:	f101 0c14 	add.w	ip, r1, #20
 800a24c:	2000      	movs	r0, #0
 800a24e:	f8dc 3000 	ldr.w	r3, [ip]
 800a252:	b299      	uxth	r1, r3
 800a254:	fb02 6101 	mla	r1, r2, r1, r6
 800a258:	0c1e      	lsrs	r6, r3, #16
 800a25a:	0c0b      	lsrs	r3, r1, #16
 800a25c:	fb02 3306 	mla	r3, r2, r6, r3
 800a260:	b289      	uxth	r1, r1
 800a262:	3001      	adds	r0, #1
 800a264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a268:	4285      	cmp	r5, r0
 800a26a:	f84c 1b04 	str.w	r1, [ip], #4
 800a26e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a272:	dcec      	bgt.n	800a24e <__multadd+0x12>
 800a274:	b30e      	cbz	r6, 800a2ba <__multadd+0x7e>
 800a276:	68a3      	ldr	r3, [r4, #8]
 800a278:	42ab      	cmp	r3, r5
 800a27a:	dc19      	bgt.n	800a2b0 <__multadd+0x74>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4638      	mov	r0, r7
 800a280:	3101      	adds	r1, #1
 800a282:	f7ff ff79 	bl	800a178 <_Balloc>
 800a286:	4680      	mov	r8, r0
 800a288:	b928      	cbnz	r0, 800a296 <__multadd+0x5a>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <__multadd+0x84>)
 800a28e:	480d      	ldr	r0, [pc, #52]	@ (800a2c4 <__multadd+0x88>)
 800a290:	21ba      	movs	r1, #186	@ 0xba
 800a292:	f000 fba7 	bl	800a9e4 <__assert_func>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7ff f800 	bl	80092a6 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ffa5 	bl	800a1f8 <_Bfree>
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	615e      	str	r6, [r3, #20]
 800a2b8:	6125      	str	r5, [r4, #16]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	0800c09c 	.word	0x0800c09c
 800a2c4:	0800c0ad 	.word	0x0800c0ad

0800a2c8 <__hi0bits>:
 800a2c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	bf36      	itet	cc
 800a2d0:	0403      	lslcc	r3, r0, #16
 800a2d2:	2000      	movcs	r0, #0
 800a2d4:	2010      	movcc	r0, #16
 800a2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2da:	bf3c      	itt	cc
 800a2dc:	021b      	lslcc	r3, r3, #8
 800a2de:	3008      	addcc	r0, #8
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	bf3c      	itt	cc
 800a2e6:	011b      	lslcc	r3, r3, #4
 800a2e8:	3004      	addcc	r0, #4
 800a2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ee:	bf3c      	itt	cc
 800a2f0:	009b      	lslcc	r3, r3, #2
 800a2f2:	3002      	addcc	r0, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db05      	blt.n	800a304 <__hi0bits+0x3c>
 800a2f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2fc:	f100 0001 	add.w	r0, r0, #1
 800a300:	bf08      	it	eq
 800a302:	2020      	moveq	r0, #32
 800a304:	4770      	bx	lr

0800a306 <__lo0bits>:
 800a306:	6803      	ldr	r3, [r0, #0]
 800a308:	4602      	mov	r2, r0
 800a30a:	f013 0007 	ands.w	r0, r3, #7
 800a30e:	d00b      	beq.n	800a328 <__lo0bits+0x22>
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d421      	bmi.n	800a358 <__lo0bits+0x52>
 800a314:	0798      	lsls	r0, r3, #30
 800a316:	bf49      	itett	mi
 800a318:	085b      	lsrmi	r3, r3, #1
 800a31a:	089b      	lsrpl	r3, r3, #2
 800a31c:	2001      	movmi	r0, #1
 800a31e:	6013      	strmi	r3, [r2, #0]
 800a320:	bf5c      	itt	pl
 800a322:	6013      	strpl	r3, [r2, #0]
 800a324:	2002      	movpl	r0, #2
 800a326:	4770      	bx	lr
 800a328:	b299      	uxth	r1, r3
 800a32a:	b909      	cbnz	r1, 800a330 <__lo0bits+0x2a>
 800a32c:	0c1b      	lsrs	r3, r3, #16
 800a32e:	2010      	movs	r0, #16
 800a330:	b2d9      	uxtb	r1, r3
 800a332:	b909      	cbnz	r1, 800a338 <__lo0bits+0x32>
 800a334:	3008      	adds	r0, #8
 800a336:	0a1b      	lsrs	r3, r3, #8
 800a338:	0719      	lsls	r1, r3, #28
 800a33a:	bf04      	itt	eq
 800a33c:	091b      	lsreq	r3, r3, #4
 800a33e:	3004      	addeq	r0, #4
 800a340:	0799      	lsls	r1, r3, #30
 800a342:	bf04      	itt	eq
 800a344:	089b      	lsreq	r3, r3, #2
 800a346:	3002      	addeq	r0, #2
 800a348:	07d9      	lsls	r1, r3, #31
 800a34a:	d403      	bmi.n	800a354 <__lo0bits+0x4e>
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	f100 0001 	add.w	r0, r0, #1
 800a352:	d003      	beq.n	800a35c <__lo0bits+0x56>
 800a354:	6013      	str	r3, [r2, #0]
 800a356:	4770      	bx	lr
 800a358:	2000      	movs	r0, #0
 800a35a:	4770      	bx	lr
 800a35c:	2020      	movs	r0, #32
 800a35e:	4770      	bx	lr

0800a360 <__i2b>:
 800a360:	b510      	push	{r4, lr}
 800a362:	460c      	mov	r4, r1
 800a364:	2101      	movs	r1, #1
 800a366:	f7ff ff07 	bl	800a178 <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__i2b+0x1a>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <__i2b+0x24>)
 800a370:	4805      	ldr	r0, [pc, #20]	@ (800a388 <__i2b+0x28>)
 800a372:	f240 1145 	movw	r1, #325	@ 0x145
 800a376:	f000 fb35 	bl	800a9e4 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	6144      	str	r4, [r0, #20]
 800a37e:	6103      	str	r3, [r0, #16]
 800a380:	bd10      	pop	{r4, pc}
 800a382:	bf00      	nop
 800a384:	0800c09c 	.word	0x0800c09c
 800a388:	0800c0ad 	.word	0x0800c0ad

0800a38c <__multiply>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4617      	mov	r7, r2
 800a392:	690a      	ldr	r2, [r1, #16]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	429a      	cmp	r2, r3
 800a398:	bfa8      	it	ge
 800a39a:	463b      	movge	r3, r7
 800a39c:	4689      	mov	r9, r1
 800a39e:	bfa4      	itt	ge
 800a3a0:	460f      	movge	r7, r1
 800a3a2:	4699      	movge	r9, r3
 800a3a4:	693d      	ldr	r5, [r7, #16]
 800a3a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	eb05 060a 	add.w	r6, r5, sl
 800a3b2:	42b3      	cmp	r3, r6
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	bfb8      	it	lt
 800a3b8:	3101      	addlt	r1, #1
 800a3ba:	f7ff fedd 	bl	800a178 <_Balloc>
 800a3be:	b930      	cbnz	r0, 800a3ce <__multiply+0x42>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	4b41      	ldr	r3, [pc, #260]	@ (800a4c8 <__multiply+0x13c>)
 800a3c4:	4841      	ldr	r0, [pc, #260]	@ (800a4cc <__multiply+0x140>)
 800a3c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3ca:	f000 fb0b 	bl	800a9e4 <__assert_func>
 800a3ce:	f100 0414 	add.w	r4, r0, #20
 800a3d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4573      	cmp	r3, lr
 800a3dc:	d320      	bcc.n	800a420 <__multiply+0x94>
 800a3de:	f107 0814 	add.w	r8, r7, #20
 800a3e2:	f109 0114 	add.w	r1, r9, #20
 800a3e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a3ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a3ee:	9302      	str	r3, [sp, #8]
 800a3f0:	1beb      	subs	r3, r5, r7
 800a3f2:	3b15      	subs	r3, #21
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	3715      	adds	r7, #21
 800a3fc:	42bd      	cmp	r5, r7
 800a3fe:	bf38      	it	cc
 800a400:	2304      	movcc	r3, #4
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	9b02      	ldr	r3, [sp, #8]
 800a406:	9103      	str	r1, [sp, #12]
 800a408:	428b      	cmp	r3, r1
 800a40a:	d80c      	bhi.n	800a426 <__multiply+0x9a>
 800a40c:	2e00      	cmp	r6, #0
 800a40e:	dd03      	ble.n	800a418 <__multiply+0x8c>
 800a410:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a414:	2b00      	cmp	r3, #0
 800a416:	d055      	beq.n	800a4c4 <__multiply+0x138>
 800a418:	6106      	str	r6, [r0, #16]
 800a41a:	b005      	add	sp, #20
 800a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a420:	f843 2b04 	str.w	r2, [r3], #4
 800a424:	e7d9      	b.n	800a3da <__multiply+0x4e>
 800a426:	f8b1 a000 	ldrh.w	sl, [r1]
 800a42a:	f1ba 0f00 	cmp.w	sl, #0
 800a42e:	d01f      	beq.n	800a470 <__multiply+0xe4>
 800a430:	46c4      	mov	ip, r8
 800a432:	46a1      	mov	r9, r4
 800a434:	2700      	movs	r7, #0
 800a436:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a43a:	f8d9 3000 	ldr.w	r3, [r9]
 800a43e:	fa1f fb82 	uxth.w	fp, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	fb0a 330b 	mla	r3, sl, fp, r3
 800a448:	443b      	add	r3, r7
 800a44a:	f8d9 7000 	ldr.w	r7, [r9]
 800a44e:	0c12      	lsrs	r2, r2, #16
 800a450:	0c3f      	lsrs	r7, r7, #16
 800a452:	fb0a 7202 	mla	r2, sl, r2, r7
 800a456:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a460:	4565      	cmp	r5, ip
 800a462:	f849 3b04 	str.w	r3, [r9], #4
 800a466:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a46a:	d8e4      	bhi.n	800a436 <__multiply+0xaa>
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	50e7      	str	r7, [r4, r3]
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a476:	3104      	adds	r1, #4
 800a478:	f1b9 0f00 	cmp.w	r9, #0
 800a47c:	d020      	beq.n	800a4c0 <__multiply+0x134>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	4647      	mov	r7, r8
 800a482:	46a4      	mov	ip, r4
 800a484:	f04f 0a00 	mov.w	sl, #0
 800a488:	f8b7 b000 	ldrh.w	fp, [r7]
 800a48c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a490:	fb09 220b 	mla	r2, r9, fp, r2
 800a494:	4452      	add	r2, sl
 800a496:	b29b      	uxth	r3, r3
 800a498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a49c:	f84c 3b04 	str.w	r3, [ip], #4
 800a4a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4ac:	fb09 330a 	mla	r3, r9, sl, r3
 800a4b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4b4:	42bd      	cmp	r5, r7
 800a4b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4ba:	d8e5      	bhi.n	800a488 <__multiply+0xfc>
 800a4bc:	9a01      	ldr	r2, [sp, #4]
 800a4be:	50a3      	str	r3, [r4, r2]
 800a4c0:	3404      	adds	r4, #4
 800a4c2:	e79f      	b.n	800a404 <__multiply+0x78>
 800a4c4:	3e01      	subs	r6, #1
 800a4c6:	e7a1      	b.n	800a40c <__multiply+0x80>
 800a4c8:	0800c09c 	.word	0x0800c09c
 800a4cc:	0800c0ad 	.word	0x0800c0ad

0800a4d0 <__pow5mult>:
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	4615      	mov	r5, r2
 800a4d6:	f012 0203 	ands.w	r2, r2, #3
 800a4da:	4607      	mov	r7, r0
 800a4dc:	460e      	mov	r6, r1
 800a4de:	d007      	beq.n	800a4f0 <__pow5mult+0x20>
 800a4e0:	4c25      	ldr	r4, [pc, #148]	@ (800a578 <__pow5mult+0xa8>)
 800a4e2:	3a01      	subs	r2, #1
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ea:	f7ff fea7 	bl	800a23c <__multadd>
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	10ad      	asrs	r5, r5, #2
 800a4f2:	d03d      	beq.n	800a570 <__pow5mult+0xa0>
 800a4f4:	69fc      	ldr	r4, [r7, #28]
 800a4f6:	b97c      	cbnz	r4, 800a518 <__pow5mult+0x48>
 800a4f8:	2010      	movs	r0, #16
 800a4fa:	f7ff fd87 	bl	800a00c <malloc>
 800a4fe:	4602      	mov	r2, r0
 800a500:	61f8      	str	r0, [r7, #28]
 800a502:	b928      	cbnz	r0, 800a510 <__pow5mult+0x40>
 800a504:	4b1d      	ldr	r3, [pc, #116]	@ (800a57c <__pow5mult+0xac>)
 800a506:	481e      	ldr	r0, [pc, #120]	@ (800a580 <__pow5mult+0xb0>)
 800a508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a50c:	f000 fa6a 	bl	800a9e4 <__assert_func>
 800a510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a514:	6004      	str	r4, [r0, #0]
 800a516:	60c4      	str	r4, [r0, #12]
 800a518:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a51c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a520:	b94c      	cbnz	r4, 800a536 <__pow5mult+0x66>
 800a522:	f240 2171 	movw	r1, #625	@ 0x271
 800a526:	4638      	mov	r0, r7
 800a528:	f7ff ff1a 	bl	800a360 <__i2b>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a532:	4604      	mov	r4, r0
 800a534:	6003      	str	r3, [r0, #0]
 800a536:	f04f 0900 	mov.w	r9, #0
 800a53a:	07eb      	lsls	r3, r5, #31
 800a53c:	d50a      	bpl.n	800a554 <__pow5mult+0x84>
 800a53e:	4631      	mov	r1, r6
 800a540:	4622      	mov	r2, r4
 800a542:	4638      	mov	r0, r7
 800a544:	f7ff ff22 	bl	800a38c <__multiply>
 800a548:	4631      	mov	r1, r6
 800a54a:	4680      	mov	r8, r0
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff fe53 	bl	800a1f8 <_Bfree>
 800a552:	4646      	mov	r6, r8
 800a554:	106d      	asrs	r5, r5, #1
 800a556:	d00b      	beq.n	800a570 <__pow5mult+0xa0>
 800a558:	6820      	ldr	r0, [r4, #0]
 800a55a:	b938      	cbnz	r0, 800a56c <__pow5mult+0x9c>
 800a55c:	4622      	mov	r2, r4
 800a55e:	4621      	mov	r1, r4
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ff13 	bl	800a38c <__multiply>
 800a566:	6020      	str	r0, [r4, #0]
 800a568:	f8c0 9000 	str.w	r9, [r0]
 800a56c:	4604      	mov	r4, r0
 800a56e:	e7e4      	b.n	800a53a <__pow5mult+0x6a>
 800a570:	4630      	mov	r0, r6
 800a572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a576:	bf00      	nop
 800a578:	0800c160 	.word	0x0800c160
 800a57c:	0800c02d 	.word	0x0800c02d
 800a580:	0800c0ad 	.word	0x0800c0ad

0800a584 <__lshift>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	6849      	ldr	r1, [r1, #4]
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	4607      	mov	r7, r0
 800a596:	4691      	mov	r9, r2
 800a598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a59c:	f108 0601 	add.w	r6, r8, #1
 800a5a0:	42b3      	cmp	r3, r6
 800a5a2:	db0b      	blt.n	800a5bc <__lshift+0x38>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	f7ff fde7 	bl	800a178 <_Balloc>
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	b948      	cbnz	r0, 800a5c2 <__lshift+0x3e>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	4b28      	ldr	r3, [pc, #160]	@ (800a654 <__lshift+0xd0>)
 800a5b2:	4829      	ldr	r0, [pc, #164]	@ (800a658 <__lshift+0xd4>)
 800a5b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5b8:	f000 fa14 	bl	800a9e4 <__assert_func>
 800a5bc:	3101      	adds	r1, #1
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__lshift+0x1c>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f100 0114 	add.w	r1, r0, #20
 800a5c8:	f100 0210 	add.w	r2, r0, #16
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	4553      	cmp	r3, sl
 800a5d0:	db33      	blt.n	800a63a <__lshift+0xb6>
 800a5d2:	6920      	ldr	r0, [r4, #16]
 800a5d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5d8:	f104 0314 	add.w	r3, r4, #20
 800a5dc:	f019 091f 	ands.w	r9, r9, #31
 800a5e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5e8:	d02b      	beq.n	800a642 <__lshift+0xbe>
 800a5ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a5ee:	468a      	mov	sl, r1
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	fa00 f009 	lsl.w	r0, r0, r9
 800a5f8:	4310      	orrs	r0, r2
 800a5fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a5fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a602:	459c      	cmp	ip, r3
 800a604:	fa22 f20e 	lsr.w	r2, r2, lr
 800a608:	d8f3      	bhi.n	800a5f2 <__lshift+0x6e>
 800a60a:	ebac 0304 	sub.w	r3, ip, r4
 800a60e:	3b15      	subs	r3, #21
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	3304      	adds	r3, #4
 800a616:	f104 0015 	add.w	r0, r4, #21
 800a61a:	4560      	cmp	r0, ip
 800a61c:	bf88      	it	hi
 800a61e:	2304      	movhi	r3, #4
 800a620:	50ca      	str	r2, [r1, r3]
 800a622:	b10a      	cbz	r2, 800a628 <__lshift+0xa4>
 800a624:	f108 0602 	add.w	r6, r8, #2
 800a628:	3e01      	subs	r6, #1
 800a62a:	4638      	mov	r0, r7
 800a62c:	612e      	str	r6, [r5, #16]
 800a62e:	4621      	mov	r1, r4
 800a630:	f7ff fde2 	bl	800a1f8 <_Bfree>
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a63e:	3301      	adds	r3, #1
 800a640:	e7c5      	b.n	800a5ce <__lshift+0x4a>
 800a642:	3904      	subs	r1, #4
 800a644:	f853 2b04 	ldr.w	r2, [r3], #4
 800a648:	f841 2f04 	str.w	r2, [r1, #4]!
 800a64c:	459c      	cmp	ip, r3
 800a64e:	d8f9      	bhi.n	800a644 <__lshift+0xc0>
 800a650:	e7ea      	b.n	800a628 <__lshift+0xa4>
 800a652:	bf00      	nop
 800a654:	0800c09c 	.word	0x0800c09c
 800a658:	0800c0ad 	.word	0x0800c0ad

0800a65c <__mcmp>:
 800a65c:	690a      	ldr	r2, [r1, #16]
 800a65e:	4603      	mov	r3, r0
 800a660:	6900      	ldr	r0, [r0, #16]
 800a662:	1a80      	subs	r0, r0, r2
 800a664:	b530      	push	{r4, r5, lr}
 800a666:	d10e      	bne.n	800a686 <__mcmp+0x2a>
 800a668:	3314      	adds	r3, #20
 800a66a:	3114      	adds	r1, #20
 800a66c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a67c:	4295      	cmp	r5, r2
 800a67e:	d003      	beq.n	800a688 <__mcmp+0x2c>
 800a680:	d205      	bcs.n	800a68e <__mcmp+0x32>
 800a682:	f04f 30ff 	mov.w	r0, #4294967295
 800a686:	bd30      	pop	{r4, r5, pc}
 800a688:	42a3      	cmp	r3, r4
 800a68a:	d3f3      	bcc.n	800a674 <__mcmp+0x18>
 800a68c:	e7fb      	b.n	800a686 <__mcmp+0x2a>
 800a68e:	2001      	movs	r0, #1
 800a690:	e7f9      	b.n	800a686 <__mcmp+0x2a>
	...

0800a694 <__mdiff>:
 800a694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	4689      	mov	r9, r1
 800a69a:	4606      	mov	r6, r0
 800a69c:	4611      	mov	r1, r2
 800a69e:	4648      	mov	r0, r9
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	f7ff ffdb 	bl	800a65c <__mcmp>
 800a6a6:	1e05      	subs	r5, r0, #0
 800a6a8:	d112      	bne.n	800a6d0 <__mdiff+0x3c>
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff fd63 	bl	800a178 <_Balloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <__mdiff+0x2e>
 800a6b6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7b4 <__mdiff+0x120>)
 800a6b8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6bc:	483e      	ldr	r0, [pc, #248]	@ (800a7b8 <__mdiff+0x124>)
 800a6be:	f000 f991 	bl	800a9e4 <__assert_func>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	b003      	add	sp, #12
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	bfbc      	itt	lt
 800a6d2:	464b      	movlt	r3, r9
 800a6d4:	46a1      	movlt	r9, r4
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6dc:	bfba      	itte	lt
 800a6de:	461c      	movlt	r4, r3
 800a6e0:	2501      	movlt	r5, #1
 800a6e2:	2500      	movge	r5, #0
 800a6e4:	f7ff fd48 	bl	800a178 <_Balloc>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	b918      	cbnz	r0, 800a6f4 <__mdiff+0x60>
 800a6ec:	4b31      	ldr	r3, [pc, #196]	@ (800a7b4 <__mdiff+0x120>)
 800a6ee:	f240 2145 	movw	r1, #581	@ 0x245
 800a6f2:	e7e3      	b.n	800a6bc <__mdiff+0x28>
 800a6f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6f8:	6926      	ldr	r6, [r4, #16]
 800a6fa:	60c5      	str	r5, [r0, #12]
 800a6fc:	f109 0310 	add.w	r3, r9, #16
 800a700:	f109 0514 	add.w	r5, r9, #20
 800a704:	f104 0e14 	add.w	lr, r4, #20
 800a708:	f100 0b14 	add.w	fp, r0, #20
 800a70c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a710:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	46d9      	mov	r9, fp
 800a718:	f04f 0c00 	mov.w	ip, #0
 800a71c:	9b01      	ldr	r3, [sp, #4]
 800a71e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a722:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	fa1f f38a 	uxth.w	r3, sl
 800a72c:	4619      	mov	r1, r3
 800a72e:	b283      	uxth	r3, r0
 800a730:	1acb      	subs	r3, r1, r3
 800a732:	0c00      	lsrs	r0, r0, #16
 800a734:	4463      	add	r3, ip
 800a736:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a73a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a744:	4576      	cmp	r6, lr
 800a746:	f849 3b04 	str.w	r3, [r9], #4
 800a74a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a74e:	d8e5      	bhi.n	800a71c <__mdiff+0x88>
 800a750:	1b33      	subs	r3, r6, r4
 800a752:	3b15      	subs	r3, #21
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	3415      	adds	r4, #21
 800a75a:	3304      	adds	r3, #4
 800a75c:	42a6      	cmp	r6, r4
 800a75e:	bf38      	it	cc
 800a760:	2304      	movcc	r3, #4
 800a762:	441d      	add	r5, r3
 800a764:	445b      	add	r3, fp
 800a766:	461e      	mov	r6, r3
 800a768:	462c      	mov	r4, r5
 800a76a:	4544      	cmp	r4, r8
 800a76c:	d30e      	bcc.n	800a78c <__mdiff+0xf8>
 800a76e:	f108 0103 	add.w	r1, r8, #3
 800a772:	1b49      	subs	r1, r1, r5
 800a774:	f021 0103 	bic.w	r1, r1, #3
 800a778:	3d03      	subs	r5, #3
 800a77a:	45a8      	cmp	r8, r5
 800a77c:	bf38      	it	cc
 800a77e:	2100      	movcc	r1, #0
 800a780:	440b      	add	r3, r1
 800a782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a786:	b191      	cbz	r1, 800a7ae <__mdiff+0x11a>
 800a788:	6117      	str	r7, [r2, #16]
 800a78a:	e79d      	b.n	800a6c8 <__mdiff+0x34>
 800a78c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a790:	46e6      	mov	lr, ip
 800a792:	0c08      	lsrs	r0, r1, #16
 800a794:	fa1c fc81 	uxtah	ip, ip, r1
 800a798:	4471      	add	r1, lr
 800a79a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a79e:	b289      	uxth	r1, r1
 800a7a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7a4:	f846 1b04 	str.w	r1, [r6], #4
 800a7a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7ac:	e7dd      	b.n	800a76a <__mdiff+0xd6>
 800a7ae:	3f01      	subs	r7, #1
 800a7b0:	e7e7      	b.n	800a782 <__mdiff+0xee>
 800a7b2:	bf00      	nop
 800a7b4:	0800c09c 	.word	0x0800c09c
 800a7b8:	0800c0ad 	.word	0x0800c0ad

0800a7bc <__d2b>:
 800a7bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	ec59 8b10 	vmov	r8, r9, d0
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	f7ff fcd5 	bl	800a178 <_Balloc>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	b930      	cbnz	r0, 800a7e0 <__d2b+0x24>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4b23      	ldr	r3, [pc, #140]	@ (800a864 <__d2b+0xa8>)
 800a7d6:	4824      	ldr	r0, [pc, #144]	@ (800a868 <__d2b+0xac>)
 800a7d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7dc:	f000 f902 	bl	800a9e4 <__assert_func>
 800a7e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7e8:	b10d      	cbz	r5, 800a7ee <__d2b+0x32>
 800a7ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ee:	9301      	str	r3, [sp, #4]
 800a7f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a7f4:	d023      	beq.n	800a83e <__d2b+0x82>
 800a7f6:	4668      	mov	r0, sp
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	f7ff fd84 	bl	800a306 <__lo0bits>
 800a7fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a802:	b1d0      	cbz	r0, 800a83a <__d2b+0x7e>
 800a804:	f1c0 0320 	rsb	r3, r0, #32
 800a808:	fa02 f303 	lsl.w	r3, r2, r3
 800a80c:	430b      	orrs	r3, r1
 800a80e:	40c2      	lsrs	r2, r0
 800a810:	6163      	str	r3, [r4, #20]
 800a812:	9201      	str	r2, [sp, #4]
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	61a3      	str	r3, [r4, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bf0c      	ite	eq
 800a81c:	2201      	moveq	r2, #1
 800a81e:	2202      	movne	r2, #2
 800a820:	6122      	str	r2, [r4, #16]
 800a822:	b1a5      	cbz	r5, 800a84e <__d2b+0x92>
 800a824:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a828:	4405      	add	r5, r0
 800a82a:	603d      	str	r5, [r7, #0]
 800a82c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a830:	6030      	str	r0, [r6, #0]
 800a832:	4620      	mov	r0, r4
 800a834:	b003      	add	sp, #12
 800a836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a83a:	6161      	str	r1, [r4, #20]
 800a83c:	e7ea      	b.n	800a814 <__d2b+0x58>
 800a83e:	a801      	add	r0, sp, #4
 800a840:	f7ff fd61 	bl	800a306 <__lo0bits>
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	6163      	str	r3, [r4, #20]
 800a848:	3020      	adds	r0, #32
 800a84a:	2201      	movs	r2, #1
 800a84c:	e7e8      	b.n	800a820 <__d2b+0x64>
 800a84e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a852:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a856:	6038      	str	r0, [r7, #0]
 800a858:	6918      	ldr	r0, [r3, #16]
 800a85a:	f7ff fd35 	bl	800a2c8 <__hi0bits>
 800a85e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a862:	e7e5      	b.n	800a830 <__d2b+0x74>
 800a864:	0800c09c 	.word	0x0800c09c
 800a868:	0800c0ad 	.word	0x0800c0ad

0800a86c <__sflush_r>:
 800a86c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	0716      	lsls	r6, r2, #28
 800a876:	4605      	mov	r5, r0
 800a878:	460c      	mov	r4, r1
 800a87a:	d454      	bmi.n	800a926 <__sflush_r+0xba>
 800a87c:	684b      	ldr	r3, [r1, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dc02      	bgt.n	800a888 <__sflush_r+0x1c>
 800a882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a884:	2b00      	cmp	r3, #0
 800a886:	dd48      	ble.n	800a91a <__sflush_r+0xae>
 800a888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	d045      	beq.n	800a91a <__sflush_r+0xae>
 800a88e:	2300      	movs	r3, #0
 800a890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a894:	682f      	ldr	r7, [r5, #0]
 800a896:	6a21      	ldr	r1, [r4, #32]
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	d030      	beq.n	800a8fe <__sflush_r+0x92>
 800a89c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	0759      	lsls	r1, r3, #29
 800a8a2:	d505      	bpl.n	800a8b0 <__sflush_r+0x44>
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	1ad2      	subs	r2, r2, r3
 800a8a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8aa:	b10b      	cbz	r3, 800a8b0 <__sflush_r+0x44>
 800a8ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8b4:	6a21      	ldr	r1, [r4, #32]
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b0      	blx	r6
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	d106      	bne.n	800a8ce <__sflush_r+0x62>
 800a8c0:	6829      	ldr	r1, [r5, #0]
 800a8c2:	291d      	cmp	r1, #29
 800a8c4:	d82b      	bhi.n	800a91e <__sflush_r+0xb2>
 800a8c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a970 <__sflush_r+0x104>)
 800a8c8:	40ca      	lsrs	r2, r1
 800a8ca:	07d6      	lsls	r6, r2, #31
 800a8cc:	d527      	bpl.n	800a91e <__sflush_r+0xb2>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	6062      	str	r2, [r4, #4]
 800a8d2:	04d9      	lsls	r1, r3, #19
 800a8d4:	6922      	ldr	r2, [r4, #16]
 800a8d6:	6022      	str	r2, [r4, #0]
 800a8d8:	d504      	bpl.n	800a8e4 <__sflush_r+0x78>
 800a8da:	1c42      	adds	r2, r0, #1
 800a8dc:	d101      	bne.n	800a8e2 <__sflush_r+0x76>
 800a8de:	682b      	ldr	r3, [r5, #0]
 800a8e0:	b903      	cbnz	r3, 800a8e4 <__sflush_r+0x78>
 800a8e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8e6:	602f      	str	r7, [r5, #0]
 800a8e8:	b1b9      	cbz	r1, 800a91a <__sflush_r+0xae>
 800a8ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ee:	4299      	cmp	r1, r3
 800a8f0:	d002      	beq.n	800a8f8 <__sflush_r+0x8c>
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f7ff fb40 	bl	8009f78 <_free_r>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8fc:	e00d      	b.n	800a91a <__sflush_r+0xae>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4628      	mov	r0, r5
 800a902:	47b0      	blx	r6
 800a904:	4602      	mov	r2, r0
 800a906:	1c50      	adds	r0, r2, #1
 800a908:	d1c9      	bne.n	800a89e <__sflush_r+0x32>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0c6      	beq.n	800a89e <__sflush_r+0x32>
 800a910:	2b1d      	cmp	r3, #29
 800a912:	d001      	beq.n	800a918 <__sflush_r+0xac>
 800a914:	2b16      	cmp	r3, #22
 800a916:	d11e      	bne.n	800a956 <__sflush_r+0xea>
 800a918:	602f      	str	r7, [r5, #0]
 800a91a:	2000      	movs	r0, #0
 800a91c:	e022      	b.n	800a964 <__sflush_r+0xf8>
 800a91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a922:	b21b      	sxth	r3, r3
 800a924:	e01b      	b.n	800a95e <__sflush_r+0xf2>
 800a926:	690f      	ldr	r7, [r1, #16]
 800a928:	2f00      	cmp	r7, #0
 800a92a:	d0f6      	beq.n	800a91a <__sflush_r+0xae>
 800a92c:	0793      	lsls	r3, r2, #30
 800a92e:	680e      	ldr	r6, [r1, #0]
 800a930:	bf08      	it	eq
 800a932:	694b      	ldreq	r3, [r1, #20]
 800a934:	600f      	str	r7, [r1, #0]
 800a936:	bf18      	it	ne
 800a938:	2300      	movne	r3, #0
 800a93a:	eba6 0807 	sub.w	r8, r6, r7
 800a93e:	608b      	str	r3, [r1, #8]
 800a940:	f1b8 0f00 	cmp.w	r8, #0
 800a944:	dde9      	ble.n	800a91a <__sflush_r+0xae>
 800a946:	6a21      	ldr	r1, [r4, #32]
 800a948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a94a:	4643      	mov	r3, r8
 800a94c:	463a      	mov	r2, r7
 800a94e:	4628      	mov	r0, r5
 800a950:	47b0      	blx	r6
 800a952:	2800      	cmp	r0, #0
 800a954:	dc08      	bgt.n	800a968 <__sflush_r+0xfc>
 800a956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95e:	81a3      	strh	r3, [r4, #12]
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	4407      	add	r7, r0
 800a96a:	eba8 0800 	sub.w	r8, r8, r0
 800a96e:	e7e7      	b.n	800a940 <__sflush_r+0xd4>
 800a970:	20400001 	.word	0x20400001

0800a974 <_fflush_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	690b      	ldr	r3, [r1, #16]
 800a978:	4605      	mov	r5, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	b913      	cbnz	r3, 800a984 <_fflush_r+0x10>
 800a97e:	2500      	movs	r5, #0
 800a980:	4628      	mov	r0, r5
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	b118      	cbz	r0, 800a98e <_fflush_r+0x1a>
 800a986:	6a03      	ldr	r3, [r0, #32]
 800a988:	b90b      	cbnz	r3, 800a98e <_fflush_r+0x1a>
 800a98a:	f7fe fb27 	bl	8008fdc <__sinit>
 800a98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0f3      	beq.n	800a97e <_fflush_r+0xa>
 800a996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a998:	07d0      	lsls	r0, r2, #31
 800a99a:	d404      	bmi.n	800a9a6 <_fflush_r+0x32>
 800a99c:	0599      	lsls	r1, r3, #22
 800a99e:	d402      	bmi.n	800a9a6 <_fflush_r+0x32>
 800a9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9a2:	f7fe fc7e 	bl	80092a2 <__retarget_lock_acquire_recursive>
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f7ff ff5f 	bl	800a86c <__sflush_r>
 800a9ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9b0:	07da      	lsls	r2, r3, #31
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	d4e4      	bmi.n	800a980 <_fflush_r+0xc>
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	059b      	lsls	r3, r3, #22
 800a9ba:	d4e1      	bmi.n	800a980 <_fflush_r+0xc>
 800a9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9be:	f7fe fc71 	bl	80092a4 <__retarget_lock_release_recursive>
 800a9c2:	e7dd      	b.n	800a980 <_fflush_r+0xc>

0800a9c4 <_sbrk_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d06      	ldr	r5, [pc, #24]	@ (800a9e0 <_sbrk_r+0x1c>)
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	4608      	mov	r0, r1
 800a9ce:	602b      	str	r3, [r5, #0]
 800a9d0:	f7f7 f9e6 	bl	8001da0 <_sbrk>
 800a9d4:	1c43      	adds	r3, r0, #1
 800a9d6:	d102      	bne.n	800a9de <_sbrk_r+0x1a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b103      	cbz	r3, 800a9de <_sbrk_r+0x1a>
 800a9dc:	6023      	str	r3, [r4, #0]
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	2000191c 	.word	0x2000191c

0800a9e4 <__assert_func>:
 800a9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4b09      	ldr	r3, [pc, #36]	@ (800aa10 <__assert_func+0x2c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	68d8      	ldr	r0, [r3, #12]
 800a9f2:	b14c      	cbz	r4, 800aa08 <__assert_func+0x24>
 800a9f4:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <__assert_func+0x30>)
 800a9f6:	9100      	str	r1, [sp, #0]
 800a9f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9fc:	4906      	ldr	r1, [pc, #24]	@ (800aa18 <__assert_func+0x34>)
 800a9fe:	462b      	mov	r3, r5
 800aa00:	f000 f842 	bl	800aa88 <fiprintf>
 800aa04:	f000 f852 	bl	800aaac <abort>
 800aa08:	4b04      	ldr	r3, [pc, #16]	@ (800aa1c <__assert_func+0x38>)
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	e7f3      	b.n	800a9f6 <__assert_func+0x12>
 800aa0e:	bf00      	nop
 800aa10:	2000001c 	.word	0x2000001c
 800aa14:	0800c110 	.word	0x0800c110
 800aa18:	0800c11d 	.word	0x0800c11d
 800aa1c:	0800c14b 	.word	0x0800c14b

0800aa20 <_calloc_r>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	fba1 5402 	umull	r5, r4, r1, r2
 800aa26:	b934      	cbnz	r4, 800aa36 <_calloc_r+0x16>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7ff fb19 	bl	800a060 <_malloc_r>
 800aa2e:	4606      	mov	r6, r0
 800aa30:	b928      	cbnz	r0, 800aa3e <_calloc_r+0x1e>
 800aa32:	4630      	mov	r0, r6
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	220c      	movs	r2, #12
 800aa38:	6002      	str	r2, [r0, #0]
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	e7f9      	b.n	800aa32 <_calloc_r+0x12>
 800aa3e:	462a      	mov	r2, r5
 800aa40:	4621      	mov	r1, r4
 800aa42:	f7fe fb44 	bl	80090ce <memset>
 800aa46:	e7f4      	b.n	800aa32 <_calloc_r+0x12>

0800aa48 <__ascii_mbtowc>:
 800aa48:	b082      	sub	sp, #8
 800aa4a:	b901      	cbnz	r1, 800aa4e <__ascii_mbtowc+0x6>
 800aa4c:	a901      	add	r1, sp, #4
 800aa4e:	b142      	cbz	r2, 800aa62 <__ascii_mbtowc+0x1a>
 800aa50:	b14b      	cbz	r3, 800aa66 <__ascii_mbtowc+0x1e>
 800aa52:	7813      	ldrb	r3, [r2, #0]
 800aa54:	600b      	str	r3, [r1, #0]
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	1e10      	subs	r0, r2, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	2001      	movne	r0, #1
 800aa5e:	b002      	add	sp, #8
 800aa60:	4770      	bx	lr
 800aa62:	4610      	mov	r0, r2
 800aa64:	e7fb      	b.n	800aa5e <__ascii_mbtowc+0x16>
 800aa66:	f06f 0001 	mvn.w	r0, #1
 800aa6a:	e7f8      	b.n	800aa5e <__ascii_mbtowc+0x16>

0800aa6c <__ascii_wctomb>:
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	b141      	cbz	r1, 800aa84 <__ascii_wctomb+0x18>
 800aa72:	2aff      	cmp	r2, #255	@ 0xff
 800aa74:	d904      	bls.n	800aa80 <__ascii_wctomb+0x14>
 800aa76:	228a      	movs	r2, #138	@ 0x8a
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7e:	4770      	bx	lr
 800aa80:	700a      	strb	r2, [r1, #0]
 800aa82:	2001      	movs	r0, #1
 800aa84:	4770      	bx	lr
	...

0800aa88 <fiprintf>:
 800aa88:	b40e      	push	{r1, r2, r3}
 800aa8a:	b503      	push	{r0, r1, lr}
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	ab03      	add	r3, sp, #12
 800aa90:	4805      	ldr	r0, [pc, #20]	@ (800aaa8 <fiprintf+0x20>)
 800aa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa96:	6800      	ldr	r0, [r0, #0]
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f000 f837 	bl	800ab0c <_vfiprintf_r>
 800aa9e:	b002      	add	sp, #8
 800aaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaa4:	b003      	add	sp, #12
 800aaa6:	4770      	bx	lr
 800aaa8:	2000001c 	.word	0x2000001c

0800aaac <abort>:
 800aaac:	b508      	push	{r3, lr}
 800aaae:	2006      	movs	r0, #6
 800aab0:	f000 fa00 	bl	800aeb4 <raise>
 800aab4:	2001      	movs	r0, #1
 800aab6:	f7f7 f917 	bl	8001ce8 <_exit>

0800aaba <__sfputc_r>:
 800aaba:	6893      	ldr	r3, [r2, #8]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	b410      	push	{r4}
 800aac2:	6093      	str	r3, [r2, #8]
 800aac4:	da08      	bge.n	800aad8 <__sfputc_r+0x1e>
 800aac6:	6994      	ldr	r4, [r2, #24]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	db01      	blt.n	800aad0 <__sfputc_r+0x16>
 800aacc:	290a      	cmp	r1, #10
 800aace:	d103      	bne.n	800aad8 <__sfputc_r+0x1e>
 800aad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad4:	f000 b932 	b.w	800ad3c <__swbuf_r>
 800aad8:	6813      	ldr	r3, [r2, #0]
 800aada:	1c58      	adds	r0, r3, #1
 800aadc:	6010      	str	r0, [r2, #0]
 800aade:	7019      	strb	r1, [r3, #0]
 800aae0:	4608      	mov	r0, r1
 800aae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <__sfputs_r>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	4614      	mov	r4, r2
 800aaf0:	18d5      	adds	r5, r2, r3
 800aaf2:	42ac      	cmp	r4, r5
 800aaf4:	d101      	bne.n	800aafa <__sfputs_r+0x12>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	e007      	b.n	800ab0a <__sfputs_r+0x22>
 800aafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafe:	463a      	mov	r2, r7
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff ffda 	bl	800aaba <__sfputc_r>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	d1f3      	bne.n	800aaf2 <__sfputs_r+0xa>
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab0c <_vfiprintf_r>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	460d      	mov	r5, r1
 800ab12:	b09d      	sub	sp, #116	@ 0x74
 800ab14:	4614      	mov	r4, r2
 800ab16:	4698      	mov	r8, r3
 800ab18:	4606      	mov	r6, r0
 800ab1a:	b118      	cbz	r0, 800ab24 <_vfiprintf_r+0x18>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <_vfiprintf_r+0x18>
 800ab20:	f7fe fa5c 	bl	8008fdc <__sinit>
 800ab24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	d405      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_vfiprintf_r+0x2a>
 800ab30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab32:	f7fe fbb6 	bl	80092a2 <__retarget_lock_acquire_recursive>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	071b      	lsls	r3, r3, #28
 800ab3a:	d501      	bpl.n	800ab40 <_vfiprintf_r+0x34>
 800ab3c:	692b      	ldr	r3, [r5, #16]
 800ab3e:	b99b      	cbnz	r3, 800ab68 <_vfiprintf_r+0x5c>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4630      	mov	r0, r6
 800ab44:	f000 f938 	bl	800adb8 <__swsetup_r>
 800ab48:	b170      	cbz	r0, 800ab68 <_vfiprintf_r+0x5c>
 800ab4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4c:	07dc      	lsls	r4, r3, #31
 800ab4e:	d504      	bpl.n	800ab5a <_vfiprintf_r+0x4e>
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	b01d      	add	sp, #116	@ 0x74
 800ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	0598      	lsls	r0, r3, #22
 800ab5e:	d4f7      	bmi.n	800ab50 <_vfiprintf_r+0x44>
 800ab60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab62:	f7fe fb9f 	bl	80092a4 <__retarget_lock_release_recursive>
 800ab66:	e7f3      	b.n	800ab50 <_vfiprintf_r+0x44>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab76:	2330      	movs	r3, #48	@ 0x30
 800ab78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad28 <_vfiprintf_r+0x21c>
 800ab7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab80:	f04f 0901 	mov.w	r9, #1
 800ab84:	4623      	mov	r3, r4
 800ab86:	469a      	mov	sl, r3
 800ab88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8c:	b10a      	cbz	r2, 800ab92 <_vfiprintf_r+0x86>
 800ab8e:	2a25      	cmp	r2, #37	@ 0x25
 800ab90:	d1f9      	bne.n	800ab86 <_vfiprintf_r+0x7a>
 800ab92:	ebba 0b04 	subs.w	fp, sl, r4
 800ab96:	d00b      	beq.n	800abb0 <_vfiprintf_r+0xa4>
 800ab98:	465b      	mov	r3, fp
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ffa2 	bl	800aae8 <__sfputs_r>
 800aba4:	3001      	adds	r0, #1
 800aba6:	f000 80a7 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800abaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abac:	445a      	add	r2, fp
 800abae:	9209      	str	r2, [sp, #36]	@ 0x24
 800abb0:	f89a 3000 	ldrb.w	r3, [sl]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 809f 	beq.w	800acf8 <_vfiprintf_r+0x1ec>
 800abba:	2300      	movs	r3, #0
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc4:	f10a 0a01 	add.w	sl, sl, #1
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd2:	4654      	mov	r4, sl
 800abd4:	2205      	movs	r2, #5
 800abd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abda:	4853      	ldr	r0, [pc, #332]	@ (800ad28 <_vfiprintf_r+0x21c>)
 800abdc:	f7f5 fb08 	bl	80001f0 <memchr>
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	b9d8      	cbnz	r0, 800ac1c <_vfiprintf_r+0x110>
 800abe4:	06d1      	lsls	r1, r2, #27
 800abe6:	bf44      	itt	mi
 800abe8:	2320      	movmi	r3, #32
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abee:	0713      	lsls	r3, r2, #28
 800abf0:	bf44      	itt	mi
 800abf2:	232b      	movmi	r3, #43	@ 0x2b
 800abf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800abfe:	d015      	beq.n	800ac2c <_vfiprintf_r+0x120>
 800ac00:	9a07      	ldr	r2, [sp, #28]
 800ac02:	4654      	mov	r4, sl
 800ac04:	2000      	movs	r0, #0
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac10:	3b30      	subs	r3, #48	@ 0x30
 800ac12:	2b09      	cmp	r3, #9
 800ac14:	d94b      	bls.n	800acae <_vfiprintf_r+0x1a2>
 800ac16:	b1b0      	cbz	r0, 800ac46 <_vfiprintf_r+0x13a>
 800ac18:	9207      	str	r2, [sp, #28]
 800ac1a:	e014      	b.n	800ac46 <_vfiprintf_r+0x13a>
 800ac1c:	eba0 0308 	sub.w	r3, r0, r8
 800ac20:	fa09 f303 	lsl.w	r3, r9, r3
 800ac24:	4313      	orrs	r3, r2
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	46a2      	mov	sl, r4
 800ac2a:	e7d2      	b.n	800abd2 <_vfiprintf_r+0xc6>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d19      	adds	r1, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9103      	str	r1, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfbb      	ittet	lt
 800ac38:	425b      	neglt	r3, r3
 800ac3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac3e:	9307      	strge	r3, [sp, #28]
 800ac40:	9307      	strlt	r3, [sp, #28]
 800ac42:	bfb8      	it	lt
 800ac44:	9204      	strlt	r2, [sp, #16]
 800ac46:	7823      	ldrb	r3, [r4, #0]
 800ac48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac4a:	d10a      	bne.n	800ac62 <_vfiprintf_r+0x156>
 800ac4c:	7863      	ldrb	r3, [r4, #1]
 800ac4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac50:	d132      	bne.n	800acb8 <_vfiprintf_r+0x1ac>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	1d1a      	adds	r2, r3, #4
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	9203      	str	r2, [sp, #12]
 800ac5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac5e:	3402      	adds	r4, #2
 800ac60:	9305      	str	r3, [sp, #20]
 800ac62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad38 <_vfiprintf_r+0x22c>
 800ac66:	7821      	ldrb	r1, [r4, #0]
 800ac68:	2203      	movs	r2, #3
 800ac6a:	4650      	mov	r0, sl
 800ac6c:	f7f5 fac0 	bl	80001f0 <memchr>
 800ac70:	b138      	cbz	r0, 800ac82 <_vfiprintf_r+0x176>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	eba0 000a 	sub.w	r0, r0, sl
 800ac78:	2240      	movs	r2, #64	@ 0x40
 800ac7a:	4082      	lsls	r2, r0
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	3401      	adds	r4, #1
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4829      	ldr	r0, [pc, #164]	@ (800ad2c <_vfiprintf_r+0x220>)
 800ac88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac8c:	2206      	movs	r2, #6
 800ac8e:	f7f5 faaf 	bl	80001f0 <memchr>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d03f      	beq.n	800ad16 <_vfiprintf_r+0x20a>
 800ac96:	4b26      	ldr	r3, [pc, #152]	@ (800ad30 <_vfiprintf_r+0x224>)
 800ac98:	bb1b      	cbnz	r3, 800ace2 <_vfiprintf_r+0x1d6>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	3307      	adds	r3, #7
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	3308      	adds	r3, #8
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca8:	443b      	add	r3, r7
 800acaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acac:	e76a      	b.n	800ab84 <_vfiprintf_r+0x78>
 800acae:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb2:	460c      	mov	r4, r1
 800acb4:	2001      	movs	r0, #1
 800acb6:	e7a8      	b.n	800ac0a <_vfiprintf_r+0xfe>
 800acb8:	2300      	movs	r3, #0
 800acba:	3401      	adds	r4, #1
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 0c0a 	mov.w	ip, #10
 800acc4:	4620      	mov	r0, r4
 800acc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acca:	3a30      	subs	r2, #48	@ 0x30
 800accc:	2a09      	cmp	r2, #9
 800acce:	d903      	bls.n	800acd8 <_vfiprintf_r+0x1cc>
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0c6      	beq.n	800ac62 <_vfiprintf_r+0x156>
 800acd4:	9105      	str	r1, [sp, #20]
 800acd6:	e7c4      	b.n	800ac62 <_vfiprintf_r+0x156>
 800acd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acdc:	4604      	mov	r4, r0
 800acde:	2301      	movs	r3, #1
 800ace0:	e7f0      	b.n	800acc4 <_vfiprintf_r+0x1b8>
 800ace2:	ab03      	add	r3, sp, #12
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	462a      	mov	r2, r5
 800ace8:	4b12      	ldr	r3, [pc, #72]	@ (800ad34 <_vfiprintf_r+0x228>)
 800acea:	a904      	add	r1, sp, #16
 800acec:	4630      	mov	r0, r6
 800acee:	f7fd fd33 	bl	8008758 <_printf_float>
 800acf2:	4607      	mov	r7, r0
 800acf4:	1c78      	adds	r0, r7, #1
 800acf6:	d1d6      	bne.n	800aca6 <_vfiprintf_r+0x19a>
 800acf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acfa:	07d9      	lsls	r1, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_vfiprintf_r+0x1fe>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	059a      	lsls	r2, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_vfiprintf_r+0x1fe>
 800ad04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad06:	f7fe facd 	bl	80092a4 <__retarget_lock_release_recursive>
 800ad0a:	89ab      	ldrh	r3, [r5, #12]
 800ad0c:	065b      	lsls	r3, r3, #25
 800ad0e:	f53f af1f 	bmi.w	800ab50 <_vfiprintf_r+0x44>
 800ad12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad14:	e71e      	b.n	800ab54 <_vfiprintf_r+0x48>
 800ad16:	ab03      	add	r3, sp, #12
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4b05      	ldr	r3, [pc, #20]	@ (800ad34 <_vfiprintf_r+0x228>)
 800ad1e:	a904      	add	r1, sp, #16
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7fd ffb1 	bl	8008c88 <_printf_i>
 800ad26:	e7e4      	b.n	800acf2 <_vfiprintf_r+0x1e6>
 800ad28:	0800c14c 	.word	0x0800c14c
 800ad2c:	0800c156 	.word	0x0800c156
 800ad30:	08008759 	.word	0x08008759
 800ad34:	0800aae9 	.word	0x0800aae9
 800ad38:	0800c152 	.word	0x0800c152

0800ad3c <__swbuf_r>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	460e      	mov	r6, r1
 800ad40:	4614      	mov	r4, r2
 800ad42:	4605      	mov	r5, r0
 800ad44:	b118      	cbz	r0, 800ad4e <__swbuf_r+0x12>
 800ad46:	6a03      	ldr	r3, [r0, #32]
 800ad48:	b90b      	cbnz	r3, 800ad4e <__swbuf_r+0x12>
 800ad4a:	f7fe f947 	bl	8008fdc <__sinit>
 800ad4e:	69a3      	ldr	r3, [r4, #24]
 800ad50:	60a3      	str	r3, [r4, #8]
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	071a      	lsls	r2, r3, #28
 800ad56:	d501      	bpl.n	800ad5c <__swbuf_r+0x20>
 800ad58:	6923      	ldr	r3, [r4, #16]
 800ad5a:	b943      	cbnz	r3, 800ad6e <__swbuf_r+0x32>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 f82a 	bl	800adb8 <__swsetup_r>
 800ad64:	b118      	cbz	r0, 800ad6e <__swbuf_r+0x32>
 800ad66:	f04f 37ff 	mov.w	r7, #4294967295
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	6922      	ldr	r2, [r4, #16]
 800ad72:	1a98      	subs	r0, r3, r2
 800ad74:	6963      	ldr	r3, [r4, #20]
 800ad76:	b2f6      	uxtb	r6, r6
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	4637      	mov	r7, r6
 800ad7c:	dc05      	bgt.n	800ad8a <__swbuf_r+0x4e>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7ff fdf7 	bl	800a974 <_fflush_r>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d1ed      	bne.n	800ad66 <__swbuf_r+0x2a>
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	60a3      	str	r3, [r4, #8]
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	1c5a      	adds	r2, r3, #1
 800ad94:	6022      	str	r2, [r4, #0]
 800ad96:	701e      	strb	r6, [r3, #0]
 800ad98:	6962      	ldr	r2, [r4, #20]
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d004      	beq.n	800adaa <__swbuf_r+0x6e>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	07db      	lsls	r3, r3, #31
 800ada4:	d5e1      	bpl.n	800ad6a <__swbuf_r+0x2e>
 800ada6:	2e0a      	cmp	r6, #10
 800ada8:	d1df      	bne.n	800ad6a <__swbuf_r+0x2e>
 800adaa:	4621      	mov	r1, r4
 800adac:	4628      	mov	r0, r5
 800adae:	f7ff fde1 	bl	800a974 <_fflush_r>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d0d9      	beq.n	800ad6a <__swbuf_r+0x2e>
 800adb6:	e7d6      	b.n	800ad66 <__swbuf_r+0x2a>

0800adb8 <__swsetup_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4b29      	ldr	r3, [pc, #164]	@ (800ae60 <__swsetup_r+0xa8>)
 800adbc:	4605      	mov	r5, r0
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	460c      	mov	r4, r1
 800adc2:	b118      	cbz	r0, 800adcc <__swsetup_r+0x14>
 800adc4:	6a03      	ldr	r3, [r0, #32]
 800adc6:	b90b      	cbnz	r3, 800adcc <__swsetup_r+0x14>
 800adc8:	f7fe f908 	bl	8008fdc <__sinit>
 800adcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add0:	0719      	lsls	r1, r3, #28
 800add2:	d422      	bmi.n	800ae1a <__swsetup_r+0x62>
 800add4:	06da      	lsls	r2, r3, #27
 800add6:	d407      	bmi.n	800ade8 <__swsetup_r+0x30>
 800add8:	2209      	movs	r2, #9
 800adda:	602a      	str	r2, [r5, #0]
 800addc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	e033      	b.n	800ae50 <__swsetup_r+0x98>
 800ade8:	0758      	lsls	r0, r3, #29
 800adea:	d512      	bpl.n	800ae12 <__swsetup_r+0x5a>
 800adec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adee:	b141      	cbz	r1, 800ae02 <__swsetup_r+0x4a>
 800adf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adf4:	4299      	cmp	r1, r3
 800adf6:	d002      	beq.n	800adfe <__swsetup_r+0x46>
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7ff f8bd 	bl	8009f78 <_free_r>
 800adfe:	2300      	movs	r3, #0
 800ae00:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6063      	str	r3, [r4, #4]
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f043 0308 	orr.w	r3, r3, #8
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	b94b      	cbnz	r3, 800ae32 <__swsetup_r+0x7a>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae28:	d003      	beq.n	800ae32 <__swsetup_r+0x7a>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f883 	bl	800af38 <__smakebuf_r>
 800ae32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae36:	f013 0201 	ands.w	r2, r3, #1
 800ae3a:	d00a      	beq.n	800ae52 <__swsetup_r+0x9a>
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	60a2      	str	r2, [r4, #8]
 800ae40:	6962      	ldr	r2, [r4, #20]
 800ae42:	4252      	negs	r2, r2
 800ae44:	61a2      	str	r2, [r4, #24]
 800ae46:	6922      	ldr	r2, [r4, #16]
 800ae48:	b942      	cbnz	r2, 800ae5c <__swsetup_r+0xa4>
 800ae4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae4e:	d1c5      	bne.n	800addc <__swsetup_r+0x24>
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	0799      	lsls	r1, r3, #30
 800ae54:	bf58      	it	pl
 800ae56:	6962      	ldrpl	r2, [r4, #20]
 800ae58:	60a2      	str	r2, [r4, #8]
 800ae5a:	e7f4      	b.n	800ae46 <__swsetup_r+0x8e>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e7f7      	b.n	800ae50 <__swsetup_r+0x98>
 800ae60:	2000001c 	.word	0x2000001c

0800ae64 <_raise_r>:
 800ae64:	291f      	cmp	r1, #31
 800ae66:	b538      	push	{r3, r4, r5, lr}
 800ae68:	4605      	mov	r5, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	d904      	bls.n	800ae78 <_raise_r+0x14>
 800ae6e:	2316      	movs	r3, #22
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae7a:	b112      	cbz	r2, 800ae82 <_raise_r+0x1e>
 800ae7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae80:	b94b      	cbnz	r3, 800ae96 <_raise_r+0x32>
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f830 	bl	800aee8 <_getpid_r>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae92:	f000 b817 	b.w	800aec4 <_kill_r>
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d00a      	beq.n	800aeb0 <_raise_r+0x4c>
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	d103      	bne.n	800aea6 <_raise_r+0x42>
 800ae9e:	2316      	movs	r3, #22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7e7      	b.n	800ae76 <_raise_r+0x12>
 800aea6:	2100      	movs	r1, #0
 800aea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeac:	4620      	mov	r0, r4
 800aeae:	4798      	blx	r3
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7e0      	b.n	800ae76 <_raise_r+0x12>

0800aeb4 <raise>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	@ (800aec0 <raise+0xc>)
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	f7ff bfd3 	b.w	800ae64 <_raise_r>
 800aebe:	bf00      	nop
 800aec0:	2000001c 	.word	0x2000001c

0800aec4 <_kill_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	@ (800aee4 <_kill_r+0x20>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f6 fef9 	bl	8001cc8 <_kill>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_kill_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_kill_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	2000191c 	.word	0x2000191c

0800aee8 <_getpid_r>:
 800aee8:	f7f6 bee6 	b.w	8001cb8 <_getpid>

0800aeec <__swhatbuf_r>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef4:	2900      	cmp	r1, #0
 800aef6:	b096      	sub	sp, #88	@ 0x58
 800aef8:	4615      	mov	r5, r2
 800aefa:	461e      	mov	r6, r3
 800aefc:	da0d      	bge.n	800af1a <__swhatbuf_r+0x2e>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af04:	f04f 0100 	mov.w	r1, #0
 800af08:	bf14      	ite	ne
 800af0a:	2340      	movne	r3, #64	@ 0x40
 800af0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af10:	2000      	movs	r0, #0
 800af12:	6031      	str	r1, [r6, #0]
 800af14:	602b      	str	r3, [r5, #0]
 800af16:	b016      	add	sp, #88	@ 0x58
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	466a      	mov	r2, sp
 800af1c:	f000 f848 	bl	800afb0 <_fstat_r>
 800af20:	2800      	cmp	r0, #0
 800af22:	dbec      	blt.n	800aefe <__swhatbuf_r+0x12>
 800af24:	9901      	ldr	r1, [sp, #4]
 800af26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af2e:	4259      	negs	r1, r3
 800af30:	4159      	adcs	r1, r3
 800af32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af36:	e7eb      	b.n	800af10 <__swhatbuf_r+0x24>

0800af38 <__smakebuf_r>:
 800af38:	898b      	ldrh	r3, [r1, #12]
 800af3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af3c:	079d      	lsls	r5, r3, #30
 800af3e:	4606      	mov	r6, r0
 800af40:	460c      	mov	r4, r1
 800af42:	d507      	bpl.n	800af54 <__smakebuf_r+0x1c>
 800af44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	6123      	str	r3, [r4, #16]
 800af4c:	2301      	movs	r3, #1
 800af4e:	6163      	str	r3, [r4, #20]
 800af50:	b003      	add	sp, #12
 800af52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af54:	ab01      	add	r3, sp, #4
 800af56:	466a      	mov	r2, sp
 800af58:	f7ff ffc8 	bl	800aeec <__swhatbuf_r>
 800af5c:	9f00      	ldr	r7, [sp, #0]
 800af5e:	4605      	mov	r5, r0
 800af60:	4639      	mov	r1, r7
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff f87c 	bl	800a060 <_malloc_r>
 800af68:	b948      	cbnz	r0, 800af7e <__smakebuf_r+0x46>
 800af6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6e:	059a      	lsls	r2, r3, #22
 800af70:	d4ee      	bmi.n	800af50 <__smakebuf_r+0x18>
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	f043 0302 	orr.w	r3, r3, #2
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	e7e2      	b.n	800af44 <__smakebuf_r+0xc>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	6020      	str	r0, [r4, #0]
 800af82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	9b01      	ldr	r3, [sp, #4]
 800af8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af8e:	b15b      	cbz	r3, 800afa8 <__smakebuf_r+0x70>
 800af90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f81d 	bl	800afd4 <_isatty_r>
 800af9a:	b128      	cbz	r0, 800afa8 <__smakebuf_r+0x70>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	f023 0303 	bic.w	r3, r3, #3
 800afa2:	f043 0301 	orr.w	r3, r3, #1
 800afa6:	81a3      	strh	r3, [r4, #12]
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	431d      	orrs	r5, r3
 800afac:	81a5      	strh	r5, [r4, #12]
 800afae:	e7cf      	b.n	800af50 <__smakebuf_r+0x18>

0800afb0 <_fstat_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	@ (800afd0 <_fstat_r+0x20>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	f7f6 fec7 	bl	8001d50 <_fstat>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d102      	bne.n	800afcc <_fstat_r+0x1c>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b103      	cbz	r3, 800afcc <_fstat_r+0x1c>
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	2000191c 	.word	0x2000191c

0800afd4 <_isatty_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_isatty_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f6 fec6 	bl	8001d70 <_isatty>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_isatty_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_isatty_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	2000191c 	.word	0x2000191c

0800aff4 <pow>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	ed2d 8b02 	vpush	{d8}
 800affa:	eeb0 8a40 	vmov.f32	s16, s0
 800affe:	eef0 8a60 	vmov.f32	s17, s1
 800b002:	ec55 4b11 	vmov	r4, r5, d1
 800b006:	f000 f873 	bl	800b0f0 <__ieee754_pow>
 800b00a:	4622      	mov	r2, r4
 800b00c:	462b      	mov	r3, r5
 800b00e:	4620      	mov	r0, r4
 800b010:	4629      	mov	r1, r5
 800b012:	ec57 6b10 	vmov	r6, r7, d0
 800b016:	f7f5 fd99 	bl	8000b4c <__aeabi_dcmpun>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d13b      	bne.n	800b096 <pow+0xa2>
 800b01e:	ec51 0b18 	vmov	r0, r1, d8
 800b022:	2200      	movs	r2, #0
 800b024:	2300      	movs	r3, #0
 800b026:	f7f5 fd5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b02a:	b1b8      	cbz	r0, 800b05c <pow+0x68>
 800b02c:	2200      	movs	r2, #0
 800b02e:	2300      	movs	r3, #0
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 fd58 	bl	8000ae8 <__aeabi_dcmpeq>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d146      	bne.n	800b0ca <pow+0xd6>
 800b03c:	ec45 4b10 	vmov	d0, r4, r5
 800b040:	f000 f848 	bl	800b0d4 <finite>
 800b044:	b338      	cbz	r0, 800b096 <pow+0xa2>
 800b046:	2200      	movs	r2, #0
 800b048:	2300      	movs	r3, #0
 800b04a:	4620      	mov	r0, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	f7f5 fd55 	bl	8000afc <__aeabi_dcmplt>
 800b052:	b300      	cbz	r0, 800b096 <pow+0xa2>
 800b054:	f7fe f8fa 	bl	800924c <__errno>
 800b058:	2322      	movs	r3, #34	@ 0x22
 800b05a:	e01b      	b.n	800b094 <pow+0xa0>
 800b05c:	ec47 6b10 	vmov	d0, r6, r7
 800b060:	f000 f838 	bl	800b0d4 <finite>
 800b064:	b9e0      	cbnz	r0, 800b0a0 <pow+0xac>
 800b066:	eeb0 0a48 	vmov.f32	s0, s16
 800b06a:	eef0 0a68 	vmov.f32	s1, s17
 800b06e:	f000 f831 	bl	800b0d4 <finite>
 800b072:	b1a8      	cbz	r0, 800b0a0 <pow+0xac>
 800b074:	ec45 4b10 	vmov	d0, r4, r5
 800b078:	f000 f82c 	bl	800b0d4 <finite>
 800b07c:	b180      	cbz	r0, 800b0a0 <pow+0xac>
 800b07e:	4632      	mov	r2, r6
 800b080:	463b      	mov	r3, r7
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 fd61 	bl	8000b4c <__aeabi_dcmpun>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0e2      	beq.n	800b054 <pow+0x60>
 800b08e:	f7fe f8dd 	bl	800924c <__errno>
 800b092:	2321      	movs	r3, #33	@ 0x21
 800b094:	6003      	str	r3, [r0, #0]
 800b096:	ecbd 8b02 	vpop	{d8}
 800b09a:	ec47 6b10 	vmov	d0, r6, r7
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	f7f5 fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d0f2      	beq.n	800b096 <pow+0xa2>
 800b0b0:	eeb0 0a48 	vmov.f32	s0, s16
 800b0b4:	eef0 0a68 	vmov.f32	s1, s17
 800b0b8:	f000 f80c 	bl	800b0d4 <finite>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d0ea      	beq.n	800b096 <pow+0xa2>
 800b0c0:	ec45 4b10 	vmov	d0, r4, r5
 800b0c4:	f000 f806 	bl	800b0d4 <finite>
 800b0c8:	e7c3      	b.n	800b052 <pow+0x5e>
 800b0ca:	4f01      	ldr	r7, [pc, #4]	@ (800b0d0 <pow+0xdc>)
 800b0cc:	2600      	movs	r6, #0
 800b0ce:	e7e2      	b.n	800b096 <pow+0xa2>
 800b0d0:	3ff00000 	.word	0x3ff00000

0800b0d4 <finite>:
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	ed8d 0b00 	vstr	d0, [sp]
 800b0da:	9801      	ldr	r0, [sp, #4]
 800b0dc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b0e0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b0e4:	0fc0      	lsrs	r0, r0, #31
 800b0e6:	b002      	add	sp, #8
 800b0e8:	4770      	bx	lr
 800b0ea:	0000      	movs	r0, r0
 800b0ec:	0000      	movs	r0, r0
	...

0800b0f0 <__ieee754_pow>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	b091      	sub	sp, #68	@ 0x44
 800b0f6:	ed8d 1b00 	vstr	d1, [sp]
 800b0fa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b0fe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b102:	ea5a 0001 	orrs.w	r0, sl, r1
 800b106:	ec57 6b10 	vmov	r6, r7, d0
 800b10a:	d113      	bne.n	800b134 <__ieee754_pow+0x44>
 800b10c:	19b3      	adds	r3, r6, r6
 800b10e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b112:	4152      	adcs	r2, r2
 800b114:	4298      	cmp	r0, r3
 800b116:	4b9a      	ldr	r3, [pc, #616]	@ (800b380 <__ieee754_pow+0x290>)
 800b118:	4193      	sbcs	r3, r2
 800b11a:	f080 84ee 	bcs.w	800bafa <__ieee754_pow+0xa0a>
 800b11e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b122:	4630      	mov	r0, r6
 800b124:	4639      	mov	r1, r7
 800b126:	f7f5 f8c1 	bl	80002ac <__adddf3>
 800b12a:	ec41 0b10 	vmov	d0, r0, r1
 800b12e:	b011      	add	sp, #68	@ 0x44
 800b130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b134:	4a93      	ldr	r2, [pc, #588]	@ (800b384 <__ieee754_pow+0x294>)
 800b136:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800b13a:	4295      	cmp	r5, r2
 800b13c:	46b8      	mov	r8, r7
 800b13e:	4633      	mov	r3, r6
 800b140:	d80a      	bhi.n	800b158 <__ieee754_pow+0x68>
 800b142:	d104      	bne.n	800b14e <__ieee754_pow+0x5e>
 800b144:	2e00      	cmp	r6, #0
 800b146:	d1ea      	bne.n	800b11e <__ieee754_pow+0x2e>
 800b148:	45aa      	cmp	sl, r5
 800b14a:	d8e8      	bhi.n	800b11e <__ieee754_pow+0x2e>
 800b14c:	e001      	b.n	800b152 <__ieee754_pow+0x62>
 800b14e:	4592      	cmp	sl, r2
 800b150:	d802      	bhi.n	800b158 <__ieee754_pow+0x68>
 800b152:	4592      	cmp	sl, r2
 800b154:	d10f      	bne.n	800b176 <__ieee754_pow+0x86>
 800b156:	b171      	cbz	r1, 800b176 <__ieee754_pow+0x86>
 800b158:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b15c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b160:	ea58 0803 	orrs.w	r8, r8, r3
 800b164:	d1db      	bne.n	800b11e <__ieee754_pow+0x2e>
 800b166:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b16a:	18db      	adds	r3, r3, r3
 800b16c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b170:	4152      	adcs	r2, r2
 800b172:	4598      	cmp	r8, r3
 800b174:	e7cf      	b.n	800b116 <__ieee754_pow+0x26>
 800b176:	f1b8 0f00 	cmp.w	r8, #0
 800b17a:	46ab      	mov	fp, r5
 800b17c:	da43      	bge.n	800b206 <__ieee754_pow+0x116>
 800b17e:	4a82      	ldr	r2, [pc, #520]	@ (800b388 <__ieee754_pow+0x298>)
 800b180:	4592      	cmp	sl, r2
 800b182:	d856      	bhi.n	800b232 <__ieee754_pow+0x142>
 800b184:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b188:	4592      	cmp	sl, r2
 800b18a:	f240 84c5 	bls.w	800bb18 <__ieee754_pow+0xa28>
 800b18e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b192:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b196:	2a14      	cmp	r2, #20
 800b198:	dd18      	ble.n	800b1cc <__ieee754_pow+0xdc>
 800b19a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b19e:	fa21 f402 	lsr.w	r4, r1, r2
 800b1a2:	fa04 f202 	lsl.w	r2, r4, r2
 800b1a6:	428a      	cmp	r2, r1
 800b1a8:	f040 84b6 	bne.w	800bb18 <__ieee754_pow+0xa28>
 800b1ac:	f004 0401 	and.w	r4, r4, #1
 800b1b0:	f1c4 0402 	rsb	r4, r4, #2
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d159      	bne.n	800b26c <__ieee754_pow+0x17c>
 800b1b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b1bc:	d148      	bne.n	800b250 <__ieee754_pow+0x160>
 800b1be:	4632      	mov	r2, r6
 800b1c0:	463b      	mov	r3, r7
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	f7f5 fa27 	bl	8000618 <__aeabi_dmul>
 800b1ca:	e7ae      	b.n	800b12a <__ieee754_pow+0x3a>
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d14c      	bne.n	800b26a <__ieee754_pow+0x17a>
 800b1d0:	f1c2 0214 	rsb	r2, r2, #20
 800b1d4:	fa4a f402 	asr.w	r4, sl, r2
 800b1d8:	fa04 f202 	lsl.w	r2, r4, r2
 800b1dc:	4552      	cmp	r2, sl
 800b1de:	f040 8498 	bne.w	800bb12 <__ieee754_pow+0xa22>
 800b1e2:	f004 0401 	and.w	r4, r4, #1
 800b1e6:	f1c4 0402 	rsb	r4, r4, #2
 800b1ea:	4a68      	ldr	r2, [pc, #416]	@ (800b38c <__ieee754_pow+0x29c>)
 800b1ec:	4592      	cmp	sl, r2
 800b1ee:	d1e3      	bne.n	800b1b8 <__ieee754_pow+0xc8>
 800b1f0:	f1b9 0f00 	cmp.w	r9, #0
 800b1f4:	f280 8489 	bge.w	800bb0a <__ieee754_pow+0xa1a>
 800b1f8:	4964      	ldr	r1, [pc, #400]	@ (800b38c <__ieee754_pow+0x29c>)
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	463b      	mov	r3, r7
 800b1fe:	2000      	movs	r0, #0
 800b200:	f7f5 fb34 	bl	800086c <__aeabi_ddiv>
 800b204:	e791      	b.n	800b12a <__ieee754_pow+0x3a>
 800b206:	2400      	movs	r4, #0
 800b208:	bb81      	cbnz	r1, 800b26c <__ieee754_pow+0x17c>
 800b20a:	4a5e      	ldr	r2, [pc, #376]	@ (800b384 <__ieee754_pow+0x294>)
 800b20c:	4592      	cmp	sl, r2
 800b20e:	d1ec      	bne.n	800b1ea <__ieee754_pow+0xfa>
 800b210:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800b214:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b218:	431a      	orrs	r2, r3
 800b21a:	f000 846e 	beq.w	800bafa <__ieee754_pow+0xa0a>
 800b21e:	4b5c      	ldr	r3, [pc, #368]	@ (800b390 <__ieee754_pow+0x2a0>)
 800b220:	429d      	cmp	r5, r3
 800b222:	d908      	bls.n	800b236 <__ieee754_pow+0x146>
 800b224:	f1b9 0f00 	cmp.w	r9, #0
 800b228:	f280 846b 	bge.w	800bb02 <__ieee754_pow+0xa12>
 800b22c:	2000      	movs	r0, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	e77b      	b.n	800b12a <__ieee754_pow+0x3a>
 800b232:	2402      	movs	r4, #2
 800b234:	e7e8      	b.n	800b208 <__ieee754_pow+0x118>
 800b236:	f1b9 0f00 	cmp.w	r9, #0
 800b23a:	f04f 0000 	mov.w	r0, #0
 800b23e:	f04f 0100 	mov.w	r1, #0
 800b242:	f6bf af72 	bge.w	800b12a <__ieee754_pow+0x3a>
 800b246:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b24a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b24e:	e76c      	b.n	800b12a <__ieee754_pow+0x3a>
 800b250:	4a50      	ldr	r2, [pc, #320]	@ (800b394 <__ieee754_pow+0x2a4>)
 800b252:	4591      	cmp	r9, r2
 800b254:	d10a      	bne.n	800b26c <__ieee754_pow+0x17c>
 800b256:	f1b8 0f00 	cmp.w	r8, #0
 800b25a:	db07      	blt.n	800b26c <__ieee754_pow+0x17c>
 800b25c:	ec47 6b10 	vmov	d0, r6, r7
 800b260:	b011      	add	sp, #68	@ 0x44
 800b262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b266:	f000 bd4f 	b.w	800bd08 <__ieee754_sqrt>
 800b26a:	2400      	movs	r4, #0
 800b26c:	ec47 6b10 	vmov	d0, r6, r7
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	f000 fc87 	bl	800bb84 <fabs>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	ec51 0b10 	vmov	r0, r1, d0
 800b27c:	bb43      	cbnz	r3, 800b2d0 <__ieee754_pow+0x1e0>
 800b27e:	4b43      	ldr	r3, [pc, #268]	@ (800b38c <__ieee754_pow+0x29c>)
 800b280:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800b284:	429a      	cmp	r2, r3
 800b286:	d000      	beq.n	800b28a <__ieee754_pow+0x19a>
 800b288:	bb15      	cbnz	r5, 800b2d0 <__ieee754_pow+0x1e0>
 800b28a:	f1b9 0f00 	cmp.w	r9, #0
 800b28e:	da05      	bge.n	800b29c <__ieee754_pow+0x1ac>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	2000      	movs	r0, #0
 800b296:	493d      	ldr	r1, [pc, #244]	@ (800b38c <__ieee754_pow+0x29c>)
 800b298:	f7f5 fae8 	bl	800086c <__aeabi_ddiv>
 800b29c:	f1b8 0f00 	cmp.w	r8, #0
 800b2a0:	f6bf af43 	bge.w	800b12a <__ieee754_pow+0x3a>
 800b2a4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b2a8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b2ac:	4325      	orrs	r5, r4
 800b2ae:	d108      	bne.n	800b2c2 <__ieee754_pow+0x1d2>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	f7f4 fff6 	bl	80002a8 <__aeabi_dsub>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	e79e      	b.n	800b200 <__ieee754_pow+0x110>
 800b2c2:	2c01      	cmp	r4, #1
 800b2c4:	f47f af31 	bne.w	800b12a <__ieee754_pow+0x3a>
 800b2c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	e72c      	b.n	800b12a <__ieee754_pow+0x3a>
 800b2d0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	ea53 0204 	orrs.w	r2, r3, r4
 800b2da:	d102      	bne.n	800b2e2 <__ieee754_pow+0x1f2>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	e7e8      	b.n	800b2b4 <__ieee754_pow+0x1c4>
 800b2e2:	3c01      	subs	r4, #1
 800b2e4:	431c      	orrs	r4, r3
 800b2e6:	d016      	beq.n	800b316 <__ieee754_pow+0x226>
 800b2e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b370 <__ieee754_pow+0x280>
 800b2ec:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b2f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2f4:	f240 8110 	bls.w	800b518 <__ieee754_pow+0x428>
 800b2f8:	4b27      	ldr	r3, [pc, #156]	@ (800b398 <__ieee754_pow+0x2a8>)
 800b2fa:	459a      	cmp	sl, r3
 800b2fc:	4b24      	ldr	r3, [pc, #144]	@ (800b390 <__ieee754_pow+0x2a0>)
 800b2fe:	d916      	bls.n	800b32e <__ieee754_pow+0x23e>
 800b300:	429d      	cmp	r5, r3
 800b302:	d80b      	bhi.n	800b31c <__ieee754_pow+0x22c>
 800b304:	f1b9 0f00 	cmp.w	r9, #0
 800b308:	da0b      	bge.n	800b322 <__ieee754_pow+0x232>
 800b30a:	2000      	movs	r0, #0
 800b30c:	b011      	add	sp, #68	@ 0x44
 800b30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b312:	f000 bcf1 	b.w	800bcf8 <__math_oflow>
 800b316:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800b378 <__ieee754_pow+0x288>
 800b31a:	e7e7      	b.n	800b2ec <__ieee754_pow+0x1fc>
 800b31c:	f1b9 0f00 	cmp.w	r9, #0
 800b320:	dcf3      	bgt.n	800b30a <__ieee754_pow+0x21a>
 800b322:	2000      	movs	r0, #0
 800b324:	b011      	add	sp, #68	@ 0x44
 800b326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f000 bcdd 	b.w	800bce8 <__math_uflow>
 800b32e:	429d      	cmp	r5, r3
 800b330:	d20c      	bcs.n	800b34c <__ieee754_pow+0x25c>
 800b332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b336:	2200      	movs	r2, #0
 800b338:	2300      	movs	r3, #0
 800b33a:	f7f5 fbdf 	bl	8000afc <__aeabi_dcmplt>
 800b33e:	3800      	subs	r0, #0
 800b340:	bf18      	it	ne
 800b342:	2001      	movne	r0, #1
 800b344:	f1b9 0f00 	cmp.w	r9, #0
 800b348:	daec      	bge.n	800b324 <__ieee754_pow+0x234>
 800b34a:	e7df      	b.n	800b30c <__ieee754_pow+0x21c>
 800b34c:	4b0f      	ldr	r3, [pc, #60]	@ (800b38c <__ieee754_pow+0x29c>)
 800b34e:	429d      	cmp	r5, r3
 800b350:	f04f 0200 	mov.w	r2, #0
 800b354:	d922      	bls.n	800b39c <__ieee754_pow+0x2ac>
 800b356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b35a:	2300      	movs	r3, #0
 800b35c:	f7f5 fbce 	bl	8000afc <__aeabi_dcmplt>
 800b360:	3800      	subs	r0, #0
 800b362:	bf18      	it	ne
 800b364:	2001      	movne	r0, #1
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	dccf      	bgt.n	800b30c <__ieee754_pow+0x21c>
 800b36c:	e7da      	b.n	800b324 <__ieee754_pow+0x234>
 800b36e:	bf00      	nop
 800b370:	00000000 	.word	0x00000000
 800b374:	3ff00000 	.word	0x3ff00000
 800b378:	00000000 	.word	0x00000000
 800b37c:	bff00000 	.word	0xbff00000
 800b380:	fff00000 	.word	0xfff00000
 800b384:	7ff00000 	.word	0x7ff00000
 800b388:	433fffff 	.word	0x433fffff
 800b38c:	3ff00000 	.word	0x3ff00000
 800b390:	3fefffff 	.word	0x3fefffff
 800b394:	3fe00000 	.word	0x3fe00000
 800b398:	43f00000 	.word	0x43f00000
 800b39c:	4b5a      	ldr	r3, [pc, #360]	@ (800b508 <__ieee754_pow+0x418>)
 800b39e:	f7f4 ff83 	bl	80002a8 <__aeabi_dsub>
 800b3a2:	a351      	add	r3, pc, #324	@ (adr r3, 800b4e8 <__ieee754_pow+0x3f8>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	f7f5 f934 	bl	8000618 <__aeabi_dmul>
 800b3b0:	a34f      	add	r3, pc, #316	@ (adr r3, 800b4f0 <__ieee754_pow+0x400>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f5 f92b 	bl	8000618 <__aeabi_dmul>
 800b3c2:	4b52      	ldr	r3, [pc, #328]	@ (800b50c <__ieee754_pow+0x41c>)
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	468b      	mov	fp, r1
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7f5 f923 	bl	8000618 <__aeabi_dmul>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	a148      	add	r1, pc, #288	@ (adr r1, 800b4f8 <__ieee754_pow+0x408>)
 800b3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3dc:	f7f4 ff64 	bl	80002a8 <__aeabi_dsub>
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	f7f5 f918 	bl	8000618 <__aeabi_dmul>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	4948      	ldr	r1, [pc, #288]	@ (800b510 <__ieee754_pow+0x420>)
 800b3f0:	f7f4 ff5a 	bl	80002a8 <__aeabi_dsub>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4689      	mov	r9, r1
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 f90a 	bl	8000618 <__aeabi_dmul>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4640      	mov	r0, r8
 800b40a:	4649      	mov	r1, r9
 800b40c:	f7f5 f904 	bl	8000618 <__aeabi_dmul>
 800b410:	a33b      	add	r3, pc, #236	@ (adr r3, 800b500 <__ieee754_pow+0x410>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f5 f8ff 	bl	8000618 <__aeabi_dmul>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4650      	mov	r0, sl
 800b420:	4659      	mov	r1, fp
 800b422:	f7f4 ff41 	bl	80002a8 <__aeabi_dsub>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4680      	mov	r8, r0
 800b42c:	4689      	mov	r9, r1
 800b42e:	4630      	mov	r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	f7f4 ff3b 	bl	80002ac <__adddf3>
 800b436:	2400      	movs	r4, #0
 800b438:	4632      	mov	r2, r6
 800b43a:	463b      	mov	r3, r7
 800b43c:	4620      	mov	r0, r4
 800b43e:	460d      	mov	r5, r1
 800b440:	f7f4 ff32 	bl	80002a8 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f4 ff2c 	bl	80002a8 <__aeabi_dsub>
 800b450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b454:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b458:	2300      	movs	r3, #0
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b460:	4606      	mov	r6, r0
 800b462:	460f      	mov	r7, r1
 800b464:	465b      	mov	r3, fp
 800b466:	4652      	mov	r2, sl
 800b468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b46c:	f7f4 ff1c 	bl	80002a8 <__aeabi_dsub>
 800b470:	4622      	mov	r2, r4
 800b472:	462b      	mov	r3, r5
 800b474:	f7f5 f8d0 	bl	8000618 <__aeabi_dmul>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	4680      	mov	r8, r0
 800b47e:	4689      	mov	r9, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 f8c8 	bl	8000618 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4640      	mov	r0, r8
 800b48e:	4649      	mov	r1, r9
 800b490:	f7f4 ff0c 	bl	80002ac <__adddf3>
 800b494:	465b      	mov	r3, fp
 800b496:	4606      	mov	r6, r0
 800b498:	460f      	mov	r7, r1
 800b49a:	4652      	mov	r2, sl
 800b49c:	4620      	mov	r0, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f5 f8ba 	bl	8000618 <__aeabi_dmul>
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	4689      	mov	r9, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f4 fefc 	bl	80002ac <__adddf3>
 800b4b4:	4b17      	ldr	r3, [pc, #92]	@ (800b514 <__ieee754_pow+0x424>)
 800b4b6:	4299      	cmp	r1, r3
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	468b      	mov	fp, r1
 800b4be:	f340 820b 	ble.w	800b8d8 <__ieee754_pow+0x7e8>
 800b4c2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b4c6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b4ca:	4303      	orrs	r3, r0
 800b4cc:	f000 81ea 	beq.w	800b8a4 <__ieee754_pow+0x7b4>
 800b4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f7f5 fb10 	bl	8000afc <__aeabi_dcmplt>
 800b4dc:	3800      	subs	r0, #0
 800b4de:	bf18      	it	ne
 800b4e0:	2001      	movne	r0, #1
 800b4e2:	e713      	b.n	800b30c <__ieee754_pow+0x21c>
 800b4e4:	f3af 8000 	nop.w
 800b4e8:	60000000 	.word	0x60000000
 800b4ec:	3ff71547 	.word	0x3ff71547
 800b4f0:	f85ddf44 	.word	0xf85ddf44
 800b4f4:	3e54ae0b 	.word	0x3e54ae0b
 800b4f8:	55555555 	.word	0x55555555
 800b4fc:	3fd55555 	.word	0x3fd55555
 800b500:	652b82fe 	.word	0x652b82fe
 800b504:	3ff71547 	.word	0x3ff71547
 800b508:	3ff00000 	.word	0x3ff00000
 800b50c:	3fd00000 	.word	0x3fd00000
 800b510:	3fe00000 	.word	0x3fe00000
 800b514:	408fffff 	.word	0x408fffff
 800b518:	4bd5      	ldr	r3, [pc, #852]	@ (800b870 <__ieee754_pow+0x780>)
 800b51a:	ea08 0303 	and.w	r3, r8, r3
 800b51e:	2200      	movs	r2, #0
 800b520:	b92b      	cbnz	r3, 800b52e <__ieee754_pow+0x43e>
 800b522:	4bd4      	ldr	r3, [pc, #848]	@ (800b874 <__ieee754_pow+0x784>)
 800b524:	f7f5 f878 	bl	8000618 <__aeabi_dmul>
 800b528:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b52c:	468b      	mov	fp, r1
 800b52e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b532:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b536:	4413      	add	r3, r2
 800b538:	930a      	str	r3, [sp, #40]	@ 0x28
 800b53a:	4bcf      	ldr	r3, [pc, #828]	@ (800b878 <__ieee754_pow+0x788>)
 800b53c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b540:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b544:	459b      	cmp	fp, r3
 800b546:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b54a:	dd08      	ble.n	800b55e <__ieee754_pow+0x46e>
 800b54c:	4bcb      	ldr	r3, [pc, #812]	@ (800b87c <__ieee754_pow+0x78c>)
 800b54e:	459b      	cmp	fp, r3
 800b550:	f340 81a5 	ble.w	800b89e <__ieee754_pow+0x7ae>
 800b554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b556:	3301      	adds	r3, #1
 800b558:	930a      	str	r3, [sp, #40]	@ 0x28
 800b55a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b55e:	f04f 0a00 	mov.w	sl, #0
 800b562:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b566:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b568:	4bc5      	ldr	r3, [pc, #788]	@ (800b880 <__ieee754_pow+0x790>)
 800b56a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b56e:	ed93 7b00 	vldr	d7, [r3]
 800b572:	4629      	mov	r1, r5
 800b574:	ec53 2b17 	vmov	r2, r3, d7
 800b578:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b57c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b580:	f7f4 fe92 	bl	80002a8 <__aeabi_dsub>
 800b584:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b588:	4606      	mov	r6, r0
 800b58a:	460f      	mov	r7, r1
 800b58c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b590:	f7f4 fe8c 	bl	80002ac <__adddf3>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	2000      	movs	r0, #0
 800b59a:	49ba      	ldr	r1, [pc, #744]	@ (800b884 <__ieee754_pow+0x794>)
 800b59c:	f7f5 f966 	bl	800086c <__aeabi_ddiv>
 800b5a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f5 f834 	bl	8000618 <__aeabi_dmul>
 800b5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5b4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b5b8:	106d      	asrs	r5, r5, #1
 800b5ba:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b5be:	f04f 0b00 	mov.w	fp, #0
 800b5c2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b5c6:	4661      	mov	r1, ip
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b5ce:	4658      	mov	r0, fp
 800b5d0:	46e1      	mov	r9, ip
 800b5d2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b5d6:	4614      	mov	r4, r2
 800b5d8:	461d      	mov	r5, r3
 800b5da:	f7f5 f81d 	bl	8000618 <__aeabi_dmul>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	4639      	mov	r1, r7
 800b5e6:	f7f4 fe5f 	bl	80002a8 <__aeabi_dsub>
 800b5ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7f4 fe57 	bl	80002a8 <__aeabi_dsub>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b602:	f7f4 fe51 	bl	80002a8 <__aeabi_dsub>
 800b606:	465a      	mov	r2, fp
 800b608:	464b      	mov	r3, r9
 800b60a:	f7f5 f805 	bl	8000618 <__aeabi_dmul>
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 fe47 	bl	80002a8 <__aeabi_dsub>
 800b61a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b61e:	f7f4 fffb 	bl	8000618 <__aeabi_dmul>
 800b622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b626:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b62a:	4610      	mov	r0, r2
 800b62c:	4619      	mov	r1, r3
 800b62e:	f7f4 fff3 	bl	8000618 <__aeabi_dmul>
 800b632:	a37d      	add	r3, pc, #500	@ (adr r3, 800b828 <__ieee754_pow+0x738>)
 800b634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	f7f4 ffec 	bl	8000618 <__aeabi_dmul>
 800b640:	a37b      	add	r3, pc, #492	@ (adr r3, 800b830 <__ieee754_pow+0x740>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	f7f4 fe31 	bl	80002ac <__adddf3>
 800b64a:	4622      	mov	r2, r4
 800b64c:	462b      	mov	r3, r5
 800b64e:	f7f4 ffe3 	bl	8000618 <__aeabi_dmul>
 800b652:	a379      	add	r3, pc, #484	@ (adr r3, 800b838 <__ieee754_pow+0x748>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fe28 	bl	80002ac <__adddf3>
 800b65c:	4622      	mov	r2, r4
 800b65e:	462b      	mov	r3, r5
 800b660:	f7f4 ffda 	bl	8000618 <__aeabi_dmul>
 800b664:	a376      	add	r3, pc, #472	@ (adr r3, 800b840 <__ieee754_pow+0x750>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f4 fe1f 	bl	80002ac <__adddf3>
 800b66e:	4622      	mov	r2, r4
 800b670:	462b      	mov	r3, r5
 800b672:	f7f4 ffd1 	bl	8000618 <__aeabi_dmul>
 800b676:	a374      	add	r3, pc, #464	@ (adr r3, 800b848 <__ieee754_pow+0x758>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 fe16 	bl	80002ac <__adddf3>
 800b680:	4622      	mov	r2, r4
 800b682:	462b      	mov	r3, r5
 800b684:	f7f4 ffc8 	bl	8000618 <__aeabi_dmul>
 800b688:	a371      	add	r3, pc, #452	@ (adr r3, 800b850 <__ieee754_pow+0x760>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fe0d 	bl	80002ac <__adddf3>
 800b692:	4622      	mov	r2, r4
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	462b      	mov	r3, r5
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f4 ffbb 	bl	8000618 <__aeabi_dmul>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f4 ffb5 	bl	8000618 <__aeabi_dmul>
 800b6ae:	465a      	mov	r2, fp
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	464b      	mov	r3, r9
 800b6b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ba:	f7f4 fdf7 	bl	80002ac <__adddf3>
 800b6be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c2:	f7f4 ffa9 	bl	8000618 <__aeabi_dmul>
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 fdef 	bl	80002ac <__adddf3>
 800b6ce:	465a      	mov	r2, fp
 800b6d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6d4:	464b      	mov	r3, r9
 800b6d6:	4658      	mov	r0, fp
 800b6d8:	4649      	mov	r1, r9
 800b6da:	f7f4 ff9d 	bl	8000618 <__aeabi_dmul>
 800b6de:	4b6a      	ldr	r3, [pc, #424]	@ (800b888 <__ieee754_pow+0x798>)
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f4 fde1 	bl	80002ac <__adddf3>
 800b6ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6ee:	f7f4 fddd 	bl	80002ac <__adddf3>
 800b6f2:	46d8      	mov	r8, fp
 800b6f4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	465a      	mov	r2, fp
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b706:	f7f4 ff87 	bl	8000618 <__aeabi_dmul>
 800b70a:	465c      	mov	r4, fp
 800b70c:	4680      	mov	r8, r0
 800b70e:	4689      	mov	r9, r1
 800b710:	4b5d      	ldr	r3, [pc, #372]	@ (800b888 <__ieee754_pow+0x798>)
 800b712:	2200      	movs	r2, #0
 800b714:	4620      	mov	r0, r4
 800b716:	4629      	mov	r1, r5
 800b718:	f7f4 fdc6 	bl	80002a8 <__aeabi_dsub>
 800b71c:	4632      	mov	r2, r6
 800b71e:	463b      	mov	r3, r7
 800b720:	f7f4 fdc2 	bl	80002a8 <__aeabi_dsub>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b72c:	f7f4 fdbc 	bl	80002a8 <__aeabi_dsub>
 800b730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b734:	f7f4 ff70 	bl	8000618 <__aeabi_dmul>
 800b738:	4622      	mov	r2, r4
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	462b      	mov	r3, r5
 800b740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b744:	f7f4 ff68 	bl	8000618 <__aeabi_dmul>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4630      	mov	r0, r6
 800b74e:	4639      	mov	r1, r7
 800b750:	f7f4 fdac 	bl	80002ac <__adddf3>
 800b754:	4606      	mov	r6, r0
 800b756:	460f      	mov	r7, r1
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	4640      	mov	r0, r8
 800b75e:	4649      	mov	r1, r9
 800b760:	f7f4 fda4 	bl	80002ac <__adddf3>
 800b764:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b768:	a33b      	add	r3, pc, #236	@ (adr r3, 800b858 <__ieee754_pow+0x768>)
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	4658      	mov	r0, fp
 800b770:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b774:	460d      	mov	r5, r1
 800b776:	f7f4 ff4f 	bl	8000618 <__aeabi_dmul>
 800b77a:	465c      	mov	r4, fp
 800b77c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b780:	4642      	mov	r2, r8
 800b782:	464b      	mov	r3, r9
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 fd8e 	bl	80002a8 <__aeabi_dsub>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f4 fd88 	bl	80002a8 <__aeabi_dsub>
 800b798:	a331      	add	r3, pc, #196	@ (adr r3, 800b860 <__ieee754_pow+0x770>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f4 ff3b 	bl	8000618 <__aeabi_dmul>
 800b7a2:	a331      	add	r3, pc, #196	@ (adr r3, 800b868 <__ieee754_pow+0x778>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	460f      	mov	r7, r1
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 ff32 	bl	8000618 <__aeabi_dmul>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd76 	bl	80002ac <__adddf3>
 800b7c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7c2:	4b32      	ldr	r3, [pc, #200]	@ (800b88c <__ieee754_pow+0x79c>)
 800b7c4:	4413      	add	r3, r2
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f7f4 fd6f 	bl	80002ac <__adddf3>
 800b7ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7d4:	f7f4 feb6 	bl	8000544 <__aeabi_i2d>
 800b7d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7da:	4b2d      	ldr	r3, [pc, #180]	@ (800b890 <__ieee754_pow+0x7a0>)
 800b7dc:	4413      	add	r3, r2
 800b7de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ee:	f7f4 fd5d 	bl	80002ac <__adddf3>
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	f7f4 fd59 	bl	80002ac <__adddf3>
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	f7f4 fd55 	bl	80002ac <__adddf3>
 800b802:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b806:	4632      	mov	r2, r6
 800b808:	463b      	mov	r3, r7
 800b80a:	4658      	mov	r0, fp
 800b80c:	460d      	mov	r5, r1
 800b80e:	f7f4 fd4b 	bl	80002a8 <__aeabi_dsub>
 800b812:	4642      	mov	r2, r8
 800b814:	464b      	mov	r3, r9
 800b816:	f7f4 fd47 	bl	80002a8 <__aeabi_dsub>
 800b81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b81e:	f7f4 fd43 	bl	80002a8 <__aeabi_dsub>
 800b822:	465c      	mov	r4, fp
 800b824:	e036      	b.n	800b894 <__ieee754_pow+0x7a4>
 800b826:	bf00      	nop
 800b828:	4a454eef 	.word	0x4a454eef
 800b82c:	3fca7e28 	.word	0x3fca7e28
 800b830:	93c9db65 	.word	0x93c9db65
 800b834:	3fcd864a 	.word	0x3fcd864a
 800b838:	a91d4101 	.word	0xa91d4101
 800b83c:	3fd17460 	.word	0x3fd17460
 800b840:	518f264d 	.word	0x518f264d
 800b844:	3fd55555 	.word	0x3fd55555
 800b848:	db6fabff 	.word	0xdb6fabff
 800b84c:	3fdb6db6 	.word	0x3fdb6db6
 800b850:	33333303 	.word	0x33333303
 800b854:	3fe33333 	.word	0x3fe33333
 800b858:	e0000000 	.word	0xe0000000
 800b85c:	3feec709 	.word	0x3feec709
 800b860:	dc3a03fd 	.word	0xdc3a03fd
 800b864:	3feec709 	.word	0x3feec709
 800b868:	145b01f5 	.word	0x145b01f5
 800b86c:	be3e2fe0 	.word	0xbe3e2fe0
 800b870:	7ff00000 	.word	0x7ff00000
 800b874:	43400000 	.word	0x43400000
 800b878:	0003988e 	.word	0x0003988e
 800b87c:	000bb679 	.word	0x000bb679
 800b880:	0800c388 	.word	0x0800c388
 800b884:	3ff00000 	.word	0x3ff00000
 800b888:	40080000 	.word	0x40080000
 800b88c:	0800c368 	.word	0x0800c368
 800b890:	0800c378 	.word	0x0800c378
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89c:	e5d6      	b.n	800b44c <__ieee754_pow+0x35c>
 800b89e:	f04f 0a01 	mov.w	sl, #1
 800b8a2:	e65e      	b.n	800b562 <__ieee754_pow+0x472>
 800b8a4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800bb7c <__ieee754_pow+0xa8c>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	f7f4 fcfd 	bl	80002ac <__adddf3>
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8b8:	464b      	mov	r3, r9
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fcf3 	bl	80002a8 <__aeabi_dsub>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8ca:	f7f5 f935 	bl	8000b38 <__aeabi_dcmpgt>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	f47f adfe 	bne.w	800b4d0 <__ieee754_pow+0x3e0>
 800b8d4:	4ba2      	ldr	r3, [pc, #648]	@ (800bb60 <__ieee754_pow+0xa70>)
 800b8d6:	e022      	b.n	800b91e <__ieee754_pow+0x82e>
 800b8d8:	4ca2      	ldr	r4, [pc, #648]	@ (800bb64 <__ieee754_pow+0xa74>)
 800b8da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b8de:	42a3      	cmp	r3, r4
 800b8e0:	d919      	bls.n	800b916 <__ieee754_pow+0x826>
 800b8e2:	4ba1      	ldr	r3, [pc, #644]	@ (800bb68 <__ieee754_pow+0xa78>)
 800b8e4:	440b      	add	r3, r1
 800b8e6:	4303      	orrs	r3, r0
 800b8e8:	d009      	beq.n	800b8fe <__ieee754_pow+0x80e>
 800b8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f7f5 f903 	bl	8000afc <__aeabi_dcmplt>
 800b8f6:	3800      	subs	r0, #0
 800b8f8:	bf18      	it	ne
 800b8fa:	2001      	movne	r0, #1
 800b8fc:	e512      	b.n	800b324 <__ieee754_pow+0x234>
 800b8fe:	4642      	mov	r2, r8
 800b900:	464b      	mov	r3, r9
 800b902:	f7f4 fcd1 	bl	80002a8 <__aeabi_dsub>
 800b906:	4632      	mov	r2, r6
 800b908:	463b      	mov	r3, r7
 800b90a:	f7f5 f90b 	bl	8000b24 <__aeabi_dcmpge>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d1eb      	bne.n	800b8ea <__ieee754_pow+0x7fa>
 800b912:	4b96      	ldr	r3, [pc, #600]	@ (800bb6c <__ieee754_pow+0xa7c>)
 800b914:	e003      	b.n	800b91e <__ieee754_pow+0x82e>
 800b916:	4a96      	ldr	r2, [pc, #600]	@ (800bb70 <__ieee754_pow+0xa80>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	f240 80e7 	bls.w	800baec <__ieee754_pow+0x9fc>
 800b91e:	151b      	asrs	r3, r3, #20
 800b920:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800b924:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800b928:	fa4a fa03 	asr.w	sl, sl, r3
 800b92c:	44da      	add	sl, fp
 800b92e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b932:	4890      	ldr	r0, [pc, #576]	@ (800bb74 <__ieee754_pow+0xa84>)
 800b934:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b938:	4108      	asrs	r0, r1
 800b93a:	ea00 030a 	and.w	r3, r0, sl
 800b93e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b942:	f1c1 0114 	rsb	r1, r1, #20
 800b946:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b94a:	fa4a fa01 	asr.w	sl, sl, r1
 800b94e:	f1bb 0f00 	cmp.w	fp, #0
 800b952:	4640      	mov	r0, r8
 800b954:	4649      	mov	r1, r9
 800b956:	f04f 0200 	mov.w	r2, #0
 800b95a:	bfb8      	it	lt
 800b95c:	f1ca 0a00 	rsblt	sl, sl, #0
 800b960:	f7f4 fca2 	bl	80002a8 <__aeabi_dsub>
 800b964:	4680      	mov	r8, r0
 800b966:	4689      	mov	r9, r1
 800b968:	4632      	mov	r2, r6
 800b96a:	463b      	mov	r3, r7
 800b96c:	4640      	mov	r0, r8
 800b96e:	4649      	mov	r1, r9
 800b970:	f7f4 fc9c 	bl	80002ac <__adddf3>
 800b974:	2400      	movs	r4, #0
 800b976:	a36a      	add	r3, pc, #424	@ (adr r3, 800bb20 <__ieee754_pow+0xa30>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	4620      	mov	r0, r4
 800b97e:	460d      	mov	r5, r1
 800b980:	f7f4 fe4a 	bl	8000618 <__aeabi_dmul>
 800b984:	4642      	mov	r2, r8
 800b986:	e9cd 0100 	strd	r0, r1, [sp]
 800b98a:	464b      	mov	r3, r9
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f4 fc8a 	bl	80002a8 <__aeabi_dsub>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f4 fc84 	bl	80002a8 <__aeabi_dsub>
 800b9a0:	a361      	add	r3, pc, #388	@ (adr r3, 800bb28 <__ieee754_pow+0xa38>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fe37 	bl	8000618 <__aeabi_dmul>
 800b9aa:	a361      	add	r3, pc, #388	@ (adr r3, 800bb30 <__ieee754_pow+0xa40>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fe2e 	bl	8000618 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	f7f4 fc72 	bl	80002ac <__adddf3>
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9d4:	f7f4 fc6a 	bl	80002ac <__adddf3>
 800b9d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	f7f4 fc62 	bl	80002a8 <__aeabi_dsub>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	f7f4 fc5c 	bl	80002a8 <__aeabi_dsub>
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f4 fe0c 	bl	8000618 <__aeabi_dmul>
 800ba00:	a34d      	add	r3, pc, #308	@ (adr r3, 800bb38 <__ieee754_pow+0xa48>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	4604      	mov	r4, r0
 800ba08:	460d      	mov	r5, r1
 800ba0a:	f7f4 fe05 	bl	8000618 <__aeabi_dmul>
 800ba0e:	a34c      	add	r3, pc, #304	@ (adr r3, 800bb40 <__ieee754_pow+0xa50>)
 800ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba14:	f7f4 fc48 	bl	80002a8 <__aeabi_dsub>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	f7f4 fdfc 	bl	8000618 <__aeabi_dmul>
 800ba20:	a349      	add	r3, pc, #292	@ (adr r3, 800bb48 <__ieee754_pow+0xa58>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f4 fc41 	bl	80002ac <__adddf3>
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	462b      	mov	r3, r5
 800ba2e:	f7f4 fdf3 	bl	8000618 <__aeabi_dmul>
 800ba32:	a347      	add	r3, pc, #284	@ (adr r3, 800bb50 <__ieee754_pow+0xa60>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fc36 	bl	80002a8 <__aeabi_dsub>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f7f4 fdea 	bl	8000618 <__aeabi_dmul>
 800ba44:	a344      	add	r3, pc, #272	@ (adr r3, 800bb58 <__ieee754_pow+0xa68>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fc2f 	bl	80002ac <__adddf3>
 800ba4e:	4622      	mov	r2, r4
 800ba50:	462b      	mov	r3, r5
 800ba52:	f7f4 fde1 	bl	8000618 <__aeabi_dmul>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	f7f4 fc23 	bl	80002a8 <__aeabi_dsub>
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	f7f4 fdd3 	bl	8000618 <__aeabi_dmul>
 800ba72:	2200      	movs	r2, #0
 800ba74:	e9cd 0100 	strd	r0, r1, [sp]
 800ba78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fc12 	bl	80002a8 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8c:	f7f4 feee 	bl	800086c <__aeabi_ddiv>
 800ba90:	4632      	mov	r2, r6
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	463b      	mov	r3, r7
 800ba98:	4640      	mov	r0, r8
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	f7f4 fdbc 	bl	8000618 <__aeabi_dmul>
 800baa0:	4632      	mov	r2, r6
 800baa2:	463b      	mov	r3, r7
 800baa4:	f7f4 fc02 	bl	80002ac <__adddf3>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4620      	mov	r0, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	f7f4 fbfa 	bl	80002a8 <__aeabi_dsub>
 800bab4:	4642      	mov	r2, r8
 800bab6:	464b      	mov	r3, r9
 800bab8:	f7f4 fbf6 	bl	80002a8 <__aeabi_dsub>
 800babc:	460b      	mov	r3, r1
 800babe:	4602      	mov	r2, r0
 800bac0:	492d      	ldr	r1, [pc, #180]	@ (800bb78 <__ieee754_pow+0xa88>)
 800bac2:	2000      	movs	r0, #0
 800bac4:	f7f4 fbf0 	bl	80002a8 <__aeabi_dsub>
 800bac8:	ec41 0b10 	vmov	d0, r0, r1
 800bacc:	ee10 3a90 	vmov	r3, s1
 800bad0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bad8:	da0b      	bge.n	800baf2 <__ieee754_pow+0xa02>
 800bada:	4650      	mov	r0, sl
 800badc:	f000 f85c 	bl	800bb98 <scalbn>
 800bae0:	ec51 0b10 	vmov	r0, r1, d0
 800bae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bae8:	f7ff bb6d 	b.w	800b1c6 <__ieee754_pow+0xd6>
 800baec:	f8dd a010 	ldr.w	sl, [sp, #16]
 800baf0:	e73a      	b.n	800b968 <__ieee754_pow+0x878>
 800baf2:	ec51 0b10 	vmov	r0, r1, d0
 800baf6:	4619      	mov	r1, r3
 800baf8:	e7f4      	b.n	800bae4 <__ieee754_pow+0x9f4>
 800bafa:	491f      	ldr	r1, [pc, #124]	@ (800bb78 <__ieee754_pow+0xa88>)
 800bafc:	2000      	movs	r0, #0
 800bafe:	f7ff bb14 	b.w	800b12a <__ieee754_pow+0x3a>
 800bb02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb06:	f7ff bb10 	b.w	800b12a <__ieee754_pow+0x3a>
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	f7ff bb0c 	b.w	800b12a <__ieee754_pow+0x3a>
 800bb12:	460c      	mov	r4, r1
 800bb14:	f7ff bb69 	b.w	800b1ea <__ieee754_pow+0xfa>
 800bb18:	2400      	movs	r4, #0
 800bb1a:	f7ff bb4b 	b.w	800b1b4 <__ieee754_pow+0xc4>
 800bb1e:	bf00      	nop
 800bb20:	00000000 	.word	0x00000000
 800bb24:	3fe62e43 	.word	0x3fe62e43
 800bb28:	fefa39ef 	.word	0xfefa39ef
 800bb2c:	3fe62e42 	.word	0x3fe62e42
 800bb30:	0ca86c39 	.word	0x0ca86c39
 800bb34:	be205c61 	.word	0xbe205c61
 800bb38:	72bea4d0 	.word	0x72bea4d0
 800bb3c:	3e663769 	.word	0x3e663769
 800bb40:	c5d26bf1 	.word	0xc5d26bf1
 800bb44:	3ebbbd41 	.word	0x3ebbbd41
 800bb48:	af25de2c 	.word	0xaf25de2c
 800bb4c:	3f11566a 	.word	0x3f11566a
 800bb50:	16bebd93 	.word	0x16bebd93
 800bb54:	3f66c16c 	.word	0x3f66c16c
 800bb58:	5555553e 	.word	0x5555553e
 800bb5c:	3fc55555 	.word	0x3fc55555
 800bb60:	40900000 	.word	0x40900000
 800bb64:	4090cbff 	.word	0x4090cbff
 800bb68:	3f6f3400 	.word	0x3f6f3400
 800bb6c:	4090cc00 	.word	0x4090cc00
 800bb70:	3fe00000 	.word	0x3fe00000
 800bb74:	fff00000 	.word	0xfff00000
 800bb78:	3ff00000 	.word	0x3ff00000
 800bb7c:	652b82fe 	.word	0x652b82fe
 800bb80:	3c971547 	.word	0x3c971547

0800bb84 <fabs>:
 800bb84:	ec51 0b10 	vmov	r0, r1, d0
 800bb88:	4602      	mov	r2, r0
 800bb8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb8e:	ec43 2b10 	vmov	d0, r2, r3
 800bb92:	4770      	bx	lr
 800bb94:	0000      	movs	r0, r0
	...

0800bb98 <scalbn>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	ec55 4b10 	vmov	r4, r5, d0
 800bb9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bba2:	4606      	mov	r6, r0
 800bba4:	462b      	mov	r3, r5
 800bba6:	b991      	cbnz	r1, 800bbce <scalbn+0x36>
 800bba8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bbac:	4323      	orrs	r3, r4
 800bbae:	d03b      	beq.n	800bc28 <scalbn+0x90>
 800bbb0:	4b33      	ldr	r3, [pc, #204]	@ (800bc80 <scalbn+0xe8>)
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f7f4 fd2e 	bl	8000618 <__aeabi_dmul>
 800bbbc:	4b31      	ldr	r3, [pc, #196]	@ (800bc84 <scalbn+0xec>)
 800bbbe:	429e      	cmp	r6, r3
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	da0f      	bge.n	800bbe6 <scalbn+0x4e>
 800bbc6:	a326      	add	r3, pc, #152	@ (adr r3, 800bc60 <scalbn+0xc8>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	e01e      	b.n	800bc0c <scalbn+0x74>
 800bbce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	d10b      	bne.n	800bbee <scalbn+0x56>
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7f4 fb66 	bl	80002ac <__adddf3>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	e020      	b.n	800bc28 <scalbn+0x90>
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bbec:	3936      	subs	r1, #54	@ 0x36
 800bbee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bbf2:	4296      	cmp	r6, r2
 800bbf4:	dd0d      	ble.n	800bc12 <scalbn+0x7a>
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	a11b      	add	r1, pc, #108	@ (adr r1, 800bc68 <scalbn+0xd0>)
 800bbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbfe:	da02      	bge.n	800bc06 <scalbn+0x6e>
 800bc00:	a11b      	add	r1, pc, #108	@ (adr r1, 800bc70 <scalbn+0xd8>)
 800bc02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc06:	a318      	add	r3, pc, #96	@ (adr r3, 800bc68 <scalbn+0xd0>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	f7f4 fd04 	bl	8000618 <__aeabi_dmul>
 800bc10:	e7e6      	b.n	800bbe0 <scalbn+0x48>
 800bc12:	1872      	adds	r2, r6, r1
 800bc14:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bc18:	428a      	cmp	r2, r1
 800bc1a:	dcec      	bgt.n	800bbf6 <scalbn+0x5e>
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	dd06      	ble.n	800bc2e <scalbn+0x96>
 800bc20:	f36f 531e 	bfc	r3, #20, #11
 800bc24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc28:	ec45 4b10 	vmov	d0, r4, r5
 800bc2c:	bd70      	pop	{r4, r5, r6, pc}
 800bc2e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bc32:	da08      	bge.n	800bc46 <scalbn+0xae>
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	a10a      	add	r1, pc, #40	@ (adr r1, 800bc60 <scalbn+0xc8>)
 800bc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3c:	dac3      	bge.n	800bbc6 <scalbn+0x2e>
 800bc3e:	a10e      	add	r1, pc, #56	@ (adr r1, 800bc78 <scalbn+0xe0>)
 800bc40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc44:	e7bf      	b.n	800bbc6 <scalbn+0x2e>
 800bc46:	3236      	adds	r2, #54	@ 0x36
 800bc48:	f36f 531e 	bfc	r3, #20, #11
 800bc4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc50:	4620      	mov	r0, r4
 800bc52:	4b0d      	ldr	r3, [pc, #52]	@ (800bc88 <scalbn+0xf0>)
 800bc54:	4629      	mov	r1, r5
 800bc56:	2200      	movs	r2, #0
 800bc58:	e7d8      	b.n	800bc0c <scalbn+0x74>
 800bc5a:	bf00      	nop
 800bc5c:	f3af 8000 	nop.w
 800bc60:	c2f8f359 	.word	0xc2f8f359
 800bc64:	01a56e1f 	.word	0x01a56e1f
 800bc68:	8800759c 	.word	0x8800759c
 800bc6c:	7e37e43c 	.word	0x7e37e43c
 800bc70:	8800759c 	.word	0x8800759c
 800bc74:	fe37e43c 	.word	0xfe37e43c
 800bc78:	c2f8f359 	.word	0xc2f8f359
 800bc7c:	81a56e1f 	.word	0x81a56e1f
 800bc80:	43500000 	.word	0x43500000
 800bc84:	ffff3cb0 	.word	0xffff3cb0
 800bc88:	3c900000 	.word	0x3c900000

0800bc8c <with_errno>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	ed2d 8b02 	vpush	{d8}
 800bc92:	eeb0 8a40 	vmov.f32	s16, s0
 800bc96:	eef0 8a60 	vmov.f32	s17, s1
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	f7fd fad6 	bl	800924c <__errno>
 800bca0:	eeb0 0a48 	vmov.f32	s0, s16
 800bca4:	eef0 0a68 	vmov.f32	s1, s17
 800bca8:	ecbd 8b02 	vpop	{d8}
 800bcac:	6004      	str	r4, [r0, #0]
 800bcae:	bd10      	pop	{r4, pc}

0800bcb0 <xflow>:
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	b507      	push	{r0, r1, r2, lr}
 800bcb4:	ec51 0b10 	vmov	r0, r1, d0
 800bcb8:	b183      	cbz	r3, 800bcdc <xflow+0x2c>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcc0:	e9cd 2300 	strd	r2, r3, [sp]
 800bcc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcc8:	f7f4 fca6 	bl	8000618 <__aeabi_dmul>
 800bccc:	ec41 0b10 	vmov	d0, r0, r1
 800bcd0:	2022      	movs	r0, #34	@ 0x22
 800bcd2:	b003      	add	sp, #12
 800bcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd8:	f7ff bfd8 	b.w	800bc8c <with_errno>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	e7ee      	b.n	800bcc0 <xflow+0x10>
 800bce2:	0000      	movs	r0, r0
 800bce4:	0000      	movs	r0, r0
	...

0800bce8 <__math_uflow>:
 800bce8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bcf0 <__math_uflow+0x8>
 800bcec:	f7ff bfe0 	b.w	800bcb0 <xflow>
 800bcf0:	00000000 	.word	0x00000000
 800bcf4:	10000000 	.word	0x10000000

0800bcf8 <__math_oflow>:
 800bcf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd00 <__math_oflow+0x8>
 800bcfc:	f7ff bfd8 	b.w	800bcb0 <xflow>
 800bd00:	00000000 	.word	0x00000000
 800bd04:	70000000 	.word	0x70000000

0800bd08 <__ieee754_sqrt>:
 800bd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	4a66      	ldr	r2, [pc, #408]	@ (800bea8 <__ieee754_sqrt+0x1a0>)
 800bd0e:	ec55 4b10 	vmov	r4, r5, d0
 800bd12:	43aa      	bics	r2, r5
 800bd14:	462b      	mov	r3, r5
 800bd16:	4621      	mov	r1, r4
 800bd18:	d110      	bne.n	800bd3c <__ieee754_sqrt+0x34>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fc7a 	bl	8000618 <__aeabi_dmul>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 fabe 	bl	80002ac <__adddf3>
 800bd30:	4604      	mov	r4, r0
 800bd32:	460d      	mov	r5, r1
 800bd34:	ec45 4b10 	vmov	d0, r4, r5
 800bd38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	dc0e      	bgt.n	800bd5e <__ieee754_sqrt+0x56>
 800bd40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bd44:	4322      	orrs	r2, r4
 800bd46:	d0f5      	beq.n	800bd34 <__ieee754_sqrt+0x2c>
 800bd48:	b19d      	cbz	r5, 800bd72 <__ieee754_sqrt+0x6a>
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	f7f4 faaa 	bl	80002a8 <__aeabi_dsub>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	f7f4 fd88 	bl	800086c <__aeabi_ddiv>
 800bd5c:	e7e8      	b.n	800bd30 <__ieee754_sqrt+0x28>
 800bd5e:	152a      	asrs	r2, r5, #20
 800bd60:	d115      	bne.n	800bd8e <__ieee754_sqrt+0x86>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e009      	b.n	800bd7a <__ieee754_sqrt+0x72>
 800bd66:	0acb      	lsrs	r3, r1, #11
 800bd68:	3a15      	subs	r2, #21
 800bd6a:	0549      	lsls	r1, r1, #21
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d0fa      	beq.n	800bd66 <__ieee754_sqrt+0x5e>
 800bd70:	e7f7      	b.n	800bd62 <__ieee754_sqrt+0x5a>
 800bd72:	462a      	mov	r2, r5
 800bd74:	e7fa      	b.n	800bd6c <__ieee754_sqrt+0x64>
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	3001      	adds	r0, #1
 800bd7a:	02dc      	lsls	r4, r3, #11
 800bd7c:	d5fb      	bpl.n	800bd76 <__ieee754_sqrt+0x6e>
 800bd7e:	1e44      	subs	r4, r0, #1
 800bd80:	1b12      	subs	r2, r2, r4
 800bd82:	f1c0 0420 	rsb	r4, r0, #32
 800bd86:	fa21 f404 	lsr.w	r4, r1, r4
 800bd8a:	4323      	orrs	r3, r4
 800bd8c:	4081      	lsls	r1, r0
 800bd8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd92:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bd96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd9a:	07d2      	lsls	r2, r2, #31
 800bd9c:	bf5c      	itt	pl
 800bd9e:	005b      	lslpl	r3, r3, #1
 800bda0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bda4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bda8:	bf58      	it	pl
 800bdaa:	0049      	lslpl	r1, r1, #1
 800bdac:	2600      	movs	r6, #0
 800bdae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bdb2:	107f      	asrs	r7, r7, #1
 800bdb4:	0049      	lsls	r1, r1, #1
 800bdb6:	2016      	movs	r0, #22
 800bdb8:	4632      	mov	r2, r6
 800bdba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bdbe:	1915      	adds	r5, r2, r4
 800bdc0:	429d      	cmp	r5, r3
 800bdc2:	bfde      	ittt	le
 800bdc4:	192a      	addle	r2, r5, r4
 800bdc6:	1b5b      	suble	r3, r3, r5
 800bdc8:	1936      	addle	r6, r6, r4
 800bdca:	0fcd      	lsrs	r5, r1, #31
 800bdcc:	3801      	subs	r0, #1
 800bdce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bdd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bdd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bdda:	d1f0      	bne.n	800bdbe <__ieee754_sqrt+0xb6>
 800bddc:	4605      	mov	r5, r0
 800bdde:	2420      	movs	r4, #32
 800bde0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bde4:	4293      	cmp	r3, r2
 800bde6:	eb0c 0e00 	add.w	lr, ip, r0
 800bdea:	dc02      	bgt.n	800bdf2 <__ieee754_sqrt+0xea>
 800bdec:	d113      	bne.n	800be16 <__ieee754_sqrt+0x10e>
 800bdee:	458e      	cmp	lr, r1
 800bdf0:	d811      	bhi.n	800be16 <__ieee754_sqrt+0x10e>
 800bdf2:	f1be 0f00 	cmp.w	lr, #0
 800bdf6:	eb0e 000c 	add.w	r0, lr, ip
 800bdfa:	da3f      	bge.n	800be7c <__ieee754_sqrt+0x174>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	db3d      	blt.n	800be7c <__ieee754_sqrt+0x174>
 800be00:	f102 0801 	add.w	r8, r2, #1
 800be04:	1a9b      	subs	r3, r3, r2
 800be06:	458e      	cmp	lr, r1
 800be08:	bf88      	it	hi
 800be0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800be0e:	eba1 010e 	sub.w	r1, r1, lr
 800be12:	4465      	add	r5, ip
 800be14:	4642      	mov	r2, r8
 800be16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800be1a:	3c01      	subs	r4, #1
 800be1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800be20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800be24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800be28:	d1dc      	bne.n	800bde4 <__ieee754_sqrt+0xdc>
 800be2a:	4319      	orrs	r1, r3
 800be2c:	d01b      	beq.n	800be66 <__ieee754_sqrt+0x15e>
 800be2e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800beac <__ieee754_sqrt+0x1a4>
 800be32:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800beb0 <__ieee754_sqrt+0x1a8>
 800be36:	e9da 0100 	ldrd	r0, r1, [sl]
 800be3a:	e9db 2300 	ldrd	r2, r3, [fp]
 800be3e:	f7f4 fa33 	bl	80002a8 <__aeabi_dsub>
 800be42:	e9da 8900 	ldrd	r8, r9, [sl]
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fe5f 	bl	8000b10 <__aeabi_dcmple>
 800be52:	b140      	cbz	r0, 800be66 <__ieee754_sqrt+0x15e>
 800be54:	f1b5 3fff 	cmp.w	r5, #4294967295
 800be58:	e9da 0100 	ldrd	r0, r1, [sl]
 800be5c:	e9db 2300 	ldrd	r2, r3, [fp]
 800be60:	d10e      	bne.n	800be80 <__ieee754_sqrt+0x178>
 800be62:	3601      	adds	r6, #1
 800be64:	4625      	mov	r5, r4
 800be66:	1073      	asrs	r3, r6, #1
 800be68:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800be6c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800be70:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800be74:	086b      	lsrs	r3, r5, #1
 800be76:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800be7a:	e759      	b.n	800bd30 <__ieee754_sqrt+0x28>
 800be7c:	4690      	mov	r8, r2
 800be7e:	e7c1      	b.n	800be04 <__ieee754_sqrt+0xfc>
 800be80:	f7f4 fa14 	bl	80002ac <__adddf3>
 800be84:	e9da 8900 	ldrd	r8, r9, [sl]
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4640      	mov	r0, r8
 800be8e:	4649      	mov	r1, r9
 800be90:	f7f4 fe34 	bl	8000afc <__aeabi_dcmplt>
 800be94:	b120      	cbz	r0, 800bea0 <__ieee754_sqrt+0x198>
 800be96:	1cab      	adds	r3, r5, #2
 800be98:	bf08      	it	eq
 800be9a:	3601      	addeq	r6, #1
 800be9c:	3502      	adds	r5, #2
 800be9e:	e7e2      	b.n	800be66 <__ieee754_sqrt+0x15e>
 800bea0:	1c6b      	adds	r3, r5, #1
 800bea2:	f023 0501 	bic.w	r5, r3, #1
 800bea6:	e7de      	b.n	800be66 <__ieee754_sqrt+0x15e>
 800bea8:	7ff00000 	.word	0x7ff00000
 800beac:	0800c3a0 	.word	0x0800c3a0
 800beb0:	0800c398 	.word	0x0800c398

0800beb4 <_init>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	bf00      	nop
 800beb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beba:	bc08      	pop	{r3}
 800bebc:	469e      	mov	lr, r3
 800bebe:	4770      	bx	lr

0800bec0 <_fini>:
 800bec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec2:	bf00      	nop
 800bec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bec6:	bc08      	pop	{r3}
 800bec8:	469e      	mov	lr, r3
 800beca:	4770      	bx	lr
